// Code generated by protoc-gen-gogo.
// source: compare.proto
// DO NOT EDIT!

/*
Package compare is a generated protocol buffer package.

It is generated from these files:
	compare.proto

It has these top-level messages:
	MyMessage
*/
package compare

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MyMessage struct {
	// Types that are valid to be assigned to Thing:
	//	*MyMessage_MyData
	//	*MyMessage_MyOtherData
	Thing isMyMessage_Thing `protobuf_oneof:"thing"`
}

func (m *MyMessage) Reset()                    { *m = MyMessage{} }
func (m *MyMessage) String() string            { return proto.CompactTextString(m) }
func (*MyMessage) ProtoMessage()               {}
func (*MyMessage) Descriptor() ([]byte, []int) { return fileDescriptorCompare, []int{0} }

type isMyMessage_Thing interface {
	isMyMessage_Thing()
	Compare(interface{}) int
}

type MyMessage_MyData struct {
	MyData uint32 `protobuf:"varint,1,opt,name=my_data,json=myData,proto3,oneof"`
}
type MyMessage_MyOtherData struct {
	MyOtherData uint32 `protobuf:"varint,2,opt,name=my_other_data,json=myOtherData,proto3,oneof"`
}

func (*MyMessage_MyData) isMyMessage_Thing()      {}
func (*MyMessage_MyOtherData) isMyMessage_Thing() {}

func (m *MyMessage) GetThing() isMyMessage_Thing {
	if m != nil {
		return m.Thing
	}
	return nil
}

func (m *MyMessage) GetMyData() uint32 {
	if x, ok := m.GetThing().(*MyMessage_MyData); ok {
		return x.MyData
	}
	return 0
}

func (m *MyMessage) GetMyOtherData() uint32 {
	if x, ok := m.GetThing().(*MyMessage_MyOtherData); ok {
		return x.MyOtherData
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MyMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MyMessage_OneofMarshaler, _MyMessage_OneofUnmarshaler, _MyMessage_OneofSizer, []interface{}{
		(*MyMessage_MyData)(nil),
		(*MyMessage_MyOtherData)(nil),
	}
}

func _MyMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MyMessage)
	// thing
	switch x := m.Thing.(type) {
	case *MyMessage_MyData:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.MyData))
	case *MyMessage_MyOtherData:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.MyOtherData))
	case nil:
	default:
		return fmt.Errorf("MyMessage.Thing has unexpected type %T", x)
	}
	return nil
}

func _MyMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MyMessage)
	switch tag {
	case 1: // thing.my_data
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Thing = &MyMessage_MyData{uint32(x)}
		return true, err
	case 2: // thing.my_other_data
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Thing = &MyMessage_MyOtherData{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _MyMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MyMessage)
	// thing
	switch x := m.Thing.(type) {
	case *MyMessage_MyData:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.MyData))
	case *MyMessage_MyOtherData:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.MyOtherData))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*MyMessage)(nil), "compare.MyMessage")
}
func (this *MyMessage) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*MyMessage)
	if !ok {
		that2, ok := that.(MyMessage)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if that1.Thing == nil {
		if this.Thing != nil {
			return 1
		}
	} else if this.Thing == nil {
		return -1
	} else if c := this.Thing.Compare(that1.Thing); c != 0 {
		return c
	}
	return 0
}
func (this *MyMessage_MyData) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*MyMessage_MyData)
	if !ok {
		that2, ok := that.(MyMessage_MyData)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.MyData != that1.MyData {
		if this.MyData < that1.MyData {
			return -1
		}
		return 1
	}
	return 0
}
func (this *MyMessage_MyOtherData) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*MyMessage_MyOtherData)
	if !ok {
		that2, ok := that.(MyMessage_MyOtherData)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.MyOtherData != that1.MyOtherData {
		if this.MyOtherData < that1.MyOtherData {
			return -1
		}
		return 1
	}
	return 0
}

func init() { proto.RegisterFile("compare.proto", fileDescriptorCompare) }

var fileDescriptorCompare = []byte{
	// 158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0xcf, 0x2d,
	0x48, 0x2c, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0xa5, 0x74, 0xd3,
	0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3, 0xf5, 0xc1,
	0xf2, 0x49, 0xa5, 0x69, 0x60, 0x1e, 0x98, 0x03, 0x66, 0x41, 0xf4, 0x29, 0x85, 0x72, 0x71, 0xfa,
	0x56, 0xfa, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x0a, 0x49, 0x72, 0xb1, 0xe7, 0x56, 0xc6, 0xa7,
	0x24, 0x96, 0x24, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x7a, 0x30, 0x04, 0xb1, 0xe5, 0x56, 0xba,
	0x24, 0x96, 0x24, 0x0a, 0xa9, 0x70, 0xf1, 0xe6, 0x56, 0xc6, 0xe7, 0x97, 0x64, 0xa4, 0x16, 0x41,
	0x14, 0x30, 0x41, 0x15, 0x70, 0xe7, 0x56, 0xfa, 0x83, 0x44, 0x41, 0xaa, 0x9c, 0xd8, 0xb9, 0x58,
	0x4b, 0x32, 0x32, 0xf3, 0xd2, 0x9d, 0x58, 0x56, 0x3c, 0x96, 0x63, 0x4c, 0x62, 0x03, 0xdb, 0x61,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xcd, 0x0e, 0xcf, 0xac, 0x00, 0x00, 0x00,
}
