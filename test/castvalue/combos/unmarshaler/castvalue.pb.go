// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: combos/unmarshaler/castvalue.proto

package castvalue

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Castaway struct {
	CastMapValueMessage         map[int32]MyWilson  `protobuf:"bytes,1,rep,name=CastMapValueMessage,castvalue=MyWilson,castvaluetype=castvalue.Wilson" json:"CastMapValueMessage" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CastMapValueMessageNullable map[int32]*MyWilson `protobuf:"bytes,2,rep,name=CastMapValueMessageNullable,castvalue=MyWilson,castvaluetype=castvalue.Wilson" json:"CastMapValueMessageNullable,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral        struct{}            `json:"-"`
	XXX_unrecognized            []byte              `json:"-"`
	XXX_sizecache               int32               `json:"-"`
}

func (m *Castaway) Reset()      { *m = Castaway{} }
func (*Castaway) ProtoMessage() {}
func (*Castaway) Descriptor() ([]byte, []int) {
	return fileDescriptor_castvalue_92129bf361b9c2b5, []int{0}
}
func (m *Castaway) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Castaway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Castaway.Marshal(b, m, deterministic)
}
func (dst *Castaway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Castaway.Merge(dst, src)
}
func (m *Castaway) XXX_Size() int {
	return xxx_messageInfo_Castaway.Size(m)
}
func (m *Castaway) XXX_DiscardUnknown() {
	xxx_messageInfo_Castaway.DiscardUnknown(m)
}

var xxx_messageInfo_Castaway proto.InternalMessageInfo

type Wilson struct {
	Int64                *int64   `protobuf:"varint,1,opt,name=Int64" json:"Int64,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Wilson) Reset()      { *m = Wilson{} }
func (*Wilson) ProtoMessage() {}
func (*Wilson) Descriptor() ([]byte, []int) {
	return fileDescriptor_castvalue_92129bf361b9c2b5, []int{1}
}
func (m *Wilson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wilson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Wilson.Marshal(b, m, deterministic)
}
func (dst *Wilson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wilson.Merge(dst, src)
}
func (m *Wilson) XXX_Size() int {
	return xxx_messageInfo_Wilson.Size(m)
}
func (m *Wilson) XXX_DiscardUnknown() {
	xxx_messageInfo_Wilson.DiscardUnknown(m)
}

var xxx_messageInfo_Wilson proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Castaway)(nil), "castvalue.Castaway")
	proto.RegisterMapType((map[int32]MyWilson)(nil), "castvalue.Castaway.CastMapValueMessageEntry")
	proto.RegisterMapType((map[int32]*MyWilson)(nil), "castvalue.Castaway.CastMapValueMessageNullableEntry")
	proto.RegisterType((*Wilson)(nil), "castvalue.Wilson")
}
func (this *Castaway) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return CastvalueDescription()
}
func (this *Wilson) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return CastvalueDescription()
}
func CastvalueDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4013 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x5d, 0x70, 0xdc, 0xd6,
		0x75, 0x26, 0xf6, 0x87, 0xdc, 0x3d, 0xbb, 0x5c, 0x82, 0x20, 0x2d, 0xad, 0xe8, 0x64, 0x25, 0xad,
		0xed, 0x88, 0xb6, 0x13, 0x32, 0x23, 0x4b, 0xb2, 0xb4, 0x6a, 0xe2, 0x2e, 0x97, 0x2b, 0x66, 0x5d,
		0xfe, 0x05, 0x4b, 0xc6, 0x96, 0x33, 0x1d, 0x0c, 0x88, 0xbd, 0x5c, 0x42, 0xc2, 0x02, 0x08, 0x80,
		0x95, 0x4c, 0x4d, 0x1f, 0xd4, 0x71, 0xda, 0x4e, 0xda, 0x69, 0x9b, 0xfe, 0xcc, 0x34, 0x71, 0x1d,
		0xb7, 0x49, 0xa7, 0x71, 0x9a, 0xfe, 0x25, 0x4d, 0x9b, 0x26, 0xe9, 0x4b, 0xfa, 0x90, 0xd6, 0x4f,
		0x9d, 0xe4, 0xad, 0x0f, 0x9d, 0xd6, 0x62, 0x3c, 0x53, 0xb7, 0x75, 0x1b, 0xb7, 0xd5, 0x83, 0x67,
		0xfc, 0xd2, 0xb9, 0x7f, 0x58, 0x00, 0xbb, 0x24, 0xc0, 0x74, 0xec, 0x3c, 0x91, 0x38, 0xf7, 0x7c,
		0x1f, 0xce, 0x3d, 0xf7, 0xdc, 0x73, 0xce, 0xbd, 0x58, 0xf8, 0xd1, 0x15, 0x38, 0xd3, 0xb5, 0xac,
		0xae, 0x81, 0x16, 0x6d, 0xc7, 0xf2, 0xac, 0x9d, 0xfe, 0xee, 0x62, 0x07, 0xb9, 0x9a, 0xa3, 0xdb,
		0x9e, 0xe5, 0x2c, 0x10, 0x99, 0x34, 0x45, 0x35, 0x16, 0xb8, 0x46, 0x75, 0x0d, 0xa6, 0xaf, 0xe9,
		0x06, 0x5a, 0xf6, 0x15, 0xdb, 0xc8, 0x93, 0x2e, 0x43, 0x66, 0x57, 0x37, 0x50, 0x59, 0x38, 0x93,
		0x9e, 0x2f, 0x9c, 0x7f, 0x78, 0x21, 0x02, 0x5a, 0x08, 0x23, 0x36, 0xb1, 0x58, 0x26, 0x88, 0xea,
		0xeb, 0x19, 0x98, 0x19, 0x31, 0x2a, 0x49, 0x90, 0x31, 0xd5, 0x1e, 0x66, 0x14, 0xe6, 0xf3, 0x32,
		0xf9, 0x5f, 0x2a, 0xc3, 0x84, 0xad, 0x6a, 0x37, 0xd5, 0x2e, 0x2a, 0xa7, 0x88, 0x98, 0x3f, 0x4a,
		0x15, 0x80, 0x0e, 0xb2, 0x91, 0xd9, 0x41, 0xa6, 0xb6, 0x5f, 0x4e, 0x9f, 0x49, 0xcf, 0xe7, 0xe5,
		0x80, 0x44, 0x7a, 0x1c, 0xa6, 0xed, 0xfe, 0x8e, 0xa1, 0x6b, 0x4a, 0x40, 0x0d, 0xce, 0xa4, 0xe7,
		0xb3, 0xb2, 0x48, 0x07, 0x96, 0x07, 0xca, 0xe7, 0x60, 0xea, 0x36, 0x52, 0x6f, 0x06, 0x55, 0x0b,
		0x44, 0xb5, 0x84, 0xc5, 0x01, 0xc5, 0x06, 0x14, 0x7b, 0xc8, 0x75, 0xd5, 0x2e, 0x52, 0xbc, 0x7d,
		0x1b, 0x95, 0x33, 0x64, 0xf6, 0x67, 0x86, 0x66, 0x1f, 0x9d, 0x79, 0x81, 0xa1, 0xb6, 0xf6, 0x6d,
		0x24, 0xd5, 0x21, 0x8f, 0xcc, 0x7e, 0x8f, 0x32, 0x64, 0x0f, 0xf1, 0x5f, 0xd3, 0xec, 0xf7, 0xa2,
		0x2c, 0x39, 0x0c, 0x63, 0x14, 0x13, 0x2e, 0x72, 0x6e, 0xe9, 0x1a, 0x2a, 0x8f, 0x13, 0x82, 0x73,
		0x43, 0x04, 0x6d, 0x3a, 0x1e, 0xe5, 0xe0, 0x38, 0xa9, 0x01, 0x79, 0xf4, 0xbc, 0x87, 0x4c, 0x57,
		0xb7, 0xcc, 0xf2, 0x04, 0x21, 0x79, 0x64, 0xc4, 0x2a, 0x22, 0xa3, 0x13, 0xa5, 0x18, 0xe0, 0xa4,
		0x4b, 0x30, 0x61, 0xd9, 0x9e, 0x6e, 0x99, 0x6e, 0x39, 0x77, 0x46, 0x98, 0x2f, 0x9c, 0x7f, 0xdf,
		0xc8, 0x40, 0xd8, 0xa0, 0x3a, 0x32, 0x57, 0x96, 0x5a, 0x20, 0xba, 0x56, 0xdf, 0xd1, 0x90, 0xa2,
		0x59, 0x1d, 0xa4, 0xe8, 0xe6, 0xae, 0x55, 0xce, 0x13, 0x82, 0xd3, 0xc3, 0x13, 0x21, 0x8a, 0x0d,
		0xab, 0x83, 0x5a, 0xe6, 0xae, 0x25, 0x97, 0xdc, 0xd0, 0xb3, 0x74, 0x02, 0xc6, 0xdd, 0x7d, 0xd3,
		0x53, 0x9f, 0x2f, 0x17, 0x49, 0x84, 0xb0, 0xa7, 0xea, 0xb7, 0xc7, 0x61, 0x2a, 0x49, 0x88, 0x5d,
		0x85, 0xec, 0x2e, 0x9e, 0x65, 0x39, 0x75, 0x1c, 0x1f, 0x50, 0x4c, 0xd8, 0x89, 0xe3, 0x3f, 0xa6,
		0x13, 0xeb, 0x50, 0x30, 0x91, 0xeb, 0xa1, 0x0e, 0x8d, 0x88, 0x74, 0xc2, 0x98, 0x02, 0x0a, 0x1a,
		0x0e, 0xa9, 0xcc, 0x8f, 0x15, 0x52, 0xcf, 0xc2, 0x94, 0x6f, 0x92, 0xe2, 0xa8, 0x66, 0x97, 0xc7,
		0xe6, 0x62, 0x9c, 0x25, 0x0b, 0x4d, 0x8e, 0x93, 0x31, 0x4c, 0x2e, 0xa1, 0xd0, 0xb3, 0xb4, 0x0c,
		0x60, 0x99, 0xc8, 0xda, 0x55, 0x3a, 0x48, 0x33, 0xca, 0xb9, 0x43, 0xbc, 0xb4, 0x81, 0x55, 0x86,
		0xbc, 0x64, 0x51, 0xa9, 0x66, 0x48, 0x57, 0x06, 0xa1, 0x36, 0x71, 0x48, 0xa4, 0xac, 0xd1, 0x4d,
		0x36, 0x14, 0x6d, 0xdb, 0x50, 0x72, 0x10, 0x8e, 0x7b, 0xd4, 0x61, 0x33, 0xcb, 0x13, 0x23, 0x16,
		0x62, 0x67, 0x26, 0x33, 0x18, 0x9d, 0xd8, 0xa4, 0x13, 0x7c, 0x94, 0x1e, 0x02, 0x5f, 0xa0, 0x90,
		0xb0, 0x02, 0x92, 0x85, 0x8a, 0x5c, 0xb8, 0xae, 0xf6, 0xd0, 0xdc, 0x1d, 0x28, 0x85, 0xdd, 0x23,
		0xcd, 0x42, 0xd6, 0xf5, 0x54, 0xc7, 0x23, 0x51, 0x98, 0x95, 0xe9, 0x83, 0x24, 0x42, 0x1a, 0x99,
		0x1d, 0x92, 0xe5, 0xb2, 0x32, 0xfe, 0x57, 0xfa, 0xe9, 0xc1, 0x84, 0xd3, 0x64, 0xc2, 0x1f, 0x18,
		0x5e, 0xd1, 0x10, 0x73, 0x74, 0xde, 0x73, 0x4f, 0xc2, 0x64, 0x68, 0x02, 0x49, 0x5f, 0x5d, 0xfd,
		0x39, 0x78, 0x60, 0x24, 0xb5, 0xf4, 0x2c, 0xcc, 0xf6, 0x4d, 0xdd, 0xf4, 0x90, 0x63, 0x3b, 0x08,
		0x47, 0x2c, 0x7d, 0x55, 0xf9, 0x5f, 0x27, 0x0e, 0x89, 0xb9, 0xed, 0xa0, 0x36, 0x65, 0x91, 0x67,
		0xfa, 0xc3, 0xc2, 0xc7, 0xf2, 0xb9, 0x37, 0x26, 0xc4, 0xbb, 0x77, 0xef, 0xde, 0x4d, 0x55, 0x3f,
		0x37, 0x0e, 0xb3, 0xa3, 0xf6, 0xcc, 0xc8, 0xed, 0x7b, 0x02, 0xc6, 0xcd, 0x7e, 0x6f, 0x07, 0x39,
		0xc4, 0x49, 0x59, 0x99, 0x3d, 0x49, 0x75, 0xc8, 0x1a, 0xea, 0x0e, 0x32, 0xca, 0x99, 0x33, 0xc2,
		0x7c, 0xe9, 0xfc, 0xe3, 0x89, 0x76, 0xe5, 0xc2, 0x2a, 0x86, 0xc8, 0x14, 0x29, 0x7d, 0x14, 0x32,
		0x2c, 0x45, 0x63, 0x86, 0xc7, 0x92, 0x31, 0xe0, 0xbd, 0x24, 0x13, 0x9c, 0xf4, 0x20, 0xe4, 0xf1,
		0x5f, 0x1a, 0x1b, 0xe3, 0xc4, 0xe6, 0x1c, 0x16, 0xe0, 0xb8, 0x90, 0xe6, 0x20, 0x47, 0xb6, 0x49,
		0x07, 0xf1, 0xd2, 0xe6, 0x3f, 0xe3, 0xc0, 0xea, 0xa0, 0x5d, 0xb5, 0x6f, 0x78, 0xca, 0x2d, 0xd5,
		0xe8, 0x23, 0x12, 0xf0, 0x79, 0xb9, 0xc8, 0x84, 0x9f, 0xc0, 0x32, 0xe9, 0x34, 0x14, 0xe8, 0xae,
		0xd2, 0xcd, 0x0e, 0x7a, 0x9e, 0x64, 0xcf, 0xac, 0x4c, 0x37, 0x5a, 0x0b, 0x4b, 0xf0, 0xeb, 0x6f,
		0xb8, 0x96, 0xc9, 0x43, 0x93, 0xbc, 0x02, 0x0b, 0xc8, 0xeb, 0x9f, 0x8c, 0x26, 0xee, 0xf7, 0x8f,
		0x9e, 0x5e, 0x34, 0xa6, 0xaa, 0xdf, 0x4c, 0x41, 0x86, 0xe4, 0x8b, 0x29, 0x28, 0x6c, 0x5d, 0xdf,
		0x6c, 0x2a, 0xcb, 0x1b, 0xdb, 0x4b, 0xab, 0x4d, 0x51, 0x90, 0x4a, 0x00, 0x44, 0x70, 0x6d, 0x75,
		0xa3, 0xbe, 0x25, 0xa6, 0xfc, 0xe7, 0xd6, 0xfa, 0xd6, 0xa5, 0x0b, 0x62, 0xda, 0x07, 0x6c, 0x53,
		0x41, 0x26, 0xa8, 0xf0, 0xc4, 0x79, 0x31, 0x2b, 0x89, 0x50, 0xa4, 0x04, 0xad, 0x67, 0x9b, 0xcb,
		0x97, 0x2e, 0x88, 0xe3, 0x61, 0xc9, 0x13, 0xe7, 0xc5, 0x09, 0x69, 0x12, 0xf2, 0x44, 0xb2, 0xb4,
		0xb1, 0xb1, 0x2a, 0xe6, 0x7c, 0xce, 0xf6, 0x96, 0xdc, 0x5a, 0x5f, 0x11, 0xf3, 0x3e, 0xe7, 0x8a,
		0xbc, 0xb1, 0xbd, 0x29, 0x82, 0xcf, 0xb0, 0xd6, 0x6c, 0xb7, 0xeb, 0x2b, 0x4d, 0xb1, 0xe0, 0x6b,
		0x2c, 0x5d, 0xdf, 0x6a, 0xb6, 0xc5, 0x62, 0xc8, 0xac, 0x27, 0xce, 0x8b, 0x93, 0xfe, 0x2b, 0x9a,
		0xeb, 0xdb, 0x6b, 0x62, 0x49, 0x9a, 0x86, 0x49, 0xfa, 0x0a, 0x6e, 0xc4, 0x54, 0x44, 0x74, 0xe9,
		0x82, 0x28, 0x0e, 0x0c, 0xa1, 0x2c, 0xd3, 0x21, 0xc1, 0xa5, 0x0b, 0xa2, 0x54, 0x6d, 0x40, 0x96,
		0x44, 0x97, 0x24, 0x41, 0x69, 0xb5, 0xbe, 0xd4, 0x5c, 0x55, 0x36, 0x36, 0xb7, 0x5a, 0x1b, 0xeb,
		0xf5, 0x55, 0x51, 0x18, 0xc8, 0xe4, 0xe6, 0xc7, 0xb7, 0x5b, 0x72, 0x73, 0x59, 0x4c, 0x05, 0x65,
		0x9b, 0xcd, 0xfa, 0x56, 0x73, 0x59, 0x4c, 0x57, 0x35, 0x98, 0x1d, 0x95, 0x27, 0x47, 0xee, 0x8c,
		0xc0, 0x12, 0xa7, 0x0e, 0x59, 0x62, 0xc2, 0x35, 0xb4, 0xc4, 0x3f, 0x4c, 0xc1, 0xcc, 0x88, 0x5a,
		0x31, 0xf2, 0x25, 0x4f, 0x41, 0x96, 0x86, 0x28, 0xad, 0x9e, 0x8f, 0x8e, 0x2c, 0x3a, 0x24, 0x60,
		0x87, 0x2a, 0x28, 0xc1, 0x05, 0x3b, 0x88, 0xf4, 0x21, 0x1d, 0x04, 0xa6, 0x18, 0xca, 0xe9, 0x3f,
		0x3b, 0x94, 0xd3, 0x69, 0xd9, 0xbb, 0x94, 0xa4, 0xec, 0x11, 0xd9, 0xf1, 0x72, 0x7b, 0x76, 0x44,
		0x6e, 0xbf, 0x0a, 0xd3, 0x43, 0x44, 0x89, 0x73, 0xec, 0x0b, 0x02, 0x94, 0x0f, 0x73, 0x4e, 0x4c,
		0xa6, 0x4b, 0x85, 0x32, 0xdd, 0xd5, 0xa8, 0x07, 0xcf, 0x1e, 0xbe, 0x08, 0x43, 0x6b, 0xfd, 0x8a,
		0x00, 0x27, 0x46, 0x77, 0x8a, 0x23, 0x6d, 0xf8, 0x28, 0x8c, 0xf7, 0x90, 0xb7, 0x67, 0xf1, 0x6e,
		0xe9, 0x03, 0x23, 0x6a, 0x30, 0x1e, 0x8e, 0x2e, 0x36, 0x43, 0x05, 0x8b, 0x78, 0xfa, 0xb0, 0x76,
		0x8f, 0x5a, 0x33, 0x64, 0xe9, 0x67, 0x52, 0xf0, 0xc0, 0x48, 0xf2, 0x91, 0x86, 0xbe, 0x1f, 0x40,
		0x37, 0xed, 0xbe, 0x47, 0x3b, 0x22, 0x9a, 0x60, 0xf3, 0x44, 0x42, 0x92, 0x17, 0x4e, 0x9e, 0x7d,
		0xcf, 0x1f, 0x4f, 0x93, 0x71, 0xa0, 0x22, 0xa2, 0x70, 0x79, 0x60, 0x68, 0x86, 0x18, 0x5a, 0x39,
		0x64, 0xa6, 0x43, 0x81, 0xf9, 0x61, 0x10, 0x35, 0x43, 0x47, 0xa6, 0xa7, 0xb8, 0x9e, 0x83, 0xd4,
		0x9e, 0x6e, 0x76, 0x49, 0x05, 0xc9, 0xd5, 0xb2, 0xbb, 0xaa, 0xe1, 0x22, 0x79, 0x8a, 0x0e, 0xb7,
		0xf9, 0x28, 0x46, 0x90, 0x00, 0x72, 0x02, 0x88, 0xf1, 0x10, 0x82, 0x0e, 0xfb, 0x88, 0xea, 0x37,
		0x72, 0x50, 0x08, 0xf4, 0xd5, 0xd2, 0x59, 0x28, 0xde, 0x50, 0x6f, 0xa9, 0x0a, 0x3f, 0x2b, 0x51,
		0x4f, 0x14, 0xb0, 0x6c, 0x93, 0x9d, 0x97, 0x3e, 0x0c, 0xb3, 0x44, 0xc5, 0xea, 0x7b, 0xc8, 0x51,
		0x34, 0x43, 0x75, 0x5d, 0xe2, 0xb4, 0x1c, 0x51, 0x95, 0xf0, 0xd8, 0x06, 0x1e, 0x6a, 0xf0, 0x11,
		0xe9, 0x22, 0xcc, 0x10, 0x44, 0xaf, 0x6f, 0x78, 0xba, 0x6d, 0x20, 0x05, 0x9f, 0xde, 0x5c, 0x52,
		0x49, 0x7c, 0xcb, 0xa6, 0xb1, 0xc6, 0x1a, 0x53, 0xc0, 0x16, 0xb9, 0xd2, 0x32, 0xbc, 0x9f, 0xc0,
		0xba, 0xc8, 0x44, 0x8e, 0xea, 0x21, 0x05, 0x7d, 0xaa, 0xaf, 0x1a, 0xae, 0xa2, 0x9a, 0x1d, 0x65,
		0x4f, 0x75, 0xf7, 0xca, 0xb3, 0x98, 0x60, 0x29, 0x55, 0x16, 0xe4, 0x53, 0x58, 0x71, 0x85, 0xe9,
		0x35, 0x89, 0x5a, 0xdd, 0xec, 0x7c, 0x4c, 0x75, 0xf7, 0xa4, 0x1a, 0x9c, 0x20, 0x2c, 0xae, 0xe7,
		0xe8, 0x66, 0x57, 0xd1, 0xf6, 0x90, 0x76, 0x53, 0xe9, 0x7b, 0xbb, 0x97, 0xcb, 0x0f, 0x06, 0xdf,
		0x4f, 0x2c, 0x6c, 0x13, 0x9d, 0x06, 0x56, 0xd9, 0xf6, 0x76, 0x2f, 0x4b, 0x6d, 0x28, 0xe2, 0xc5,
		0xe8, 0xe9, 0x77, 0x90, 0xb2, 0x6b, 0x39, 0xa4, 0x34, 0x96, 0x46, 0xa4, 0xa6, 0x80, 0x07, 0x17,
		0x36, 0x18, 0x60, 0xcd, 0xea, 0xa0, 0x5a, 0xb6, 0xbd, 0xd9, 0x6c, 0x2e, 0xcb, 0x05, 0xce, 0x72,
		0xcd, 0x72, 0x70, 0x40, 0x75, 0x2d, 0xdf, 0xc1, 0x05, 0x1a, 0x50, 0x5d, 0x8b, 0xbb, 0xf7, 0x22,
		0xcc, 0x68, 0x1a, 0x9d, 0xb3, 0xae, 0x29, 0xec, 0x8c, 0xe5, 0x96, 0xc5, 0x90, 0xb3, 0x34, 0x6d,
		0x85, 0x2a, 0xb0, 0x18, 0x77, 0xa5, 0x2b, 0xf0, 0xc0, 0xc0, 0x59, 0x41, 0xe0, 0xf4, 0xd0, 0x2c,
		0xa3, 0xd0, 0x8b, 0x30, 0x63, 0xef, 0x0f, 0x03, 0xa5, 0xd0, 0x1b, 0xed, 0xfd, 0x28, 0xec, 0x49,
		0x98, 0xb5, 0xf7, 0xec, 0x61, 0xdc, 0x63, 0x41, 0x9c, 0x64, 0xef, 0xd9, 0x51, 0xe0, 0x23, 0xe4,
		0xc0, 0xed, 0x20, 0x4d, 0xf5, 0x50, 0xa7, 0x7c, 0x32, 0xa8, 0x1e, 0x18, 0x90, 0x16, 0x41, 0xd4,
		0x34, 0x05, 0x99, 0xea, 0x8e, 0x81, 0x14, 0xd5, 0x41, 0xa6, 0xea, 0x96, 0x4f, 0x07, 0x95, 0x4b,
		0x9a, 0xd6, 0x24, 0xa3, 0x75, 0x32, 0x28, 0x3d, 0x06, 0xd3, 0xd6, 0xce, 0x0d, 0x8d, 0x86, 0xa4,
		0x62, 0x3b, 0x68, 0x57, 0x7f, 0xbe, 0xfc, 0x30, 0xf1, 0xef, 0x14, 0x1e, 0x20, 0x01, 0xb9, 0x49,
		0xc4, 0xd2, 0xa3, 0x20, 0x6a, 0xee, 0x9e, 0xea, 0xd8, 0x24, 0x27, 0xbb, 0xb6, 0xaa, 0xa1, 0xf2,
		0x23, 0x54, 0x95, 0xca, 0xd7, 0xb9, 0x18, 0x6f, 0x09, 0xf7, 0xb6, 0xbe, 0xeb, 0x71, 0xc6, 0x73,
		0x74, 0x4b, 0x10, 0x19, 0x63, 0x9b, 0x07, 0x11, 0xbb, 0x22, 0xf4, 0xe2, 0x79, 0xa2, 0x56, 0xb2,
		0xf7, 0xec, 0xe0, 0x7b, 0x1f, 0x82, 0x49, 0xac, 0x39, 0x78, 0xe9, 0xa3, 0xb4, 0x21, 0xb3, 0xf7,
		0x02, 0x6f, 0x7c, 0xd7, 0x7a, 0xe3, 0x6a, 0x0d, 0x8a, 0xc1, 0xf8, 0x94, 0xf2, 0x40, 0x23, 0x54,
		0x14, 0x70, 0xb3, 0xd2, 0xd8, 0x58, 0xc6, 0x6d, 0xc6, 0x73, 0x4d, 0x31, 0x85, 0xdb, 0x9d, 0xd5,
		0xd6, 0x56, 0x53, 0x91, 0xb7, 0xd7, 0xb7, 0x5a, 0x6b, 0x4d, 0x31, 0x1d, 0xec, 0xab, 0xbf, 0x97,
		0x82, 0x52, 0xf8, 0x88, 0x24, 0xfd, 0x14, 0x9c, 0xe4, 0xf7, 0x19, 0x2e, 0xf2, 0x94, 0xdb, 0xba,
		0x43, 0xb6, 0x4c, 0x4f, 0xa5, 0xe5, 0xcb, 0x5f, 0xb4, 0x59, 0xa6, 0xd5, 0x46, 0xde, 0x33, 0xba,
		0x83, 0x37, 0x44, 0x4f, 0xf5, 0xa4, 0x55, 0x38, 0x6d, 0x5a, 0x8a, 0xeb, 0xa9, 0x66, 0x47, 0x75,
		0x3a, 0xca, 0xe0, 0x26, 0x49, 0x51, 0x35, 0x0d, 0xb9, 0xae, 0x45, 0x4b, 0x95, 0xcf, 0xf2, 0x3e,
		0xd3, 0x6a, 0x33, 0xe5, 0x41, 0x0e, 0xaf, 0x33, 0xd5, 0x48, 0x80, 0xa5, 0x0f, 0x0b, 0xb0, 0x07,
		0x21, 0xdf, 0x53, 0x6d, 0x05, 0x99, 0x9e, 0xb3, 0x4f, 0x1a, 0xe3, 0x9c, 0x9c, 0xeb, 0xa9, 0x76,
		0x13, 0x3f, 0xbf, 0x37, 0xe7, 0x93, 0x7f, 0x4a, 0x43, 0x31, 0xd8, 0x1c, 0xe3, 0xb3, 0x86, 0x46,
		0xea, 0x88, 0x40, 0x32, 0xcd, 0x43, 0x47, 0xb6, 0xd2, 0x0b, 0x0d, 0x5c, 0x60, 0x6a, 0xe3, 0xb4,
		0x65, 0x95, 0x29, 0x12, 0x17, 0x77, 0x9c, 0x5b, 0x10, 0x6d, 0x11, 0x72, 0x32, 0x7b, 0x92, 0x56,
		0x60, 0xfc, 0x86, 0x4b, 0xb8, 0xc7, 0x09, 0xf7, 0xc3, 0x47, 0x73, 0x3f, 0xdd, 0x26, 0xe4, 0xf9,
		0xa7, 0xdb, 0xca, 0xfa, 0x86, 0xbc, 0x56, 0x5f, 0x95, 0x19, 0x5c, 0x3a, 0x05, 0x19, 0x43, 0xbd,
		0xb3, 0x1f, 0x2e, 0x45, 0x44, 0x94, 0xd4, 0xf1, 0xa7, 0x20, 0x73, 0x1b, 0xa9, 0x37, 0xc3, 0x05,
		0x80, 0x88, 0xde, 0xc5, 0xd0, 0x5f, 0x84, 0x2c, 0xf1, 0x97, 0x04, 0xc0, 0x3c, 0x26, 0x8e, 0x49,
		0x39, 0xc8, 0x34, 0x36, 0x64, 0x1c, 0xfe, 0x22, 0x14, 0xa9, 0x54, 0xd9, 0x6c, 0x35, 0x1b, 0x4d,
		0x31, 0x55, 0xbd, 0x08, 0xe3, 0xd4, 0x09, 0x78, 0x6b, 0xf8, 0x6e, 0x10, 0xc7, 0xd8, 0x23, 0xe3,
		0x10, 0xf8, 0xe8, 0xf6, 0xda, 0x52, 0x53, 0x16, 0x53, 0xc1, 0xe5, 0x75, 0xa1, 0x18, 0xec, 0x8b,
		0xdf, 0x9b, 0x98, 0xfa, 0x8e, 0x00, 0x85, 0x40, 0x9f, 0x8b, 0x1b, 0x14, 0xd5, 0x30, 0xac, 0xdb,
		0x8a, 0x6a, 0xe8, 0xaa, 0xcb, 0x82, 0x02, 0x88, 0xa8, 0x8e, 0x25, 0x49, 0x17, 0xed, 0x3d, 0x31,
		0xfe, 0x65, 0x01, 0xc4, 0x68, 0x8b, 0x19, 0x31, 0x50, 0xf8, 0x89, 0x1a, 0xf8, 0x92, 0x00, 0xa5,
		0x70, 0x5f, 0x19, 0x31, 0xef, 0xec, 0x4f, 0xd4, 0xbc, 0xd7, 0x52, 0x30, 0x19, 0xea, 0x26, 0x93,
		0x5a, 0xf7, 0x29, 0x98, 0xd6, 0x3b, 0xa8, 0x67, 0x5b, 0x1e, 0x32, 0xb5, 0x7d, 0xc5, 0x40, 0xb7,
		0x90, 0x51, 0xae, 0x92, 0x44, 0xb1, 0x78, 0x74, 0xbf, 0xba, 0xd0, 0x1a, 0xe0, 0x56, 0x31, 0xac,
		0x36, 0xd3, 0x5a, 0x6e, 0xae, 0x6d, 0x6e, 0x6c, 0x35, 0xd7, 0x1b, 0xd7, 0x95, 0xed, 0xf5, 0x9f,
		0x59, 0xdf, 0x78, 0x66, 0x5d, 0x16, 0xf5, 0x88, 0xda, 0xbb, 0xb8, 0xd5, 0x37, 0x41, 0x8c, 0x1a,
		0x25, 0x9d, 0x84, 0x51, 0x66, 0x89, 0x63, 0xd2, 0x0c, 0x4c, 0xad, 0x6f, 0x28, 0xed, 0xd6, 0x72,
		0x53, 0x69, 0x5e, 0xbb, 0xd6, 0x6c, 0x6c, 0xb5, 0xe9, 0x0d, 0x84, 0xaf, 0xbd, 0x15, 0xde, 0xd4,
		0x2f, 0xa6, 0x61, 0x66, 0x84, 0x25, 0x52, 0x9d, 0x9d, 0x1d, 0xe8, 0x71, 0xe6, 0x43, 0x49, 0xac,
		0x5f, 0xc0, 0x25, 0x7f, 0x53, 0x75, 0x3c, 0x76, 0xd4, 0x78, 0x14, 0xb0, 0x97, 0x4c, 0x4f, 0xdf,
		0xd5, 0x91, 0xc3, 0x2e, 0x6c, 0xe8, 0x81, 0x62, 0x6a, 0x20, 0xa7, 0x77, 0x36, 0x1f, 0x04, 0xc9,
		0xb6, 0x5c, 0xdd, 0xd3, 0x6f, 0x21, 0x45, 0x37, 0xf9, 0xed, 0x0e, 0x3e, 0x60, 0x64, 0x64, 0x91,
		0x8f, 0xb4, 0x4c, 0xcf, 0xd7, 0x36, 0x51, 0x57, 0x8d, 0x68, 0xe3, 0x04, 0x9e, 0x96, 0x45, 0x3e,
		0xe2, 0x6b, 0x9f, 0x85, 0x62, 0xc7, 0xea, 0xe3, 0xae, 0x8b, 0xea, 0xe1, 0x7a, 0x21, 0xc8, 0x05,
		0x2a, 0xf3, 0x55, 0x58, 0x3f, 0x3d, 0xb8, 0x56, 0x2a, 0xca, 0x05, 0x2a, 0xa3, 0x2a, 0xe7, 0x60,
		0x4a, 0xed, 0x76, 0x1d, 0x4c, 0xce, 0x89, 0xe8, 0x09, 0xa1, 0xe4, 0x8b, 0x89, 0xe2, 0xdc, 0xd3,
		0x90, 0xe3, 0x7e, 0xc0, 0x25, 0x19, 0x7b, 0x42, 0xb1, 0xe9, 0xb1, 0x37, 0x35, 0x9f, 0x97, 0x73,
		0x26, 0x1f, 0x3c, 0x0b, 0x45, 0xdd, 0x55, 0x06, 0xb7, 0xe4, 0xa9, 0x33, 0xa9, 0xf9, 0x9c, 0x5c,
		0xd0, 0x5d, 0xff, 0x86, 0xb1, 0xfa, 0x4a, 0x0a, 0x4a, 0xe1, 0x5b, 0x7e, 0x69, 0x19, 0x72, 0x86,
		0xa5, 0xa9, 0x24, 0xb4, 0xe8, 0x27, 0xa6, 0xf9, 0x98, 0x0f, 0x03, 0x0b, 0xab, 0x4c, 0x5f, 0xf6,
		0x91, 0x73, 0xff, 0x20, 0x40, 0x8e, 0x8b, 0xa5, 0x13, 0x90, 0xb1, 0x55, 0x6f, 0x8f, 0xd0, 0x65,
		0x97, 0x52, 0xa2, 0x20, 0x93, 0x67, 0x2c, 0x77, 0x6d, 0xd5, 0x24, 0x21, 0xc0, 0xe4, 0xf8, 0x19,
		0xaf, 0xab, 0x81, 0xd4, 0x0e, 0x39, 0x7e, 0x58, 0xbd, 0x1e, 0x32, 0x3d, 0x97, 0xaf, 0x2b, 0x93,
		0x37, 0x98, 0x58, 0x7a, 0x1c, 0xa6, 0x3d, 0x47, 0xd5, 0x8d, 0x90, 0x6e, 0x86, 0xe8, 0x8a, 0x7c,
		0xc0, 0x57, 0xae, 0xc1, 0x29, 0xce, 0xdb, 0x41, 0x9e, 0xaa, 0xed, 0xa1, 0xce, 0x00, 0x34, 0x4e,
		0xae, 0x19, 0x4e, 0x32, 0x85, 0x65, 0x36, 0xce, 0xb1, 0xd5, 0x1f, 0x08, 0x30, 0xcd, 0x0f, 0x4c,
		0x1d, 0xdf, 0x59, 0x6b, 0x00, 0xaa, 0x69, 0x5a, 0x5e, 0xd0, 0x5d, 0xc3, 0xa1, 0x3c, 0x84, 0x5b,
		0xa8, 0xfb, 0x20, 0x39, 0x40, 0x30, 0xd7, 0x03, 0x18, 0x8c, 0x1c, 0xea, 0xb6, 0xd3, 0x50, 0x60,
		0x9f, 0x70, 0xc8, 0x77, 0x40, 0x7a, 0xc4, 0x06, 0x2a, 0xc2, 0x27, 0x2b, 0x69, 0x16, 0xb2, 0x3b,
		0xa8, 0xab, 0x9b, 0xec, 0x62, 0x96, 0x3e, 0xf0, 0x8b, 0x90, 0x8c, 0x7f, 0x11, 0xb2, 0xf4, 0x49,
		0x98, 0xd1, 0xac, 0x5e, 0xd4, 0xdc, 0x25, 0x31, 0x72, 0xcc, 0x77, 0x3f, 0x26, 0x3c, 0x07, 0x83,
		0x16, 0xf3, 0x6d, 0x41, 0xf8, 0x52, 0x2a, 0xbd, 0xb2, 0xb9, 0xf4, 0xd5, 0xd4, 0xdc, 0x0a, 0x85,
		0x6e, 0xf2, 0x99, 0xca, 0x68, 0xd7, 0x40, 0x1a, 0xb6, 0x1e, 0xbe, 0xfc, 0x38, 0x7c, 0xa8, 0xab,
		0x7b, 0x7b, 0xfd, 0x9d, 0x05, 0xcd, 0xea, 0x2d, 0x76, 0xad, 0xae, 0x35, 0xf8, 0xf4, 0x89, 0x9f,
		0xc8, 0x03, 0xf9, 0x8f, 0x7d, 0xfe, 0xcc, 0xfb, 0xd2, 0xb9, 0xd8, 0x6f, 0xa5, 0xb5, 0x75, 0x98,
		0x61, 0xca, 0x0a, 0xf9, 0xfe, 0x42, 0x4f, 0x11, 0xd2, 0x91, 0x77, 0x58, 0xe5, 0xaf, 0xbf, 0x4e,
		0xca, 0xb5, 0x3c, 0xcd, 0xa0, 0x78, 0x8c, 0x1e, 0x34, 0x6a, 0x32, 0x3c, 0x10, 0xe2, 0xa3, 0x5b,
		0x13, 0x39, 0x31, 0x8c, 0xdf, 0x63, 0x8c, 0x33, 0x01, 0xc6, 0x36, 0x83, 0xd6, 0x1a, 0x30, 0x79,
		0x1c, 0xae, 0xbf, 0x63, 0x5c, 0x45, 0x14, 0x24, 0x59, 0x81, 0x29, 0x42, 0xa2, 0xf5, 0x5d, 0xcf,
		0xea, 0x91, 0xbc, 0x77, 0x34, 0xcd, 0xdf, 0xbf, 0x4e, 0xf7, 0x4a, 0x09, 0xc3, 0x1a, 0x3e, 0xaa,
		0x56, 0x03, 0xf2, 0xc9, 0xa9, 0x83, 0x34, 0x23, 0x86, 0xe1, 0x55, 0x66, 0x88, 0xaf, 0x5f, 0xfb,
		0x04, 0xcc, 0xe2, 0xff, 0x49, 0x5a, 0x0a, 0x5a, 0x12, 0x7f, 0xe1, 0x55, 0xfe, 0xc1, 0x0b, 0x74,
		0x3b, 0xce, 0xf8, 0x04, 0x01, 0x9b, 0x02, 0xab, 0xd8, 0x45, 0x9e, 0x87, 0x1c, 0x57, 0x51, 0x8d,
		0x51, 0xe6, 0x05, 0x6e, 0x0c, 0xca, 0x9f, 0x7f, 0x33, 0xbc, 0x8a, 0x2b, 0x14, 0x59, 0x37, 0x8c,
		0xda, 0x36, 0x9c, 0x1c, 0x11, 0x15, 0x09, 0x38, 0x5f, 0x64, 0x9c, 0xb3, 0x43, 0x91, 0x81, 0x69,
		0x37, 0x81, 0xcb, 0xfd, 0xb5, 0x4c, 0xc0, 0xf9, 0xbb, 0x8c, 0x53, 0x62, 0x58, 0xbe, 0xa4, 0x98,
		0xf1, 0x69, 0x98, 0xbe, 0x85, 0x9c, 0x1d, 0xcb, 0x65, 0xb7, 0x34, 0x09, 0xe8, 0x5e, 0x62, 0x74,
		0x53, 0x0c, 0x48, 0xae, 0x6d, 0x30, 0xd7, 0x15, 0xc8, 0xed, 0xaa, 0x1a, 0x4a, 0x40, 0xf1, 0x05,
		0x46, 0x31, 0x81, 0xf5, 0x31, 0xb4, 0x0e, 0xc5, 0xae, 0xc5, 0x2a, 0x53, 0x3c, 0xfc, 0x65, 0x06,
		0x2f, 0x70, 0x0c, 0xa3, 0xb0, 0x2d, 0xbb, 0x6f, 0xe0, 0xb2, 0x15, 0x4f, 0xf1, 0x7b, 0x9c, 0x82,
		0x63, 0x18, 0xc5, 0x31, 0xdc, 0xfa, 0xfb, 0x9c, 0xc2, 0x0d, 0xf8, 0xf3, 0x29, 0x28, 0x58, 0xa6,
		0xb1, 0x6f, 0x99, 0x49, 0x8c, 0xf8, 0x22, 0x63, 0x00, 0x06, 0xc1, 0x04, 0x57, 0x21, 0x9f, 0x74,
		0x21, 0xfe, 0xf0, 0x4d, 0xbe, 0x3d, 0xf8, 0x0a, 0xac, 0xc0, 0x14, 0x4f, 0x50, 0xba, 0x65, 0x26,
		0xa0, 0xf8, 0x32, 0xa3, 0x28, 0x05, 0x60, 0x6c, 0x1a, 0x1e, 0x72, 0xbd, 0x2e, 0x4a, 0x42, 0xf2,
		0x0a, 0x9f, 0x06, 0x83, 0x30, 0x57, 0xee, 0x20, 0x53, 0xdb, 0x4b, 0xc6, 0xf0, 0x15, 0xee, 0x4a,
		0x8e, 0xc1, 0x14, 0x0d, 0x98, 0xec, 0xa9, 0x8e, 0xbb, 0xa7, 0x1a, 0x89, 0x96, 0xe3, 0x8f, 0x18,
		0x47, 0xd1, 0x07, 0x31, 0x8f, 0xf4, 0xcd, 0xe3, 0xd0, 0x7c, 0x95, 0x7b, 0x24, 0x00, 0x63, 0x5b,
		0xcf, 0xf5, 0xc8, 0x95, 0xd6, 0x71, 0xd8, 0xfe, 0x98, 0x6f, 0x3d, 0x8a, 0x5d, 0x0b, 0x32, 0x5e,
		0x85, 0xbc, 0xab, 0xdf, 0x49, 0x44, 0xf3, 0x27, 0x7c, 0xa5, 0x09, 0x00, 0x83, 0xaf, 0xc3, 0xa9,
		0x91, 0x65, 0x22, 0x01, 0xd9, 0x9f, 0x32, 0xb2, 0x13, 0x23, 0x4a, 0x05, 0x4b, 0x09, 0xc7, 0xa5,
		0xfc, 0x33, 0x9e, 0x12, 0x50, 0x84, 0x6b, 0x13, 0x9f, 0x15, 0x5c, 0x75, 0xf7, 0x78, 0x5e, 0xfb,
		0x73, 0xee, 0x35, 0x8a, 0x0d, 0x79, 0x6d, 0x0b, 0x4e, 0x30, 0xc6, 0xe3, 0xad, 0xeb, 0xd7, 0x78,
		0x62, 0xa5, 0xe8, 0xed, 0xf0, 0xea, 0x7e, 0x12, 0xe6, 0x7c, 0x77, 0xf2, 0xa6, 0xd4, 0x55, 0x7a,
		0xaa, 0x9d, 0x80, 0xf9, 0xeb, 0x8c, 0x99, 0x67, 0x7c, 0xbf, 0xab, 0x75, 0xd7, 0x54, 0x1b, 0x93,
		0x3f, 0x0b, 0x65, 0x4e, 0xde, 0x37, 0x1d, 0xa4, 0x59, 0x5d, 0x53, 0xbf, 0x83, 0x3a, 0x09, 0xa8,
		0xff, 0x22, 0xb2, 0x54, 0xdb, 0x01, 0x38, 0x66, 0x6e, 0x81, 0xe8, 0xf7, 0x2a, 0x8a, 0xde, 0xb3,
		0x2d, 0xc7, 0x8b, 0x61, 0xfc, 0x06, 0x5f, 0x29, 0x1f, 0xd7, 0x22, 0xb0, 0x5a, 0x13, 0x4a, 0xe4,
		0x31, 0x69, 0x48, 0xfe, 0x25, 0x23, 0x9a, 0x1c, 0xa0, 0x58, 0xe2, 0xd0, 0xac, 0x9e, 0xad, 0x3a,
		0x49, 0xf2, 0xdf, 0x5f, 0xf1, 0xc4, 0xc1, 0x20, 0x2c, 0x71, 0x78, 0xfb, 0x36, 0xc2, 0xd5, 0x3e,
		0x01, 0xc3, 0x37, 0x79, 0xe2, 0xe0, 0x18, 0x46, 0xc1, 0x1b, 0x86, 0x04, 0x14, 0x7f, 0xcd, 0x29,
		0x38, 0x06, 0x53, 0x7c, 0x7c, 0x50, 0x68, 0x1d, 0xd4, 0xd5, 0x5d, 0xcf, 0xa1, 0xad, 0xf0, 0xd1,
		0x54, 0xdf, 0x7a, 0x33, 0xdc, 0x84, 0xc9, 0x01, 0x28, 0xce, 0x44, 0xec, 0x0a, 0x95, 0x9c, 0x94,
		0xe2, 0x0d, 0xfb, 0x36, 0xcf, 0x44, 0x01, 0x18, 0xb6, 0x2d, 0xd0, 0x21, 0x62, 0xb7, 0x6b, 0xf8,
		0x7c, 0x90, 0x80, 0xee, 0x3b, 0x11, 0xe3, 0xda, 0x1c, 0x8b, 0x39, 0x03, 0xfd, 0x4f, 0xdf, 0xbc,
		0x89, 0xf6, 0x13, 0x45, 0xe7, 0xdf, 0x44, 0xfa, 0x9f, 0x6d, 0x8a, 0xa4, 0x39, 0x64, 0x2a, 0xd2,
		0x4f, 0x49, 0x71, 0x3f, 0xd6, 0x29, 0xff, 0xfc, 0x7d, 0x36, 0xdf, 0x70, 0x3b, 0x55, 0x5b, 0xc5,
		0x41, 0x1e, 0x6e, 0x7a, 0xe2, 0xc9, 0x5e, 0xb8, 0xef, 0xc7, 0x79, 0xa8, 0xe7, 0xa9, 0x5d, 0x83,
		0xc9, 0x50, 0xc3, 0x13, 0x4f, 0xf5, 0x69, 0x46, 0x55, 0x0c, 0xf6, 0x3b, 0xb5, 0x8b, 0x90, 0xc1,
		0xcd, 0x4b, 0x3c, 0xfc, 0x17, 0x18, 0x9c, 0xa8, 0xd7, 0x3e, 0x02, 0x39, 0xde, 0xb4, 0xc4, 0x43,
		0x7f, 0x91, 0x41, 0x7d, 0x08, 0x86, 0xf3, 0x86, 0x25, 0x1e, 0xfe, 0x4b, 0x1c, 0xce, 0x21, 0x18,
		0x9e, 0xdc, 0x85, 0xdf, 0xfd, 0x95, 0x0c, 0x2b, 0x3a, 0xdc, 0x77, 0x57, 0x61, 0x82, 0x75, 0x2a,
		0xf1, 0xe8, 0xcf, 0xb0, 0x97, 0x73, 0x44, 0xed, 0x49, 0xc8, 0x26, 0x74, 0xf8, 0xaf, 0x32, 0x28,
		0xd5, 0xaf, 0x35, 0xa0, 0x10, 0xe8, 0x4e, 0xe2, 0xe1, 0xbf, 0xc6, 0xe0, 0x41, 0x14, 0x36, 0x9d,
		0x75, 0x27, 0xf1, 0x04, 0xbf, 0xce, 0x4d, 0x67, 0x08, 0xec, 0x36, 0xde, 0x98, 0xc4, 0xa3, 0x3f,
		0xcb, 0xbd, 0xce, 0x21, 0xb5, 0xa7, 0x20, 0xef, 0x17, 0x9b, 0x78, 0xfc, 0x6f, 0x30, 0xfc, 0x00,
		0x83, 0x3d, 0x10, 0x28, 0x76, 0xf1, 0x14, 0xbf, 0xc9, 0x3d, 0x10, 0x40, 0xe1, 0x6d, 0x14, 0x6d,
		0x60, 0xe2, 0x99, 0x7e, 0x8b, 0x6f, 0xa3, 0x48, 0xff, 0x82, 0x57, 0x93, 0xe4, 0xfc, 0x78, 0x8a,
		0xdf, 0xe6, 0xab, 0x49, 0xf4, 0xb1, 0x19, 0xd1, 0x8e, 0x20, 0x9e, 0xe3, 0x77, 0xb8, 0x19, 0x91,
		0x86, 0xa0, 0xb6, 0x09, 0xd2, 0x70, 0x37, 0x10, 0xcf, 0xf7, 0x39, 0xc6, 0x37, 0x3d, 0xd4, 0x0c,
		0xd4, 0x9e, 0x81, 0x13, 0xa3, 0x3b, 0x81, 0x78, 0xd6, 0xcf, 0xdf, 0x8f, 0x9c, 0xdd, 0x82, 0x8d,
		0x40, 0x6d, 0x6b, 0x50, 0x52, 0x82, 0x5d, 0x40, 0x3c, 0xed, 0x8b, 0xf7, 0xc3, 0x89, 0x3b, 0xd8,
		0x04, 0xd4, 0xea, 0x00, 0x83, 0x02, 0x1c, 0xcf, 0xf5, 0x12, 0xe3, 0x0a, 0x80, 0xf0, 0xd6, 0x60,
		0xf5, 0x37, 0x1e, 0xff, 0x05, 0xbe, 0x35, 0x18, 0x02, 0x6f, 0x0d, 0x5e, 0x7a, 0xe3, 0xd1, 0x2f,
		0xf3, 0xad, 0xc1, 0x21, 0x38, 0xb2, 0x03, 0xd5, 0x2d, 0x9e, 0xe1, 0x8b, 0x3c, 0xb2, 0x03, 0xa8,
		0xda, 0x3a, 0x4c, 0x0f, 0x15, 0xc4, 0x78, 0xaa, 0x2f, 0x31, 0x2a, 0x31, 0x5a, 0x0f, 0x83, 0xc5,
		0x8b, 0x15, 0xc3, 0x78, 0xb6, 0x3f, 0x88, 0x14, 0x2f, 0x56, 0x0b, 0x6b, 0x57, 0x21, 0x67, 0xf6,
		0x0d, 0x03, 0x6f, 0x1e, 0xe9, 0xe8, 0x1f, 0xd8, 0x95, 0xff, 0xed, 0x1d, 0xe6, 0x1d, 0x0e, 0xa8,
		0x5d, 0x84, 0x2c, 0xea, 0xed, 0xa0, 0x4e, 0x1c, 0xf2, 0xdf, 0xdf, 0xe1, 0x09, 0x13, 0x6b, 0xd7,
		0x9e, 0x02, 0xa0, 0x57, 0x23, 0xe4, 0xb3, 0x5f, 0x0c, 0xf6, 0x3f, 0xde, 0x61, 0x3f, 0x7d, 0x19,
		0x40, 0x06, 0x04, 0xf4, 0x87, 0x34, 0x47, 0x13, 0xbc, 0x19, 0x26, 0x20, 0x2b, 0x72, 0x05, 0x26,
		0x6e, 0xb8, 0x96, 0xe9, 0xa9, 0xdd, 0x38, 0xf4, 0x7f, 0x32, 0x34, 0xd7, 0xc7, 0x0e, 0xeb, 0x59,
		0x0e, 0xf2, 0xd4, 0xae, 0x1b, 0x87, 0xfd, 0x2f, 0x86, 0xf5, 0x01, 0x18, 0xac, 0xa9, 0xae, 0x97,
		0x64, 0xde, 0x3f, 0xe2, 0x60, 0x0e, 0xc0, 0x46, 0xe3, 0xff, 0x6f, 0xa2, 0xfd, 0x38, 0xec, 0x5b,
		0xdc, 0x68, 0xa6, 0x5f, 0xfb, 0x08, 0xe4, 0xf1, 0xbf, 0xf4, 0xf7, 0x6c, 0x31, 0xe0, 0xff, 0x66,
		0xe0, 0x01, 0x02, 0xbf, 0xd9, 0xf5, 0x3a, 0x9e, 0x1e, 0xef, 0xec, 0xff, 0x61, 0x2b, 0xcd, 0xf5,
		0x6b, 0x75, 0x28, 0xb8, 0x5e, 0xa7, 0xd3, 0x67, 0xfd, 0x69, 0x0c, 0xfc, 0x7f, 0xdf, 0xf1, 0xaf,
		0x2c, 0x7c, 0x0c, 0x5e, 0xed, 0xdb, 0x37, 0x3d, 0xdb, 0x22, 0x9f, 0x39, 0xe2, 0x18, 0xee, 0x33,
		0x86, 0x00, 0x64, 0xa9, 0x39, 0xfa, 0xfa, 0x16, 0x56, 0xac, 0x15, 0x8b, 0x5e, 0xdc, 0x3e, 0x57,
		0x8d, 0xbf, 0x81, 0x85, 0xcf, 0x66, 0xa1, 0xaa, 0x59, 0xbd, 0x1d, 0xcb, 0x5d, 0x0c, 0x24, 0xf3,
		0x45, 0xdf, 0x4d, 0xfc, 0x76, 0xd6, 0x17, 0xcc, 0x1d, 0xef, 0x5e, 0xb7, 0xfa, 0xb7, 0x69, 0xc8,
		0x35, 0x54, 0xd7, 0x53, 0x6f, 0xab, 0xfb, 0x92, 0x0d, 0x33, 0xf8, 0xff, 0x35, 0xd5, 0x26, 0xb7,
		0x84, 0x6c, 0x3b, 0xb3, 0xab, 0xf3, 0x0f, 0x2e, 0x0c, 0xde, 0xca, 0x11, 0x0b, 0x23, 0xd4, 0xc9,
		0x4f, 0x0e, 0x96, 0xc4, 0x57, 0xff, 0xf9, 0xf4, 0xd8, 0x2f, 0xff, 0xcb, 0xe9, 0xdc, 0xda, 0xfe,
		0x33, 0xba, 0xe1, 0x5a, 0xa6, 0x3c, 0x8a, 0x5a, 0xfa, 0xb4, 0x00, 0x0f, 0x8e, 0x90, 0xaf, 0xb3,
		0xdd, 0xce, 0x3e, 0x40, 0x5d, 0x48, 0xf8, 0x6a, 0x0e, 0xa3, 0x26, 0x14, 0x43, 0xaf, 0x3f, 0xea,
		0x35, 0x73, 0xd7, 0xa1, 0x7c, 0xd8, 0x4c, 0x24, 0x11, 0xd2, 0x37, 0xd1, 0x3e, 0xfb, 0xdd, 0x22,
		0xfe, 0x57, 0x3a, 0x37, 0xf8, 0x75, 0xa7, 0x30, 0x5f, 0x38, 0x3f, 0x1d, 0xb0, 0x8e, 0xbd, 0x8c,
		0x8e, 0xd7, 0x52, 0x97, 0x85, 0x39, 0x15, 0xce, 0xc4, 0x59, 0xfa, 0xff, 0x7c, 0x45, 0xb5, 0x02,
		0xe3, 0x54, 0x28, 0xcd, 0x42, 0xb6, 0x65, 0x7a, 0x97, 0x2e, 0x10, 0xaa, 0xb4, 0x4c, 0x1f, 0x96,
		0x56, 0x5f, 0xbd, 0x57, 0x19, 0xfb, 0xfe, 0xbd, 0xca, 0xd8, 0x3f, 0xde, 0xab, 0x8c, 0xbd, 0x76,
		0xaf, 0x22, 0xbc, 0x71, 0xaf, 0x22, 0xbc, 0x75, 0xaf, 0x22, 0xbc, 0x7d, 0xaf, 0x22, 0xdc, 0x3d,
		0xa8, 0x08, 0x5f, 0x39, 0xa8, 0x08, 0x5f, 0x3b, 0xa8, 0x08, 0xdf, 0x3a, 0xa8, 0x08, 0xdf, 0x3d,
		0xa8, 0x08, 0xaf, 0x1e, 0x54, 0xc6, 0xbe, 0x7f, 0x50, 0x11, 0x5e, 0x3b, 0xa8, 0x08, 0x6f, 0x1c,
		0x54, 0xc6, 0xde, 0x3a, 0xa8, 0x08, 0x6f, 0x1f, 0x54, 0xc6, 0xee, 0xfe, 0xb0, 0x32, 0xf6, 0x7f,
		0x01, 0x00, 0x00, 0xff, 0xff, 0x54, 0x4b, 0xb1, 0x7c, 0x2e, 0x35, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Castaway) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Castaway)
	if !ok {
		that2, ok := that.(Castaway)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Castaway")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Castaway but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Castaway but is not nil && this == nil")
	}
	if len(this.CastMapValueMessage) != len(that1.CastMapValueMessage) {
		return fmt.Errorf("CastMapValueMessage this(%v) Not Equal that(%v)", len(this.CastMapValueMessage), len(that1.CastMapValueMessage))
	}
	for i := range this.CastMapValueMessage {
		a := (Wilson)(this.CastMapValueMessage[i])
		b := (Wilson)(that1.CastMapValueMessage[i])
		if !(&a).Equal(&b) {
			return fmt.Errorf("CastMapValueMessage this[%v](%v) Not Equal that[%v](%v)", i, this.CastMapValueMessage[i], i, that1.CastMapValueMessage[i])
		}
	}
	if len(this.CastMapValueMessageNullable) != len(that1.CastMapValueMessageNullable) {
		return fmt.Errorf("CastMapValueMessageNullable this(%v) Not Equal that(%v)", len(this.CastMapValueMessageNullable), len(that1.CastMapValueMessageNullable))
	}
	for i := range this.CastMapValueMessageNullable {
		a := (*Wilson)(this.CastMapValueMessageNullable[i])
		b := (*Wilson)(that1.CastMapValueMessageNullable[i])
		if !a.Equal(b) {
			return fmt.Errorf("CastMapValueMessageNullable this[%v](%v) Not Equal that[%v](%v)", i, this.CastMapValueMessageNullable[i], i, that1.CastMapValueMessageNullable[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Castaway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Castaway)
	if !ok {
		that2, ok := that.(Castaway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CastMapValueMessage) != len(that1.CastMapValueMessage) {
		return false
	}
	for i := range this.CastMapValueMessage {
		a := (Wilson)(this.CastMapValueMessage[i])
		b := (Wilson)(that1.CastMapValueMessage[i])
		if !(&a).Equal(&b) {
			return false
		}
	}
	if len(this.CastMapValueMessageNullable) != len(that1.CastMapValueMessageNullable) {
		return false
	}
	for i := range this.CastMapValueMessageNullable {
		a := (*Wilson)(this.CastMapValueMessageNullable[i])
		b := (*Wilson)(that1.CastMapValueMessageNullable[i])
		if !a.Equal(b) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Wilson) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Wilson)
	if !ok {
		that2, ok := that.(Wilson)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Wilson")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Wilson but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Wilson but is not nil && this == nil")
	}
	if this.Int64 != nil && that1.Int64 != nil {
		if *this.Int64 != *that1.Int64 {
			return fmt.Errorf("Int64 this(%v) Not Equal that(%v)", *this.Int64, *that1.Int64)
		}
	} else if this.Int64 != nil {
		return fmt.Errorf("this.Int64 == nil && that.Int64 != nil")
	} else if that1.Int64 != nil {
		return fmt.Errorf("Int64 this(%v) Not Equal that(%v)", this.Int64, that1.Int64)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Wilson) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Wilson)
	if !ok {
		that2, ok := that.(Wilson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Int64 != nil && that1.Int64 != nil {
		if *this.Int64 != *that1.Int64 {
			return false
		}
	} else if this.Int64 != nil {
		return false
	} else if that1.Int64 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type CastawayFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetCastMapValueMessage() map[int32]MyWilson
	GetCastMapValueMessageNullable() map[int32]*MyWilson
}

func (this *Castaway) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Castaway) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCastawayFromFace(this)
}

func (this *Castaway) GetCastMapValueMessage() map[int32]MyWilson {
	return this.CastMapValueMessage
}

func (this *Castaway) GetCastMapValueMessageNullable() map[int32]*MyWilson {
	return this.CastMapValueMessageNullable
}

func NewCastawayFromFace(that CastawayFace) *Castaway {
	this := &Castaway{}
	this.CastMapValueMessage = that.GetCastMapValueMessage()
	this.CastMapValueMessageNullable = that.GetCastMapValueMessageNullable()
	return this
}

type WilsonFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetInt64() *int64
}

func (this *Wilson) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Wilson) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewWilsonFromFace(this)
}

func (this *Wilson) GetInt64() *int64 {
	return this.Int64
}

func NewWilsonFromFace(that WilsonFace) *Wilson {
	this := &Wilson{}
	this.Int64 = that.GetInt64()
	return this
}

func (this *Castaway) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&castvalue.Castaway{")
	keysForCastMapValueMessage := make([]int32, 0, len(this.CastMapValueMessage))
	for k := range this.CastMapValueMessage {
		keysForCastMapValueMessage = append(keysForCastMapValueMessage, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForCastMapValueMessage)
	mapStringForCastMapValueMessage := "map[int32]MyWilson{"
	for _, k := range keysForCastMapValueMessage {
		mapStringForCastMapValueMessage += fmt.Sprintf("%#v: %#v,", k, this.CastMapValueMessage[k])
	}
	mapStringForCastMapValueMessage += "}"
	if this.CastMapValueMessage != nil {
		s = append(s, "CastMapValueMessage: "+mapStringForCastMapValueMessage+",\n")
	}
	keysForCastMapValueMessageNullable := make([]int32, 0, len(this.CastMapValueMessageNullable))
	for k := range this.CastMapValueMessageNullable {
		keysForCastMapValueMessageNullable = append(keysForCastMapValueMessageNullable, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForCastMapValueMessageNullable)
	mapStringForCastMapValueMessageNullable := "map[int32]*MyWilson{"
	for _, k := range keysForCastMapValueMessageNullable {
		mapStringForCastMapValueMessageNullable += fmt.Sprintf("%#v: %#v,", k, this.CastMapValueMessageNullable[k])
	}
	mapStringForCastMapValueMessageNullable += "}"
	if this.CastMapValueMessageNullable != nil {
		s = append(s, "CastMapValueMessageNullable: "+mapStringForCastMapValueMessageNullable+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Wilson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&castvalue.Wilson{")
	if this.Int64 != nil {
		s = append(s, "Int64: "+valueToGoStringCastvalue(this.Int64, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCastvalue(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func NewPopulatedCastaway(r randyCastvalue, easy bool) *Castaway {
	this := &Castaway{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.CastMapValueMessage = make(map[int32]MyWilson)
		for i := 0; i < v1; i++ {
			this.CastMapValueMessage[int32(r.Int31())] = (MyWilson)(*NewPopulatedWilson(r, easy))
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.CastMapValueMessageNullable = make(map[int32]*MyWilson)
		for i := 0; i < v2; i++ {
			this.CastMapValueMessageNullable[int32(r.Int31())] = (*MyWilson)(NewPopulatedWilson(r, easy))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCastvalue(r, 3)
	}
	return this
}

func NewPopulatedWilson(r randyCastvalue, easy bool) *Wilson {
	this := &Wilson{}
	if r.Intn(10) != 0 {
		v3 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.Int64 = &v3
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCastvalue(r, 2)
	}
	return this
}

type randyCastvalue interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCastvalue(r randyCastvalue) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCastvalue(r randyCastvalue) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneCastvalue(r)
	}
	return string(tmps)
}
func randUnrecognizedCastvalue(r randyCastvalue, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCastvalue(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCastvalue(dAtA []byte, r randyCastvalue, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCastvalue(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateCastvalue(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateCastvalue(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCastvalue(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCastvalue(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCastvalue(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCastvalue(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Castaway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CastMapValueMessage) > 0 {
		for k, v := range m.CastMapValueMessage {
			_ = k
			_ = v
			l = ((*Wilson)(&v)).Size()
			mapEntrySize := 1 + sovCastvalue(uint64(k)) + 1 + l + sovCastvalue(uint64(l))
			n += mapEntrySize + 1 + sovCastvalue(uint64(mapEntrySize))
		}
	}
	if len(m.CastMapValueMessageNullable) > 0 {
		for k, v := range m.CastMapValueMessageNullable {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = ((*Wilson)(v)).Size()
				l += 1 + sovCastvalue(uint64(l))
			}
			mapEntrySize := 1 + sovCastvalue(uint64(k)) + l
			n += mapEntrySize + 1 + sovCastvalue(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Wilson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int64 != nil {
		n += 1 + sovCastvalue(uint64(*m.Int64))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCastvalue(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCastvalue(x uint64) (n int) {
	return sovCastvalue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Castaway) String() string {
	if this == nil {
		return "nil"
	}
	keysForCastMapValueMessage := make([]int32, 0, len(this.CastMapValueMessage))
	for k := range this.CastMapValueMessage {
		keysForCastMapValueMessage = append(keysForCastMapValueMessage, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForCastMapValueMessage)
	mapStringForCastMapValueMessage := "map[int32]MyWilson{"
	for _, k := range keysForCastMapValueMessage {
		mapStringForCastMapValueMessage += fmt.Sprintf("%v: %v,", k, this.CastMapValueMessage[k])
	}
	mapStringForCastMapValueMessage += "}"
	keysForCastMapValueMessageNullable := make([]int32, 0, len(this.CastMapValueMessageNullable))
	for k := range this.CastMapValueMessageNullable {
		keysForCastMapValueMessageNullable = append(keysForCastMapValueMessageNullable, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForCastMapValueMessageNullable)
	mapStringForCastMapValueMessageNullable := "map[int32]*MyWilson{"
	for _, k := range keysForCastMapValueMessageNullable {
		mapStringForCastMapValueMessageNullable += fmt.Sprintf("%v: %v,", k, this.CastMapValueMessageNullable[k])
	}
	mapStringForCastMapValueMessageNullable += "}"
	s := strings.Join([]string{`&Castaway{`,
		`CastMapValueMessage:` + mapStringForCastMapValueMessage + `,`,
		`CastMapValueMessageNullable:` + mapStringForCastMapValueMessageNullable + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Wilson) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Wilson{`,
		`Int64:` + valueToStringCastvalue(this.Int64) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCastvalue(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Castaway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCastvalue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Castaway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Castaway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastMapValueMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCastvalue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCastvalue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CastMapValueMessage == nil {
				m.CastMapValueMessage = make(map[int32]MyWilson)
			}
			var mapkey int32
			mapvalue := &Wilson{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCastvalue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCastvalue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCastvalue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCastvalue
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthCastvalue
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Wilson{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCastvalue(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCastvalue
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CastMapValueMessage[mapkey] = ((MyWilson)(*mapvalue))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastMapValueMessageNullable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCastvalue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCastvalue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CastMapValueMessageNullable == nil {
				m.CastMapValueMessageNullable = make(map[int32]*MyWilson)
			}
			var mapkey int32
			var mapvalue *Wilson
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCastvalue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCastvalue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCastvalue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCastvalue
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthCastvalue
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Wilson{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCastvalue(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCastvalue
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CastMapValueMessageNullable[mapkey] = ((*MyWilson)(mapvalue))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCastvalue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCastvalue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wilson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCastvalue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wilson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wilson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCastvalue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Int64 = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCastvalue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCastvalue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCastvalue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCastvalue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCastvalue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCastvalue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCastvalue
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCastvalue
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCastvalue(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCastvalue = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCastvalue   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("combos/unmarshaler/castvalue.proto", fileDescriptor_castvalue_92129bf361b9c2b5)
}

var fileDescriptor_castvalue_92129bf361b9c2b5 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x8f, 0xbd, 0x4f, 0xf2, 0x50,
	0x14, 0xc6, 0xef, 0xa1, 0xe1, 0x0d, 0xef, 0xc5, 0x01, 0xab, 0x43, 0x83, 0xc9, 0xa1, 0x61, 0x91,
	0x41, 0xdb, 0x84, 0x10, 0x63, 0x1c, 0x31, 0x0e, 0x26, 0xe2, 0xc0, 0xa0, 0x71, 0xbc, 0x25, 0xb5,
	0x10, 0x4b, 0x2f, 0xe9, 0x87, 0xa6, 0x1b, 0x83, 0x93, 0x7f, 0x89, 0xa3, 0xa3, 0xa3, 0x6e, 0x8c,
	0x8c, 0x4e, 0x4a, 0xaf, 0x0b, 0x23, 0x23, 0xa3, 0xe1, 0x56, 0xfc, 0x48, 0xf0, 0x23, 0x71, 0x3b,
	0xe7, 0xb9, 0xe7, 0x79, 0x7e, 0xcf, 0xa5, 0xe5, 0x16, 0xef, 0x5a, 0x3c, 0x30, 0x23, 0xaf, 0xcb,
	0xfc, 0xa0, 0xcd, 0x5c, 0xdb, 0x37, 0x5b, 0x2c, 0x08, 0xcf, 0x99, 0x1b, 0xd9, 0x46, 0xcf, 0xe7,
	0x21, 0x57, 0xff, 0xbf, 0x09, 0xc5, 0x4d, 0xa7, 0x13, 0xb6, 0x23, 0xcb, 0x68, 0xf1, 0xae, 0xe9,
	0x70, 0x87, 0x9b, 0xf2, 0xc2, 0x8a, 0x4e, 0xe5, 0x26, 0x17, 0x39, 0xa5, 0xce, 0xf2, 0xbd, 0x42,
	0x73, 0xbb, 0x2c, 0x08, 0xd9, 0x05, 0x8b, 0xd5, 0x1e, 0x5d, 0x99, 0xcd, 0x0d, 0xd6, 0x3b, 0x9a,
	0x65, 0x35, 0xec, 0x20, 0x60, 0x8e, 0xad, 0x81, 0xae, 0x54, 0xf2, 0xd5, 0x0d, 0xe3, 0x9d, 0x3a,
	0x77, 0x18, 0x0b, 0xce, 0xf7, 0xbc, 0xd0, 0x8f, 0xeb, 0x85, 0xc1, 0x63, 0x89, 0x5c, 0x3d, 0x95,
	0x72, 0x8d, 0xf8, 0xb8, 0xe3, 0x06, 0xdc, 0x6b, 0x2e, 0x8a, 0x56, 0x2f, 0x81, 0xae, 0x2d, 0xd0,
	0x0f, 0x23, 0xd7, 0x65, 0x96, 0x6b, 0x6b, 0x19, 0x89, 0xae, 0xfd, 0x12, 0x3d, 0xb7, 0xa5, 0x15,
	0x96, 0x3e, 0xe1, 0xbf, 0xc3, 0x14, 0x4f, 0xa8, 0xf6, 0xd5, 0x4f, 0xd4, 0x02, 0x55, 0xce, 0xec,
	0x58, 0x03, 0x1d, 0x2a, 0xd9, 0xe6, 0x6c, 0x54, 0xd7, 0x69, 0x56, 0x76, 0xd1, 0x32, 0x3a, 0x54,
	0xf2, 0xd5, 0xe5, 0x0f, 0xed, 0x5e, 0x61, 0xe9, 0xfb, 0x4e, 0x66, 0x1b, 0x8a, 0x8c, 0xea, 0x3f,
	0x35, 0xfd, 0x23, 0xa2, 0x8c, 0xf4, 0x5f, 0x2a, 0xaa, 0xab, 0x34, 0xbb, 0xef, 0x85, 0x5b, 0x35,
	0x19, 0xa5, 0x34, 0xd3, 0xa5, 0x7e, 0x30, 0x48, 0x90, 0x0c, 0x13, 0x24, 0x0f, 0x09, 0x92, 0x51,
	0x82, 0x30, 0x4e, 0x10, 0x26, 0x09, 0xc2, 0x34, 0x41, 0xe8, 0x0b, 0x84, 0x6b, 0x81, 0x70, 0x23,
	0x10, 0x6e, 0x05, 0xc2, 0x9d, 0x40, 0x18, 0x08, 0x24, 0x43, 0x81, 0x30, 0x12, 0x08, 0x63, 0x81,
	0x64, 0x22, 0x10, 0xa6, 0x02, 0x49, 0xff, 0x19, 0xc9, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x73,
	0xe3, 0x1c, 0x3e, 0x90, 0x02, 0x00, 0x00,
}
