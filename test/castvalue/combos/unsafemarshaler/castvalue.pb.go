// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: combos/unsafemarshaler/castvalue.proto

/*
Package castvalue is a generated protocol buffer package.

It is generated from these files:
	combos/unsafemarshaler/castvalue.proto

It has these top-level messages:
	Castaway
	Wilson
*/
package castvalue

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Castaway struct {
	CastMapValueMessage         map[int32]MyWilson  `protobuf:"bytes,1,rep,name=CastMapValueMessage,castvalue=MyWilson,castvaluetype=castvalue.Wilson" json:"CastMapValueMessage" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CastMapValueMessageNullable map[int32]*MyWilson `protobuf:"bytes,2,rep,name=CastMapValueMessageNullable,castvalue=MyWilson,castvaluetype=castvalue.Wilson" json:"CastMapValueMessageNullable,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized            []byte              `json:"-"`
}

func (m *Castaway) Reset()                    { *m = Castaway{} }
func (*Castaway) ProtoMessage()               {}
func (*Castaway) Descriptor() ([]byte, []int) { return fileDescriptorCastvalue, []int{0} }

type Wilson struct {
	Int64            *int64 `protobuf:"varint,1,opt,name=Int64" json:"Int64,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Wilson) Reset()                    { *m = Wilson{} }
func (*Wilson) ProtoMessage()               {}
func (*Wilson) Descriptor() ([]byte, []int) { return fileDescriptorCastvalue, []int{1} }

func init() {
	proto.RegisterType((*Castaway)(nil), "castvalue.Castaway")
	proto.RegisterType((*Wilson)(nil), "castvalue.Wilson")
}
func (this *Castaway) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return CastvalueDescription()
}
func (this *Wilson) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return CastvalueDescription()
}
func CastvalueDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3813 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x5d, 0x70, 0xe3, 0xd6,
		0x75, 0x16, 0xf8, 0x23, 0x91, 0x87, 0x14, 0x05, 0x41, 0xb2, 0x96, 0x2b, 0xc7, 0x5c, 0xad, 0x62,
		0x7b, 0x65, 0x3b, 0x91, 0x32, 0xeb, 0xdd, 0xf5, 0x1a, 0xdb, 0xc4, 0x43, 0x51, 0x5c, 0x85, 0x5b,
		0x49, 0x64, 0x40, 0x29, 0xde, 0x4d, 0x1f, 0x30, 0x10, 0x78, 0x49, 0x61, 0x17, 0x04, 0x10, 0x00,
		0xdc, 0xb5, 0xfc, 0xb4, 0x1d, 0xa7, 0xed, 0xa4, 0x9d, 0xf4, 0x37, 0x33, 0x4d, 0x5c, 0xc7, 0x6d,
		0x33, 0xd3, 0x3a, 0x4d, 0xff, 0x92, 0xfe, 0xa4, 0x99, 0x3e, 0xa5, 0x0f, 0x69, 0xfd, 0xd4, 0x49,
		0x1e, 0x3a, 0xd3, 0x87, 0x4e, 0xeb, 0x55, 0x3d, 0x53, 0xb7, 0x75, 0x5b, 0xb7, 0xf1, 0x4c, 0x33,
		0xe3, 0x97, 0xce, 0xfd, 0x03, 0x01, 0x92, 0x12, 0xa8, 0x74, 0x1c, 0x3f, 0x89, 0x38, 0xf7, 0x7c,
		0x1f, 0xce, 0x3d, 0xf7, 0xdc, 0x73, 0xce, 0xbd, 0x10, 0x7c, 0xe1, 0x0a, 0x2c, 0x75, 0x6c, 0xbb,
		0x63, 0xa2, 0x35, 0xc7, 0xb5, 0x7d, 0x7b, 0xbf, 0xd7, 0x5e, 0x6b, 0x21, 0x4f, 0x77, 0x0d, 0xc7,
		0xb7, 0xdd, 0x55, 0x22, 0x93, 0x66, 0xa8, 0xc6, 0x2a, 0xd7, 0x58, 0xde, 0x86, 0xd9, 0xeb, 0x86,
		0x89, 0x36, 0x02, 0xc5, 0x26, 0xf2, 0xa5, 0xab, 0x90, 0x6a, 0x1b, 0x26, 0x2a, 0x0a, 0x4b, 0xc9,
		0x95, 0xdc, 0xc5, 0x47, 0x57, 0x07, 0x40, 0xab, 0x51, 0x44, 0x03, 0x8b, 0x15, 0x82, 0x58, 0x7e,
		0x33, 0x05, 0x73, 0x23, 0x46, 0x25, 0x09, 0x52, 0x96, 0xd6, 0xc5, 0x8c, 0xc2, 0x4a, 0x56, 0x21,
		0xbf, 0xa5, 0x22, 0x4c, 0x39, 0x9a, 0x7e, 0x47, 0xeb, 0xa0, 0x62, 0x82, 0x88, 0xf9, 0xa3, 0x54,
		0x02, 0x68, 0x21, 0x07, 0x59, 0x2d, 0x64, 0xe9, 0x87, 0xc5, 0xe4, 0x52, 0x72, 0x25, 0xab, 0x84,
		0x24, 0xd2, 0x53, 0x30, 0xeb, 0xf4, 0xf6, 0x4d, 0x43, 0x57, 0x43, 0x6a, 0xb0, 0x94, 0x5c, 0x49,
		0x2b, 0x22, 0x1d, 0xd8, 0xe8, 0x2b, 0x5f, 0x80, 0x99, 0x7b, 0x48, 0xbb, 0x13, 0x56, 0xcd, 0x11,
		0xd5, 0x02, 0x16, 0x87, 0x14, 0x2b, 0x90, 0xef, 0x22, 0xcf, 0xd3, 0x3a, 0x48, 0xf5, 0x0f, 0x1d,
		0x54, 0x4c, 0x91, 0xd9, 0x2f, 0x0d, 0xcd, 0x7e, 0x70, 0xe6, 0x39, 0x86, 0xda, 0x3d, 0x74, 0x90,
		0x54, 0x86, 0x2c, 0xb2, 0x7a, 0x5d, 0xca, 0x90, 0x3e, 0xc6, 0x7f, 0x55, 0xab, 0xd7, 0x1d, 0x64,
		0xc9, 0x60, 0x18, 0xa3, 0x98, 0xf2, 0x90, 0x7b, 0xd7, 0xd0, 0x51, 0x71, 0x92, 0x10, 0x5c, 0x18,
		0x22, 0x68, 0xd2, 0xf1, 0x41, 0x0e, 0x8e, 0x93, 0x2a, 0x90, 0x45, 0x2f, 0xf8, 0xc8, 0xf2, 0x0c,
		0xdb, 0x2a, 0x4e, 0x11, 0x92, 0xc7, 0x46, 0xac, 0x22, 0x32, 0x5b, 0x83, 0x14, 0x7d, 0x9c, 0x74,
		0x05, 0xa6, 0x6c, 0xc7, 0x37, 0x6c, 0xcb, 0x2b, 0x66, 0x96, 0x84, 0x95, 0xdc, 0xc5, 0x0f, 0x8d,
		0x0c, 0x84, 0x3a, 0xd5, 0x51, 0xb8, 0xb2, 0x54, 0x03, 0xd1, 0xb3, 0x7b, 0xae, 0x8e, 0x54, 0xdd,
		0x6e, 0x21, 0xd5, 0xb0, 0xda, 0x76, 0x31, 0x4b, 0x08, 0xce, 0x0d, 0x4f, 0x84, 0x28, 0x56, 0xec,
		0x16, 0xaa, 0x59, 0x6d, 0x5b, 0x29, 0x78, 0x91, 0x67, 0x69, 0x01, 0x26, 0xbd, 0x43, 0xcb, 0xd7,
		0x5e, 0x28, 0xe6, 0x49, 0x84, 0xb0, 0xa7, 0xe5, 0xff, 0x4d, 0xc3, 0xcc, 0x38, 0x21, 0x76, 0x0d,
		0xd2, 0x6d, 0x3c, 0xcb, 0x62, 0xe2, 0x34, 0x3e, 0xa0, 0x98, 0xa8, 0x13, 0x27, 0x7f, 0x44, 0x27,
		0x96, 0x21, 0x67, 0x21, 0xcf, 0x47, 0x2d, 0x1a, 0x11, 0xc9, 0x31, 0x63, 0x0a, 0x28, 0x68, 0x38,
		0xa4, 0x52, 0x3f, 0x52, 0x48, 0xdd, 0x84, 0x99, 0xc0, 0x24, 0xd5, 0xd5, 0xac, 0x0e, 0x8f, 0xcd,
		0xb5, 0x38, 0x4b, 0x56, 0xab, 0x1c, 0xa7, 0x60, 0x98, 0x52, 0x40, 0x91, 0x67, 0x69, 0x03, 0xc0,
		0xb6, 0x90, 0xdd, 0x56, 0x5b, 0x48, 0x37, 0x8b, 0x99, 0x63, 0xbc, 0x54, 0xc7, 0x2a, 0x43, 0x5e,
		0xb2, 0xa9, 0x54, 0x37, 0xa5, 0x67, 0xfb, 0xa1, 0x36, 0x75, 0x4c, 0xa4, 0x6c, 0xd3, 0x4d, 0x36,
		0x14, 0x6d, 0x7b, 0x50, 0x70, 0x11, 0x8e, 0x7b, 0xd4, 0x62, 0x33, 0xcb, 0x12, 0x23, 0x56, 0x63,
		0x67, 0xa6, 0x30, 0x18, 0x9d, 0xd8, 0xb4, 0x1b, 0x7e, 0x94, 0x3e, 0x0c, 0x81, 0x40, 0x25, 0x61,
		0x05, 0x24, 0x0b, 0xe5, 0xb9, 0x70, 0x47, 0xeb, 0xa2, 0xc5, 0xab, 0x50, 0x88, 0xba, 0x47, 0x9a,
		0x87, 0xb4, 0xe7, 0x6b, 0xae, 0x4f, 0xa2, 0x30, 0xad, 0xd0, 0x07, 0x49, 0x84, 0x24, 0xb2, 0x5a,
		0x24, 0xcb, 0xa5, 0x15, 0xfc, 0x73, 0xf1, 0x19, 0x98, 0x8e, 0xbc, 0x7e, 0x5c, 0xe0, 0xf2, 0x97,
		0x26, 0x61, 0x7e, 0x54, 0xcc, 0x8d, 0x0c, 0xff, 0x05, 0x98, 0xb4, 0x7a, 0xdd, 0x7d, 0xe4, 0x16,
		0x93, 0x84, 0x81, 0x3d, 0x49, 0x65, 0x48, 0x9b, 0xda, 0x3e, 0x32, 0x8b, 0xa9, 0x25, 0x61, 0xa5,
		0x70, 0xf1, 0xa9, 0xb1, 0xa2, 0x7a, 0x75, 0x0b, 0x43, 0x14, 0x8a, 0x94, 0x3e, 0x01, 0x29, 0x96,
		0xe2, 0x30, 0xc3, 0x93, 0xe3, 0x31, 0xe0, 0x58, 0x54, 0x08, 0x4e, 0x7a, 0x18, 0xb2, 0xf8, 0x2f,
		0xf5, 0xed, 0x24, 0xb1, 0x39, 0x83, 0x05, 0xd8, 0xaf, 0xd2, 0x22, 0x64, 0x48, 0x98, 0xb5, 0x10,
		0x2f, 0x0d, 0xc1, 0x33, 0x5e, 0x98, 0x16, 0x6a, 0x6b, 0x3d, 0xd3, 0x57, 0xef, 0x6a, 0x66, 0x0f,
		0x91, 0x80, 0xc9, 0x2a, 0x79, 0x26, 0xfc, 0x34, 0x96, 0x49, 0xe7, 0x20, 0x47, 0xa3, 0xd2, 0xb0,
		0x5a, 0xe8, 0x05, 0x92, 0x7d, 0xd2, 0x0a, 0x0d, 0xd4, 0x1a, 0x96, 0xe0, 0xd7, 0xdf, 0xf6, 0x6c,
		0x8b, 0x2f, 0x2d, 0x79, 0x05, 0x16, 0x90, 0xd7, 0x3f, 0x33, 0x98, 0xf8, 0x1e, 0x19, 0x3d, 0xbd,
		0xc1, 0x58, 0x5c, 0xfe, 0x56, 0x02, 0x52, 0x64, 0xbf, 0xcd, 0x40, 0x6e, 0xf7, 0x56, 0xa3, 0xaa,
		0x6e, 0xd4, 0xf7, 0xd6, 0xb7, 0xaa, 0xa2, 0x20, 0x15, 0x00, 0x88, 0xe0, 0xfa, 0x56, 0xbd, 0xbc,
		0x2b, 0x26, 0x82, 0xe7, 0xda, 0xce, 0xee, 0x95, 0x4b, 0x62, 0x32, 0x00, 0xec, 0x51, 0x41, 0x2a,
		0xac, 0xf0, 0xf4, 0x45, 0x31, 0x2d, 0x89, 0x90, 0xa7, 0x04, 0xb5, 0x9b, 0xd5, 0x8d, 0x2b, 0x97,
		0xc4, 0xc9, 0xa8, 0xe4, 0xe9, 0x8b, 0xe2, 0x94, 0x34, 0x0d, 0x59, 0x22, 0x59, 0xaf, 0xd7, 0xb7,
		0xc4, 0x4c, 0xc0, 0xd9, 0xdc, 0x55, 0x6a, 0x3b, 0x9b, 0x62, 0x36, 0xe0, 0xdc, 0x54, 0xea, 0x7b,
		0x0d, 0x11, 0x02, 0x86, 0xed, 0x6a, 0xb3, 0x59, 0xde, 0xac, 0x8a, 0xb9, 0x40, 0x63, 0xfd, 0xd6,
		0x6e, 0xb5, 0x29, 0xe6, 0x23, 0x66, 0x3d, 0x7d, 0x51, 0x9c, 0x0e, 0x5e, 0x51, 0xdd, 0xd9, 0xdb,
		0x16, 0x0b, 0xd2, 0x2c, 0x4c, 0xd3, 0x57, 0x70, 0x23, 0x66, 0x06, 0x44, 0x57, 0x2e, 0x89, 0x62,
		0xdf, 0x10, 0xca, 0x32, 0x1b, 0x11, 0x5c, 0xb9, 0x24, 0x4a, 0xcb, 0x15, 0x48, 0x93, 0xe8, 0x92,
		0x24, 0x28, 0x6c, 0x95, 0xd7, 0xab, 0x5b, 0x6a, 0xbd, 0xb1, 0x5b, 0xab, 0xef, 0x94, 0xb7, 0x44,
		0xa1, 0x2f, 0x53, 0xaa, 0x9f, 0xda, 0xab, 0x29, 0xd5, 0x0d, 0x31, 0x11, 0x96, 0x35, 0xaa, 0xe5,
		0xdd, 0xea, 0x86, 0x98, 0x5c, 0xd6, 0x61, 0x7e, 0x54, 0x9e, 0x19, 0xb9, 0x33, 0x42, 0x4b, 0x9c,
		0x38, 0x66, 0x89, 0x09, 0xd7, 0xd0, 0x12, 0x7f, 0x55, 0x80, 0xb9, 0x11, 0xb9, 0x76, 0xe4, 0x4b,
		0x9e, 0x83, 0x34, 0x0d, 0x51, 0x5a, 0x7d, 0x9e, 0x18, 0x99, 0xb4, 0x49, 0xc0, 0x0e, 0x55, 0x20,
		0x82, 0x0b, 0x57, 0xe0, 0xe4, 0x31, 0x15, 0x18, 0x53, 0x0c, 0x19, 0xf9, 0x92, 0x00, 0xc5, 0xe3,
		0xb8, 0x63, 0x12, 0x45, 0x22, 0x92, 0x28, 0xae, 0x0d, 0x1a, 0x70, 0xfe, 0xf8, 0x39, 0x0c, 0x59,
		0xf1, 0x9a, 0x00, 0x0b, 0xa3, 0x1b, 0x95, 0x91, 0x36, 0x7c, 0x02, 0x26, 0xbb, 0xc8, 0x3f, 0xb0,
		0x79, 0xb1, 0x7e, 0x7c, 0x44, 0x09, 0xc0, 0xc3, 0x83, 0xbe, 0x62, 0xa8, 0x70, 0x0d, 0x49, 0x1e,
		0xd7, 0x6d, 0x50, 0x6b, 0x86, 0x2c, 0xfd, 0x7c, 0x02, 0x1e, 0x1a, 0x49, 0x3e, 0xd2, 0xd0, 0x47,
		0x00, 0x0c, 0xcb, 0xe9, 0xf9, 0xb4, 0x20, 0xd3, 0xfc, 0x94, 0x25, 0x12, 0xb2, 0xf7, 0x71, 0xee,
		0xe9, 0xf9, 0xc1, 0x78, 0x92, 0x8c, 0x03, 0x15, 0x11, 0x85, 0xab, 0x7d, 0x43, 0x53, 0xc4, 0xd0,
		0xd2, 0x31, 0x33, 0x1d, 0xaa, 0x75, 0x1f, 0x03, 0x51, 0x37, 0x0d, 0x64, 0xf9, 0xaa, 0xe7, 0xbb,
		0x48, 0xeb, 0x1a, 0x56, 0x87, 0x24, 0xe0, 0x8c, 0x9c, 0x6e, 0x6b, 0xa6, 0x87, 0x94, 0x19, 0x3a,
		0xdc, 0xe4, 0xa3, 0x18, 0x41, 0xaa, 0x8c, 0x1b, 0x42, 0x4c, 0x46, 0x10, 0x74, 0x38, 0x40, 0x2c,
		0xff, 0xdd, 0x14, 0xe4, 0x42, 0x6d, 0x9d, 0x74, 0x1e, 0xf2, 0xb7, 0xb5, 0xbb, 0x9a, 0xca, 0x5b,
		0x75, 0xea, 0x89, 0x1c, 0x96, 0x35, 0x58, 0xbb, 0xfe, 0x31, 0x98, 0x27, 0x2a, 0x76, 0xcf, 0x47,
		0xae, 0xaa, 0x9b, 0x9a, 0xe7, 0x11, 0xa7, 0x65, 0x88, 0xaa, 0x84, 0xc7, 0xea, 0x78, 0xa8, 0xc2,
		0x47, 0xa4, 0xcb, 0x30, 0x47, 0x10, 0xdd, 0x9e, 0xe9, 0x1b, 0x8e, 0x89, 0x54, 0x7c, 0x78, 0xf0,
		0x48, 0x22, 0x0e, 0x2c, 0x9b, 0xc5, 0x1a, 0xdb, 0x4c, 0x01, 0x5b, 0xe4, 0x49, 0x1b, 0xf0, 0x08,
		0x81, 0x75, 0x90, 0x85, 0x5c, 0xcd, 0x47, 0x2a, 0xfa, 0x6c, 0x4f, 0x33, 0x3d, 0x55, 0xb3, 0x5a,
		0xea, 0x81, 0xe6, 0x1d, 0x14, 0xe7, 0x31, 0xc1, 0x7a, 0xa2, 0x28, 0x28, 0x67, 0xb1, 0xe2, 0x26,
		0xd3, 0xab, 0x12, 0xb5, 0xb2, 0xd5, 0xfa, 0xa4, 0xe6, 0x1d, 0x48, 0x32, 0x2c, 0x10, 0x16, 0xcf,
		0x77, 0x0d, 0xab, 0xa3, 0xea, 0x07, 0x48, 0xbf, 0xa3, 0xf6, 0xfc, 0xf6, 0xd5, 0xe2, 0xc3, 0xe1,
		0xf7, 0x13, 0x0b, 0x9b, 0x44, 0xa7, 0x82, 0x55, 0xf6, 0xfc, 0xf6, 0x55, 0xa9, 0x09, 0x79, 0xbc,
		0x18, 0x5d, 0xe3, 0x45, 0xa4, 0xb6, 0x6d, 0x97, 0x54, 0x96, 0xc2, 0x88, 0x9d, 0x1d, 0xf2, 0xe0,
		0x6a, 0x9d, 0x01, 0xb6, 0xed, 0x16, 0x92, 0xd3, 0xcd, 0x46, 0xb5, 0xba, 0xa1, 0xe4, 0x38, 0xcb,
		0x75, 0xdb, 0xc5, 0x01, 0xd5, 0xb1, 0x03, 0x07, 0xe7, 0x68, 0x40, 0x75, 0x6c, 0xee, 0xde, 0xcb,
		0x30, 0xa7, 0xeb, 0x74, 0xce, 0x86, 0xae, 0xb2, 0x16, 0xdf, 0x2b, 0x8a, 0x11, 0x67, 0xe9, 0xfa,
		0x26, 0x55, 0x60, 0x31, 0xee, 0x49, 0xcf, 0xc2, 0x43, 0x7d, 0x67, 0x85, 0x81, 0xb3, 0x43, 0xb3,
		0x1c, 0x84, 0x5e, 0x86, 0x39, 0xe7, 0x70, 0x18, 0x28, 0x45, 0xde, 0xe8, 0x1c, 0x0e, 0xc2, 0x1e,
		0x23, 0xc7, 0x36, 0x17, 0xe9, 0x9a, 0x8f, 0x5a, 0xc5, 0x33, 0x61, 0xed, 0xd0, 0x80, 0xb4, 0x06,
		0xa2, 0xae, 0xab, 0xc8, 0xd2, 0xf6, 0x4d, 0xa4, 0x6a, 0x2e, 0xb2, 0x34, 0xaf, 0x78, 0x2e, 0xac,
		0x5c, 0xd0, 0xf5, 0x2a, 0x19, 0x2d, 0x93, 0x41, 0xe9, 0x49, 0x98, 0xb5, 0xf7, 0x6f, 0xeb, 0x34,
		0xb2, 0x54, 0xc7, 0x45, 0x6d, 0xe3, 0x85, 0xe2, 0xa3, 0xc4, 0x4d, 0x33, 0x78, 0x80, 0xc4, 0x55,
		0x83, 0x88, 0xa5, 0x27, 0x40, 0xd4, 0xbd, 0x03, 0xcd, 0x75, 0x48, 0x69, 0xf7, 0x1c, 0x4d, 0x47,
		0xc5, 0xc7, 0xa8, 0x2a, 0x95, 0xef, 0x70, 0x31, 0x8e, 0x6c, 0xef, 0x9e, 0xd1, 0xf6, 0x39, 0xe3,
		0x05, 0x1a, 0xd9, 0x44, 0xc6, 0xd8, 0x56, 0x40, 0x74, 0x0e, 0x9c, 0xe8, 0x8b, 0x57, 0x88, 0x5a,
		0xc1, 0x39, 0x70, 0xc2, 0xef, 0xbd, 0x09, 0xf3, 0x3d, 0xcb, 0xb0, 0x7c, 0xe4, 0x3a, 0x2e, 0xc2,
		0xed, 0x3e, 0xdd, 0xb3, 0xc5, 0x7f, 0x99, 0x3a, 0xa6, 0x61, 0xdf, 0x0b, 0x6b, 0xd3, 0x50, 0x51,
		0xe6, 0x7a, 0xc3, 0xc2, 0x65, 0x19, 0xf2, 0xe1, 0x08, 0x92, 0xb2, 0x40, 0x63, 0x48, 0x14, 0x70,
		0x35, 0xae, 0xd4, 0x37, 0x70, 0x1d, 0xfd, 0x4c, 0x55, 0x4c, 0xe0, 0x7a, 0xbe, 0x55, 0xdb, 0xad,
		0xaa, 0xca, 0xde, 0xce, 0x6e, 0x6d, 0xbb, 0x2a, 0x26, 0x9f, 0xcc, 0x66, 0xde, 0x9a, 0x12, 0xef,
		0xdf, 0xbf, 0x7f, 0x3f, 0xb1, 0xfc, 0xdd, 0x04, 0x14, 0xa2, 0x3d, 0xb4, 0xf4, 0x13, 0x70, 0x86,
		0x1f, 0x78, 0x3d, 0xe4, 0xab, 0xf7, 0x0c, 0x97, 0x04, 0x75, 0x57, 0xa3, 0x5d, 0x68, 0xb0, 0x1e,
		0xf3, 0x4c, 0xab, 0x89, 0xfc, 0xe7, 0x0d, 0x17, 0x87, 0x6c, 0x57, 0xf3, 0xa5, 0x2d, 0x38, 0x67,
		0xd9, 0xaa, 0xe7, 0x6b, 0x56, 0x4b, 0x73, 0x5b, 0x6a, 0xff, 0xaa, 0x41, 0xd5, 0x74, 0x1d, 0x79,
		0x9e, 0x4d, 0x8b, 0x49, 0xc0, 0xf2, 0x21, 0xcb, 0x6e, 0x32, 0xe5, 0x7e, 0x96, 0x2d, 0x33, 0xd5,
		0x81, 0xd8, 0x49, 0x1e, 0x17, 0x3b, 0x0f, 0x43, 0xb6, 0xab, 0x39, 0x2a, 0xb2, 0x7c, 0xf7, 0x90,
		0x74, 0x7e, 0x19, 0x25, 0xd3, 0xd5, 0x9c, 0x2a, 0x7e, 0x7e, 0xff, 0xd6, 0x20, 0xec, 0xc7, 0x7f,
		0x48, 0x42, 0x3e, 0xdc, 0xfd, 0xe1, 0x66, 0x5a, 0x27, 0x99, 0x5e, 0x20, 0xb9, 0xe0, 0xc3, 0x27,
		0xf6, 0x8a, 0xab, 0x15, 0x5c, 0x02, 0xe4, 0x49, 0xda, 0x93, 0x29, 0x14, 0x89, 0xcb, 0x2f, 0xde,
		0xfd, 0x88, 0x76, 0xfa, 0x19, 0x85, 0x3d, 0x49, 0x9b, 0x30, 0x79, 0xdb, 0x23, 0xdc, 0x93, 0x84,
		0xfb, 0xd1, 0x93, 0xb9, 0x6f, 0x34, 0x09, 0x79, 0xf6, 0x46, 0x53, 0xdd, 0xa9, 0x2b, 0xdb, 0xe5,
		0x2d, 0x85, 0xc1, 0xa5, 0xb3, 0x90, 0x32, 0xb5, 0x17, 0x0f, 0xa3, 0xc5, 0x82, 0x88, 0xc6, 0x75,
		0xfc, 0x59, 0x48, 0xdd, 0x43, 0xda, 0x9d, 0x68, 0x8a, 0x26, 0xa2, 0xf7, 0x31, 0xf4, 0xd7, 0x20,
		0x4d, 0xfc, 0x25, 0x01, 0x30, 0x8f, 0x89, 0x13, 0x52, 0x06, 0x52, 0x95, 0xba, 0x82, 0xc3, 0x5f,
		0x84, 0x3c, 0x95, 0xaa, 0x8d, 0x5a, 0xb5, 0x52, 0x15, 0x13, 0xcb, 0x97, 0x61, 0x92, 0x3a, 0x01,
		0x6f, 0x8d, 0xc0, 0x0d, 0xe2, 0x04, 0x7b, 0x64, 0x1c, 0x02, 0x1f, 0xdd, 0xdb, 0x5e, 0xaf, 0x2a,
		0x62, 0x22, 0xbc, 0xbc, 0x1e, 0xe4, 0xc3, 0x8d, 0xdf, 0x8f, 0x27, 0xa6, 0xfe, 0x52, 0x80, 0x5c,
		0xa8, 0x91, 0xc3, 0x2d, 0x84, 0x66, 0x9a, 0xf6, 0x3d, 0x55, 0x33, 0x0d, 0xcd, 0x63, 0x41, 0x01,
		0x44, 0x54, 0xc6, 0x92, 0x71, 0x17, 0xed, 0xc7, 0x62, 0xfc, 0xab, 0x02, 0x88, 0x83, 0x4d, 0xe0,
		0x80, 0x81, 0xc2, 0x07, 0x6a, 0xe0, 0x2b, 0x02, 0x14, 0xa2, 0x9d, 0xdf, 0x80, 0x79, 0xe7, 0x3f,
		0x50, 0xf3, 0xde, 0x48, 0xc0, 0x74, 0xa4, 0xdf, 0x1b, 0xd7, 0xba, 0xcf, 0xc2, 0xac, 0xd1, 0x42,
		0x5d, 0xc7, 0xf6, 0x91, 0xa5, 0x1f, 0xaa, 0x26, 0xba, 0x8b, 0xcc, 0xe2, 0x32, 0x49, 0x14, 0x6b,
		0x27, 0x77, 0x94, 0xab, 0xb5, 0x3e, 0x6e, 0x0b, 0xc3, 0xe4, 0xb9, 0xda, 0x46, 0x75, 0xbb, 0x51,
		0xdf, 0xad, 0xee, 0x54, 0x6e, 0xa9, 0x7b, 0x3b, 0x3f, 0xb9, 0x53, 0x7f, 0x7e, 0x47, 0x11, 0x8d,
		0x01, 0xb5, 0xf7, 0x71, 0xab, 0x37, 0x40, 0x1c, 0x34, 0x4a, 0x3a, 0x03, 0xa3, 0xcc, 0x12, 0x27,
		0xa4, 0x39, 0x98, 0xd9, 0xa9, 0xab, 0xcd, 0xda, 0x46, 0x55, 0xad, 0x5e, 0xbf, 0x5e, 0xad, 0xec,
		0x36, 0xe9, 0x11, 0x3b, 0xd0, 0xde, 0x8d, 0x6e, 0xea, 0x97, 0x93, 0x30, 0x37, 0xc2, 0x12, 0xa9,
		0xcc, 0xba, 0x7b, 0x7a, 0xe0, 0xf8, 0xe8, 0x38, 0xd6, 0xaf, 0xe2, 0xfe, 0xa1, 0xa1, 0xb9, 0x3e,
		0x3b, 0x0c, 0x3c, 0x01, 0xd8, 0x4b, 0x96, 0x6f, 0xb4, 0x0d, 0xe4, 0xb2, 0x1b, 0x09, 0xda, 0xf2,
		0xcf, 0xf4, 0xe5, 0xf4, 0x52, 0xe2, 0x23, 0x20, 0x39, 0xb6, 0x67, 0xf8, 0xc6, 0x5d, 0xa4, 0x1a,
		0x16, 0xbf, 0xbe, 0xc0, 0x47, 0x80, 0x94, 0x22, 0xf2, 0x91, 0x9a, 0xe5, 0x07, 0xda, 0x16, 0xea,
		0x68, 0x03, 0xda, 0x38, 0x81, 0x27, 0x15, 0x91, 0x8f, 0x04, 0xda, 0xe7, 0x21, 0xdf, 0xb2, 0x7b,
		0xb8, 0xa1, 0xa2, 0x7a, 0xb8, 0x5e, 0x08, 0x4a, 0x8e, 0xca, 0x02, 0x15, 0xd6, 0xf1, 0xf6, 0xef,
		0x4d, 0xf2, 0x4a, 0x8e, 0xca, 0xa8, 0xca, 0x05, 0x98, 0xd1, 0x3a, 0x1d, 0x17, 0x93, 0x73, 0x22,
		0xda, 0xc3, 0x17, 0x02, 0x31, 0x51, 0x5c, 0xbc, 0x01, 0x19, 0xee, 0x07, 0x5c, 0x92, 0xb1, 0x27,
		0x54, 0x87, 0xde, 0x5e, 0x25, 0x56, 0xb2, 0x4a, 0xc6, 0xe2, 0x83, 0xe7, 0x21, 0x6f, 0x78, 0x6a,
		0xff, 0x1a, 0x35, 0xb1, 0x94, 0x58, 0xc9, 0x28, 0x39, 0xc3, 0x0b, 0xee, 0xcd, 0x96, 0x5f, 0x4b,
		0x40, 0x21, 0x7a, 0x0d, 0x2c, 0x6d, 0x40, 0xc6, 0xb4, 0x75, 0x8d, 0x84, 0x16, 0xfd, 0x06, 0xb1,
		0x12, 0x73, 0x73, 0xbc, 0xba, 0xc5, 0xf4, 0x95, 0x00, 0xb9, 0xf8, 0xb7, 0x02, 0x64, 0xb8, 0x58,
		0x5a, 0x80, 0x94, 0xa3, 0xf9, 0x07, 0x84, 0x2e, 0xbd, 0x9e, 0x10, 0x05, 0x85, 0x3c, 0x63, 0xb9,
		0xe7, 0x68, 0x16, 0x09, 0x01, 0x26, 0xc7, 0xcf, 0x78, 0x5d, 0x4d, 0xa4, 0xb5, 0xc8, 0x01, 0xc1,
		0xee, 0x76, 0x91, 0xe5, 0x7b, 0x7c, 0x5d, 0x99, 0xbc, 0xc2, 0xc4, 0xd2, 0x53, 0x30, 0xeb, 0xbb,
		0x9a, 0x61, 0x46, 0x74, 0x53, 0x44, 0x57, 0xe4, 0x03, 0x81, 0xb2, 0x0c, 0x67, 0x39, 0x6f, 0x0b,
		0xf9, 0x9a, 0x7e, 0x80, 0x5a, 0x7d, 0xd0, 0x24, 0xb9, 0x63, 0x3c, 0xc3, 0x14, 0x36, 0xd8, 0x38,
		0xc7, 0x2e, 0x7f, 0x5f, 0x80, 0x59, 0x7e, 0xa4, 0x69, 0x05, 0xce, 0xda, 0x06, 0xd0, 0x2c, 0xcb,
		0xf6, 0xc3, 0xee, 0x1a, 0x0e, 0xe5, 0x21, 0xdc, 0x6a, 0x39, 0x00, 0x29, 0x21, 0x82, 0xc5, 0x2e,
		0x40, 0x7f, 0xe4, 0x58, 0xb7, 0x9d, 0x83, 0x1c, 0xbb, 0xe3, 0x27, 0x1f, 0x8a, 0xe8, 0x21, 0x18,
		0xa8, 0x08, 0x9f, 0x7d, 0xa4, 0x79, 0x48, 0xef, 0xa3, 0x8e, 0x61, 0xb1, 0x9b, 0x47, 0xfa, 0xc0,
		0xef, 0x33, 0x53, 0xc1, 0x7d, 0xe6, 0xfa, 0x4d, 0x98, 0xd3, 0xed, 0xee, 0xa0, 0xb9, 0xeb, 0xe2,
		0xc0, 0x41, 0xdc, 0xfb, 0xa4, 0xf0, 0x19, 0xe8, 0xb7, 0x98, 0x5f, 0x4d, 0x24, 0x37, 0x1b, 0xeb,
		0x5f, 0x4f, 0x2c, 0x6e, 0x52, 0x5c, 0x83, 0x4f, 0x53, 0x41, 0x6d, 0x13, 0xe9, 0xd8, 0x74, 0xf8,
		0xc1, 0xe3, 0xf0, 0xd1, 0x8e, 0xe1, 0x1f, 0xf4, 0xf6, 0x57, 0x75, 0xbb, 0xbb, 0xd6, 0xb1, 0x3b,
		0x76, 0xff, 0xc3, 0x18, 0x7e, 0x22, 0x0f, 0xe4, 0x17, 0xfb, 0x38, 0x96, 0x0d, 0xa4, 0x8b, 0xb1,
		0x5f, 0xd2, 0xe4, 0x1d, 0x98, 0x63, 0xca, 0x2a, 0xb9, 0x9d, 0xa7, 0xa7, 0x03, 0xe9, 0xc4, 0x1b,
		0x9a, 0xe2, 0x37, 0xdf, 0x24, 0xb5, 0x5a, 0x99, 0x65, 0x50, 0x3c, 0x46, 0x0f, 0x10, 0xb2, 0x02,
		0x0f, 0x45, 0xf8, 0xe8, 0xbe, 0x44, 0x6e, 0x0c, 0xe3, 0x77, 0x19, 0xe3, 0x5c, 0x88, 0xb1, 0xc9,
		0xa0, 0x72, 0x05, 0xa6, 0x4f, 0xc3, 0xf5, 0xd7, 0x8c, 0x2b, 0x8f, 0xc2, 0x24, 0x9b, 0x30, 0x43,
		0x48, 0xf4, 0x9e, 0xe7, 0xdb, 0x5d, 0x92, 0xf4, 0x4e, 0xa6, 0xf9, 0x9b, 0x37, 0xe9, 0x46, 0x29,
		0x60, 0x58, 0x25, 0x40, 0xc9, 0x32, 0x90, 0x0f, 0x12, 0x2d, 0xa4, 0x9b, 0x31, 0x0c, 0xaf, 0x33,
		0x43, 0x02, 0x7d, 0xf9, 0xd3, 0x30, 0x8f, 0x7f, 0x93, 0x9c, 0x14, 0xb6, 0x24, 0xfe, 0x3e, 0xaa,
		0xf8, 0xfd, 0x97, 0xe8, 0x5e, 0x9c, 0x0b, 0x08, 0x42, 0x36, 0x85, 0x56, 0xb1, 0x83, 0x7c, 0x1f,
		0xb9, 0x9e, 0xaa, 0x99, 0xa3, 0xcc, 0x0b, 0x1d, 0xe8, 0x8b, 0x5f, 0x7e, 0x3b, 0xba, 0x8a, 0x9b,
		0x14, 0x59, 0x36, 0x4d, 0x79, 0x0f, 0xce, 0x8c, 0x88, 0x8a, 0x31, 0x38, 0x5f, 0x66, 0x9c, 0xf3,
		0x43, 0x91, 0x81, 0x69, 0x1b, 0xc0, 0xe5, 0xc1, 0x5a, 0x8e, 0xc1, 0xf9, 0x1b, 0x8c, 0x53, 0x62,
		0x58, 0xbe, 0xa4, 0x98, 0xf1, 0x06, 0xcc, 0xde, 0x45, 0xee, 0xbe, 0xed, 0xb1, 0x4b, 0x94, 0x31,
		0xe8, 0x5e, 0x61, 0x74, 0x33, 0x0c, 0x48, 0x6e, 0x55, 0x30, 0xd7, 0xb3, 0x90, 0x69, 0x6b, 0x3a,
		0x1a, 0x83, 0xe2, 0x2b, 0x8c, 0x62, 0x0a, 0xeb, 0x63, 0x68, 0x19, 0xf2, 0x1d, 0x9b, 0x95, 0xa5,
		0x78, 0xf8, 0xab, 0x0c, 0x9e, 0xe3, 0x18, 0x46, 0xe1, 0xd8, 0x4e, 0xcf, 0xc4, 0x35, 0x2b, 0x9e,
		0xe2, 0x37, 0x39, 0x05, 0xc7, 0x30, 0x8a, 0x53, 0xb8, 0xf5, 0xb7, 0x38, 0x85, 0x17, 0xf2, 0xe7,
		0x73, 0x90, 0xb3, 0x2d, 0xf3, 0xd0, 0xb6, 0xc6, 0x31, 0xe2, 0xb7, 0x19, 0x03, 0x30, 0x08, 0x26,
		0xb8, 0x06, 0xd9, 0x71, 0x17, 0xe2, 0x77, 0xde, 0xe6, 0xdb, 0x83, 0xaf, 0xc0, 0x26, 0xcc, 0xf0,
		0x04, 0x65, 0xd8, 0xd6, 0x18, 0x14, 0xbf, 0xcb, 0x28, 0x0a, 0x21, 0x18, 0x9b, 0x86, 0x8f, 0x3c,
		0xbf, 0x83, 0xc6, 0x21, 0x79, 0x8d, 0x4f, 0x83, 0x41, 0x98, 0x2b, 0xf7, 0x91, 0xa5, 0x1f, 0x8c,
		0xc7, 0xf0, 0x35, 0xee, 0x4a, 0x8e, 0xc1, 0x14, 0x15, 0x98, 0xee, 0x6a, 0xae, 0x77, 0xa0, 0x99,
		0x63, 0x2d, 0xc7, 0xef, 0x31, 0x8e, 0x7c, 0x00, 0x62, 0x1e, 0xe9, 0x59, 0xa7, 0xa1, 0xf9, 0x3a,
		0xf7, 0x48, 0x08, 0xc6, 0xb6, 0x9e, 0xe7, 0x93, 0xab, 0xaa, 0xd3, 0xb0, 0xfd, 0x3e, 0xdf, 0x7a,
		0x14, 0xbb, 0x1d, 0x66, 0xbc, 0x06, 0x59, 0xcf, 0x78, 0x71, 0x2c, 0x9a, 0x3f, 0xe0, 0x2b, 0x4d,
		0x00, 0x18, 0x7c, 0x0b, 0xce, 0x8e, 0x2c, 0x13, 0x63, 0x90, 0xfd, 0x21, 0x23, 0x5b, 0x18, 0x51,
		0x2a, 0x58, 0x4a, 0x38, 0x2d, 0xe5, 0x1f, 0xf1, 0x94, 0x80, 0x06, 0xb8, 0x1a, 0xf8, 0xa0, 0xe0,
		0x69, 0xed, 0xd3, 0x79, 0xed, 0x8f, 0xb9, 0xd7, 0x28, 0x36, 0xe2, 0xb5, 0x5d, 0x58, 0x60, 0x8c,
		0xa7, 0x5b, 0xd7, 0x6f, 0xf0, 0xc4, 0x4a, 0xd1, 0x7b, 0xd1, 0xd5, 0xfd, 0x29, 0x58, 0x0c, 0xdc,
		0xc9, 0x3b, 0x52, 0x4f, 0xed, 0x6a, 0xce, 0x18, 0xcc, 0xdf, 0x64, 0xcc, 0x3c, 0xe3, 0x07, 0x2d,
		0xad, 0xb7, 0xad, 0x39, 0x98, 0xfc, 0x26, 0x14, 0x39, 0x79, 0xcf, 0x72, 0x91, 0x6e, 0x77, 0x2c,
		0xe3, 0x45, 0xd4, 0x1a, 0x83, 0xfa, 0x4f, 0x06, 0x96, 0x6a, 0x2f, 0x04, 0xc7, 0xcc, 0x35, 0x10,
		0x83, 0x5e, 0x45, 0x35, 0xba, 0x8e, 0xed, 0xfa, 0x31, 0x8c, 0x7f, 0xca, 0x57, 0x2a, 0xc0, 0xd5,
		0x08, 0x4c, 0xae, 0x42, 0x81, 0x3c, 0x8e, 0x1b, 0x92, 0x7f, 0xc6, 0x88, 0xa6, 0xfb, 0x28, 0x96,
		0x38, 0x74, 0xbb, 0xeb, 0x68, 0xee, 0x38, 0xf9, 0xef, 0xcf, 0x79, 0xe2, 0x60, 0x10, 0x96, 0x38,
		0xfc, 0x43, 0x07, 0xe1, 0x6a, 0x3f, 0x06, 0xc3, 0xb7, 0x78, 0xe2, 0xe0, 0x18, 0x46, 0xc1, 0x1b,
		0x86, 0x31, 0x28, 0xfe, 0x82, 0x53, 0x70, 0x0c, 0xa6, 0xf8, 0x54, 0xbf, 0xd0, 0xba, 0xa8, 0x63,
		0x78, 0xbe, 0x4b, 0xfb, 0xe0, 0x93, 0xa9, 0xbe, 0xfd, 0x76, 0xb4, 0x09, 0x53, 0x42, 0x50, 0xf9,
		0x06, 0xcc, 0x0c, 0xb4, 0x18, 0x52, 0xdc, 0x7f, 0x37, 0x14, 0x7f, 0xfa, 0x5d, 0x96, 0x8c, 0xa2,
		0x1d, 0x86, 0xbc, 0x85, 0xd7, 0x3d, 0xda, 0x07, 0xc4, 0x93, 0xbd, 0xf4, 0x6e, 0xb0, 0xf4, 0x91,
		0x36, 0x40, 0xbe, 0x0e, 0xd3, 0x91, 0x1e, 0x20, 0x9e, 0xea, 0x73, 0x8c, 0x2a, 0x1f, 0x6e, 0x01,
		0xe4, 0xcb, 0x90, 0xc2, 0xf5, 0x3c, 0x1e, 0xfe, 0x33, 0x0c, 0x4e, 0xd4, 0xe5, 0x8f, 0x43, 0x86,
		0xd7, 0xf1, 0x78, 0xe8, 0xcf, 0x32, 0x68, 0x00, 0xc1, 0x70, 0x5e, 0xc3, 0xe3, 0xe1, 0x3f, 0xc7,
		0xe1, 0x1c, 0x82, 0xe1, 0xe3, 0xbb, 0xf0, 0x3b, 0xbf, 0x90, 0x62, 0x79, 0x98, 0xfb, 0xee, 0x1a,
		0x4c, 0xb1, 0xe2, 0x1d, 0x8f, 0xfe, 0x3c, 0x7b, 0x39, 0x47, 0xc8, 0xcf, 0x40, 0x7a, 0x4c, 0x87,
		0x7f, 0x81, 0x41, 0xa9, 0xbe, 0x5c, 0x81, 0x5c, 0xa8, 0x60, 0xc7, 0xc3, 0x7f, 0x91, 0xc1, 0xc3,
		0x28, 0x6c, 0x3a, 0x2b, 0xd8, 0xf1, 0x04, 0xbf, 0xc4, 0x4d, 0x67, 0x08, 0xec, 0x36, 0x5e, 0xab,
		0xe3, 0xd1, 0xbf, 0xcc, 0xbd, 0xce, 0x21, 0xf2, 0x73, 0x90, 0x0d, 0xf2, 0x6f, 0x3c, 0xfe, 0x57,
		0x18, 0xbe, 0x8f, 0xc1, 0x1e, 0x08, 0xe5, 0xff, 0x78, 0x8a, 0x5f, 0xe5, 0x1e, 0x08, 0xa1, 0xf0,
		0x36, 0x1a, 0xac, 0xe9, 0xf1, 0x4c, 0xbf, 0xc6, 0xb7, 0xd1, 0x40, 0x49, 0xc7, 0xab, 0x49, 0xd2,
		0x60, 0x3c, 0xc5, 0x17, 0xf9, 0x6a, 0x12, 0x7d, 0x6c, 0xc6, 0x60, 0x91, 0x8c, 0xe7, 0xf8, 0x75,
		0x6e, 0xc6, 0x40, 0x8d, 0x94, 0x1b, 0x20, 0x0d, 0x17, 0xc8, 0x78, 0xbe, 0x2f, 0x31, 0xbe, 0xd9,
		0xa1, 0xfa, 0x28, 0x3f, 0x0f, 0x0b, 0xa3, 0x8b, 0x63, 0x3c, 0xeb, 0x97, 0xdf, 0x1d, 0x38, 0xce,
		0x84, 0x6b, 0xa3, 0xbc, 0xdb, 0xcf, 0xb2, 0xe1, 0xc2, 0x18, 0x4f, 0xfb, 0xf2, 0xbb, 0xd1, 0x44,
		0x1b, 0xae, 0x8b, 0x72, 0x19, 0xa0, 0x5f, 0x93, 0xe2, 0xb9, 0x5e, 0x61, 0x5c, 0x21, 0x10, 0xde,
		0x1a, 0xac, 0x24, 0xc5, 0xe3, 0xbf, 0xc2, 0xb7, 0x06, 0x43, 0xe0, 0xad, 0xc1, 0xab, 0x51, 0x3c,
		0xfa, 0x55, 0xbe, 0x35, 0x38, 0x44, 0xbe, 0x06, 0x19, 0xab, 0x67, 0x9a, 0x38, 0xb6, 0xa4, 0x93,
		0xff, 0xe1, 0xa8, 0xf8, 0xaf, 0xef, 0x31, 0x30, 0x07, 0xc8, 0x97, 0x21, 0x8d, 0xba, 0xfb, 0xa8,
		0x15, 0x87, 0xfc, 0xb7, 0xf7, 0x78, 0x3e, 0xc1, 0xda, 0xf2, 0x73, 0x00, 0xf4, 0x30, 0x4d, 0xbe,
		0x12, 0xc5, 0x60, 0xff, 0xfd, 0x3d, 0xf6, 0xbf, 0x0c, 0x7d, 0x48, 0x9f, 0x80, 0xfe, 0x67, 0xc4,
		0xc9, 0x04, 0x6f, 0x47, 0x09, 0xc8, 0x01, 0xfc, 0x59, 0x98, 0xba, 0xed, 0xd9, 0x96, 0xaf, 0x75,
		0xe2, 0xd0, 0xff, 0xc1, 0xd0, 0x5c, 0x1f, 0x3b, 0xac, 0x6b, 0xbb, 0xc8, 0xd7, 0x3a, 0x5e, 0x1c,
		0xf6, 0x3f, 0x19, 0x36, 0x00, 0x60, 0xb0, 0xae, 0x79, 0xfe, 0x38, 0xf3, 0xfe, 0x2f, 0x0e, 0xe6,
		0x00, 0x6c, 0x34, 0xfe, 0x7d, 0x07, 0x1d, 0xc6, 0x61, 0xdf, 0xe1, 0x46, 0x33, 0x7d, 0xf9, 0xe3,
		0x90, 0xc5, 0x3f, 0xe9, 0xff, 0xf7, 0xc4, 0x80, 0xff, 0x9b, 0x81, 0xfb, 0x08, 0xfc, 0x66, 0xcf,
		0x6f, 0xf9, 0x46, 0xbc, 0xb3, 0xff, 0x87, 0xad, 0x34, 0xd7, 0x97, 0xcb, 0x90, 0xf3, 0xfc, 0x56,
		0xab, 0xc7, 0x3a, 0x9a, 0x18, 0xf8, 0x0f, 0xde, 0x0b, 0x0e, 0xb9, 0x01, 0x66, 0xfd, 0xfc, 0xe8,
		0xcb, 0x3a, 0xd8, 0xb4, 0x37, 0x6d, 0x7a, 0x4d, 0x07, 0x5f, 0x4c, 0xc3, 0xe3, 0xba, 0xdd, 0xdd,
		0xb7, 0xbd, 0x35, 0x9a, 0x50, 0x82, 0x74, 0xb2, 0x16, 0xcc, 0x82, 0x5f, 0xb7, 0x05, 0x82, 0xc5,
		0xd3, 0x5d, 0xd4, 0x2d, 0xff, 0x55, 0x12, 0x32, 0x15, 0xcd, 0xf3, 0xb5, 0x7b, 0xda, 0xa1, 0xe4,
		0xc0, 0x1c, 0xfe, 0xbd, 0xad, 0x39, 0xe4, 0xda, 0x87, 0xed, 0x33, 0x76, 0x11, 0xfa, 0x91, 0xd5,
		0xfe, 0x5b, 0x39, 0x62, 0x75, 0x84, 0x3a, 0xf9, 0x80, 0xbc, 0x2e, 0xbe, 0xfe, 0x8f, 0xe7, 0x26,
		0x7e, 0xfe, 0x9f, 0xce, 0x65, 0xb6, 0x0f, 0x9f, 0x37, 0x4c, 0xcf, 0xb6, 0x94, 0x51, 0xd4, 0xd2,
		0xe7, 0x04, 0x78, 0x78, 0x84, 0x7c, 0x87, 0x6d, 0x46, 0xf6, 0x39, 0xe1, 0xd2, 0x98, 0xaf, 0xe6,
		0x30, 0x6a, 0x42, 0x3e, 0xf2, 0xfa, 0x93, 0x5e, 0xb3, 0x78, 0x0b, 0x8a, 0xc7, 0xcd, 0x44, 0x12,
		0x21, 0x79, 0x07, 0x1d, 0xb2, 0x7f, 0x26, 0xc5, 0x3f, 0xa5, 0x0b, 0xfd, 0x7f, 0x46, 0x13, 0x56,
		0x72, 0x17, 0x67, 0x43, 0xd6, 0xb1, 0x97, 0xd1, 0x71, 0x39, 0x71, 0x55, 0x58, 0xd4, 0x60, 0x29,
		0xce, 0xd2, 0xff, 0xe7, 0x2b, 0x96, 0x4b, 0x30, 0x49, 0x85, 0xd2, 0x3c, 0xa4, 0x6b, 0x96, 0x7f,
		0xe5, 0x12, 0xa1, 0x4a, 0x2a, 0xf4, 0x61, 0x7d, 0xeb, 0xf5, 0x07, 0xa5, 0x89, 0xef, 0x3d, 0x28,
		0x4d, 0xfc, 0xfd, 0x83, 0xd2, 0xc4, 0x1b, 0x0f, 0x4a, 0xc2, 0x5b, 0x0f, 0x4a, 0xc2, 0x3b, 0x0f,
		0x4a, 0xc2, 0x0f, 0x1f, 0x94, 0x84, 0xfb, 0x47, 0x25, 0xe1, 0x6b, 0x47, 0x25, 0xe1, 0x1b, 0x47,
		0x25, 0xe1, 0xdb, 0x47, 0x25, 0xe1, 0x3b, 0x47, 0x25, 0xe1, 0xf5, 0xa3, 0xd2, 0xc4, 0xf7, 0x8e,
		0x4a, 0x13, 0x6f, 0x1c, 0x95, 0x84, 0xb7, 0x8e, 0x4a, 0x13, 0xef, 0x1c, 0x95, 0x84, 0x1f, 0x1e,
		0x95, 0x84, 0xfb, 0xff, 0x5c, 0x9a, 0xf8, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0xe6, 0xd7,
		0x43, 0x1d, 0x31, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Castaway) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Castaway)
	if !ok {
		that2, ok := that.(Castaway)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Castaway")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Castaway but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Castaway but is not nil && this == nil")
	}
	if len(this.CastMapValueMessage) != len(that1.CastMapValueMessage) {
		return fmt.Errorf("CastMapValueMessage this(%v) Not Equal that(%v)", len(this.CastMapValueMessage), len(that1.CastMapValueMessage))
	}
	for i := range this.CastMapValueMessage {
		a := (Wilson)(this.CastMapValueMessage[i])
		b := (Wilson)(that1.CastMapValueMessage[i])
		if !(&a).Equal(&b) {
			return fmt.Errorf("CastMapValueMessage this[%v](%v) Not Equal that[%v](%v)", i, this.CastMapValueMessage[i], i, that1.CastMapValueMessage[i])
		}
	}
	if len(this.CastMapValueMessageNullable) != len(that1.CastMapValueMessageNullable) {
		return fmt.Errorf("CastMapValueMessageNullable this(%v) Not Equal that(%v)", len(this.CastMapValueMessageNullable), len(that1.CastMapValueMessageNullable))
	}
	for i := range this.CastMapValueMessageNullable {
		a := (*Wilson)(this.CastMapValueMessageNullable[i])
		b := (*Wilson)(that1.CastMapValueMessageNullable[i])
		if !a.Equal(b) {
			return fmt.Errorf("CastMapValueMessageNullable this[%v](%v) Not Equal that[%v](%v)", i, this.CastMapValueMessageNullable[i], i, that1.CastMapValueMessageNullable[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Castaway) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Castaway)
	if !ok {
		that2, ok := that.(Castaway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.CastMapValueMessage) != len(that1.CastMapValueMessage) {
		return false
	}
	for i := range this.CastMapValueMessage {
		a := (Wilson)(this.CastMapValueMessage[i])
		b := (Wilson)(that1.CastMapValueMessage[i])
		if !(&a).Equal(&b) {
			return false
		}
	}
	if len(this.CastMapValueMessageNullable) != len(that1.CastMapValueMessageNullable) {
		return false
	}
	for i := range this.CastMapValueMessageNullable {
		a := (*Wilson)(this.CastMapValueMessageNullable[i])
		b := (*Wilson)(that1.CastMapValueMessageNullable[i])
		if !a.Equal(b) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Wilson) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Wilson)
	if !ok {
		that2, ok := that.(Wilson)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Wilson")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Wilson but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Wilson but is not nil && this == nil")
	}
	if this.Int64 != nil && that1.Int64 != nil {
		if *this.Int64 != *that1.Int64 {
			return fmt.Errorf("Int64 this(%v) Not Equal that(%v)", *this.Int64, *that1.Int64)
		}
	} else if this.Int64 != nil {
		return fmt.Errorf("this.Int64 == nil && that.Int64 != nil")
	} else if that1.Int64 != nil {
		return fmt.Errorf("Int64 this(%v) Not Equal that(%v)", this.Int64, that1.Int64)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Wilson) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Wilson)
	if !ok {
		that2, ok := that.(Wilson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Int64 != nil && that1.Int64 != nil {
		if *this.Int64 != *that1.Int64 {
			return false
		}
	} else if this.Int64 != nil {
		return false
	} else if that1.Int64 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type CastawayFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetCastMapValueMessage() map[int32]MyWilson
	GetCastMapValueMessageNullable() map[int32]*MyWilson
}

func (this *Castaway) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Castaway) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCastawayFromFace(this)
}

func (this *Castaway) GetCastMapValueMessage() map[int32]MyWilson {
	return this.CastMapValueMessage
}

func (this *Castaway) GetCastMapValueMessageNullable() map[int32]*MyWilson {
	return this.CastMapValueMessageNullable
}

func NewCastawayFromFace(that CastawayFace) *Castaway {
	this := &Castaway{}
	this.CastMapValueMessage = that.GetCastMapValueMessage()
	this.CastMapValueMessageNullable = that.GetCastMapValueMessageNullable()
	return this
}

type WilsonFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetInt64() *int64
}

func (this *Wilson) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Wilson) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewWilsonFromFace(this)
}

func (this *Wilson) GetInt64() *int64 {
	return this.Int64
}

func NewWilsonFromFace(that WilsonFace) *Wilson {
	this := &Wilson{}
	this.Int64 = that.GetInt64()
	return this
}

func (this *Castaway) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&castvalue.Castaway{")
	keysForCastMapValueMessage := make([]int32, 0, len(this.CastMapValueMessage))
	for k := range this.CastMapValueMessage {
		keysForCastMapValueMessage = append(keysForCastMapValueMessage, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForCastMapValueMessage)
	mapStringForCastMapValueMessage := "map[int32]MyWilson{"
	for _, k := range keysForCastMapValueMessage {
		mapStringForCastMapValueMessage += fmt.Sprintf("%#v: %#v,", k, this.CastMapValueMessage[k])
	}
	mapStringForCastMapValueMessage += "}"
	if this.CastMapValueMessage != nil {
		s = append(s, "CastMapValueMessage: "+mapStringForCastMapValueMessage+",\n")
	}
	keysForCastMapValueMessageNullable := make([]int32, 0, len(this.CastMapValueMessageNullable))
	for k := range this.CastMapValueMessageNullable {
		keysForCastMapValueMessageNullable = append(keysForCastMapValueMessageNullable, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForCastMapValueMessageNullable)
	mapStringForCastMapValueMessageNullable := "map[int32]*MyWilson{"
	for _, k := range keysForCastMapValueMessageNullable {
		mapStringForCastMapValueMessageNullable += fmt.Sprintf("%#v: %#v,", k, this.CastMapValueMessageNullable[k])
	}
	mapStringForCastMapValueMessageNullable += "}"
	if this.CastMapValueMessageNullable != nil {
		s = append(s, "CastMapValueMessageNullable: "+mapStringForCastMapValueMessageNullable+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Wilson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&castvalue.Wilson{")
	if this.Int64 != nil {
		s = append(s, "Int64: "+valueToGoStringCastvalue(this.Int64, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCastvalue(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func NewPopulatedCastaway(r randyCastvalue, easy bool) *Castaway {
	this := &Castaway{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.CastMapValueMessage = make(map[int32]MyWilson)
		for i := 0; i < v1; i++ {
			this.CastMapValueMessage[int32(r.Int31())] = (MyWilson)(*NewPopulatedWilson(r, easy))
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.CastMapValueMessageNullable = make(map[int32]*MyWilson)
		for i := 0; i < v2; i++ {
			this.CastMapValueMessageNullable[int32(r.Int31())] = (*MyWilson)(NewPopulatedWilson(r, easy))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCastvalue(r, 3)
	}
	return this
}

func NewPopulatedWilson(r randyCastvalue, easy bool) *Wilson {
	this := &Wilson{}
	if r.Intn(10) != 0 {
		v3 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.Int64 = &v3
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCastvalue(r, 2)
	}
	return this
}

type randyCastvalue interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCastvalue(r randyCastvalue) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCastvalue(r randyCastvalue) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneCastvalue(r)
	}
	return string(tmps)
}
func randUnrecognizedCastvalue(r randyCastvalue, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCastvalue(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCastvalue(dAtA []byte, r randyCastvalue, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCastvalue(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateCastvalue(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateCastvalue(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCastvalue(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCastvalue(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCastvalue(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCastvalue(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Castaway) Size() (n int) {
	var l int
	_ = l
	if len(m.CastMapValueMessage) > 0 {
		for k, v := range m.CastMapValueMessage {
			_ = k
			_ = v
			l = ((*Wilson)(&v)).Size()
			mapEntrySize := 1 + sovCastvalue(uint64(k)) + 1 + l + sovCastvalue(uint64(l))
			n += mapEntrySize + 1 + sovCastvalue(uint64(mapEntrySize))
		}
	}
	if len(m.CastMapValueMessageNullable) > 0 {
		for k, v := range m.CastMapValueMessageNullable {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = ((*Wilson)(v)).Size()
				l += 1 + sovCastvalue(uint64(l))
			}
			mapEntrySize := 1 + sovCastvalue(uint64(k)) + l
			n += mapEntrySize + 1 + sovCastvalue(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Wilson) Size() (n int) {
	var l int
	_ = l
	if m.Int64 != nil {
		n += 1 + sovCastvalue(uint64(*m.Int64))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCastvalue(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCastvalue(x uint64) (n int) {
	return sovCastvalue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Castaway) String() string {
	if this == nil {
		return "nil"
	}
	keysForCastMapValueMessage := make([]int32, 0, len(this.CastMapValueMessage))
	for k := range this.CastMapValueMessage {
		keysForCastMapValueMessage = append(keysForCastMapValueMessage, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForCastMapValueMessage)
	mapStringForCastMapValueMessage := "map[int32]MyWilson{"
	for _, k := range keysForCastMapValueMessage {
		mapStringForCastMapValueMessage += fmt.Sprintf("%v: %v,", k, this.CastMapValueMessage[k])
	}
	mapStringForCastMapValueMessage += "}"
	keysForCastMapValueMessageNullable := make([]int32, 0, len(this.CastMapValueMessageNullable))
	for k := range this.CastMapValueMessageNullable {
		keysForCastMapValueMessageNullable = append(keysForCastMapValueMessageNullable, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForCastMapValueMessageNullable)
	mapStringForCastMapValueMessageNullable := "map[int32]*MyWilson{"
	for _, k := range keysForCastMapValueMessageNullable {
		mapStringForCastMapValueMessageNullable += fmt.Sprintf("%v: %v,", k, this.CastMapValueMessageNullable[k])
	}
	mapStringForCastMapValueMessageNullable += "}"
	s := strings.Join([]string{`&Castaway{`,
		`CastMapValueMessage:` + mapStringForCastMapValueMessage + `,`,
		`CastMapValueMessageNullable:` + mapStringForCastMapValueMessageNullable + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Wilson) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Wilson{`,
		`Int64:` + valueToStringCastvalue(this.Int64) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCastvalue(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Castaway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Castaway) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CastMapValueMessage) > 0 {
		for k := range m.CastMapValueMessage {
			dAtA[i] = 0xa
			i++
			v := m.CastMapValueMessage[k]
			msgSize := 0
			if ((*Wilson)(&v)) != nil {
				msgSize = ((*Wilson)(&v)).Size()
				msgSize += 1 + sovCastvalue(uint64(msgSize))
			}
			mapSize := 1 + sovCastvalue(uint64(k)) + msgSize
			i = encodeVarintCastvalue(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCastvalue(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintCastvalue(dAtA, i, uint64(((*Wilson)(&v)).Size()))
			n1, err := ((*Wilson)(&v)).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n1
		}
	}
	if len(m.CastMapValueMessageNullable) > 0 {
		for k := range m.CastMapValueMessageNullable {
			dAtA[i] = 0x12
			i++
			v := m.CastMapValueMessageNullable[k]
			msgSize := 0
			if ((*Wilson)(v)) != nil {
				msgSize = ((*Wilson)(v)).Size()
				msgSize += 1 + sovCastvalue(uint64(msgSize))
			}
			mapSize := 1 + sovCastvalue(uint64(k)) + msgSize
			i = encodeVarintCastvalue(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCastvalue(dAtA, i, uint64(k))
			if ((*Wilson)(v)) != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCastvalue(dAtA, i, uint64(((*Wilson)(v)).Size()))
				n2, err := ((*Wilson)(v)).MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Wilson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wilson) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Int64 != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCastvalue(dAtA, i, uint64(*m.Int64))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Castvalue(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Castvalue(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCastvalue(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}

func init() { proto.RegisterFile("combos/unsafemarshaler/castvalue.proto", fileDescriptorCastvalue) }

var fileDescriptorCastvalue = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x8f, 0xbd, 0x4f, 0xea, 0x50,
	0x18, 0xc6, 0xcf, 0x4b, 0xc3, 0x0d, 0xf7, 0x70, 0x07, 0x6e, 0xef, 0x1d, 0x1a, 0x4c, 0x5e, 0x1a,
	0x06, 0x65, 0xd0, 0x36, 0x21, 0xc4, 0x18, 0x47, 0x8c, 0x83, 0x89, 0x38, 0x30, 0x68, 0x1c, 0x4f,
	0x49, 0x29, 0xc4, 0xd2, 0x43, 0x7a, 0x5a, 0x4d, 0x37, 0x06, 0x27, 0xff, 0x12, 0x47, 0x47, 0x47,
	0xdd, 0x18, 0x19, 0x9d, 0x94, 0x1e, 0x17, 0x46, 0x46, 0x46, 0x43, 0x2b, 0x7e, 0x24, 0xf8, 0x91,
	0xb8, 0xbd, 0xef, 0x73, 0xde, 0xe7, 0xf9, 0x3d, 0x87, 0xae, 0xb6, 0x78, 0xcf, 0xe2, 0xc2, 0x0c,
	0x3d, 0xc1, 0xda, 0x76, 0x8f, 0xf9, 0xa2, 0xc3, 0x5c, 0xdb, 0x37, 0x5b, 0x4c, 0x04, 0xa7, 0xcc,
	0x0d, 0x6d, 0xa3, 0xef, 0xf3, 0x80, 0xab, 0xbf, 0x5f, 0x84, 0xe2, 0x86, 0xd3, 0x0d, 0x3a, 0xa1,
	0x65, 0xb4, 0x78, 0xcf, 0x74, 0xb8, 0xc3, 0xcd, 0xe4, 0xc2, 0x0a, 0xdb, 0xc9, 0x96, 0x2c, 0xc9,
	0x94, 0x3a, 0xcb, 0xb7, 0x0a, 0xcd, 0xed, 0x30, 0x11, 0xb0, 0x33, 0x16, 0xa9, 0x7d, 0xfa, 0x6f,
	0x3e, 0x37, 0x58, 0xff, 0x70, 0x9e, 0xd5, 0xb0, 0x85, 0x60, 0x8e, 0xad, 0x81, 0xae, 0x54, 0xf2,
	0xd5, 0x75, 0xe3, 0x95, 0xba, 0x70, 0x18, 0x4b, 0xce, 0x77, 0xbd, 0xc0, 0x8f, 0xea, 0x85, 0xe1,
	0x7d, 0x89, 0x5c, 0x3c, 0x94, 0x72, 0x8d, 0xe8, 0xa8, 0xeb, 0x0a, 0xee, 0x35, 0x97, 0x45, 0xab,
	0xe7, 0x40, 0x57, 0x96, 0xe8, 0x07, 0xa1, 0xeb, 0x32, 0xcb, 0xb5, 0xb5, 0x4c, 0x82, 0xae, 0x7d,
	0x13, 0xbd, 0xb0, 0xa5, 0x15, 0xfe, 0xbc, 0xc3, 0x7f, 0x86, 0x29, 0x1e, 0x53, 0xed, 0xa3, 0x9f,
	0xa8, 0x05, 0xaa, 0x9c, 0xd8, 0x91, 0x06, 0x3a, 0x54, 0xb2, 0xcd, 0xf9, 0xa8, 0xae, 0xd1, 0x6c,
	0xd2, 0x45, 0xcb, 0xe8, 0x50, 0xc9, 0x57, 0xff, 0xbe, 0x69, 0xf7, 0x0c, 0x4b, 0xdf, 0xb7, 0x33,
	0x5b, 0x50, 0x64, 0x54, 0xff, 0xaa, 0xe9, 0x0f, 0x11, 0x65, 0xa4, 0xbf, 0x52, 0x51, 0xfd, 0x4f,
	0xb3, 0x7b, 0x5e, 0xb0, 0x59, 0x4b, 0xa2, 0x94, 0x66, 0xba, 0xd4, 0xf7, 0x87, 0x31, 0x92, 0x51,
	0x8c, 0xe4, 0x2e, 0x46, 0x32, 0x8e, 0x11, 0x26, 0x31, 0xc2, 0x34, 0x46, 0x98, 0xc5, 0x08, 0x03,
	0x89, 0x70, 0x29, 0x11, 0xae, 0x24, 0xc2, 0xb5, 0x44, 0xb8, 0x91, 0x08, 0x43, 0x89, 0x64, 0x24,
	0x91, 0x8c, 0x25, 0xc2, 0x44, 0x22, 0x99, 0x4a, 0x84, 0x99, 0x44, 0x18, 0x3c, 0x22, 0x79, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0xff, 0x17, 0xd9, 0xa7, 0x94, 0x02, 0x00, 0x00,
}
