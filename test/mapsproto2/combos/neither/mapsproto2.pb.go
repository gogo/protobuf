// Code generated by protoc-gen-gogo.
// source: combos/neither/mapsproto2.proto
// DO NOT EDIT!

/*
Package proto2_maps is a generated protocol buffer package.

It is generated from these files:
	combos/neither/mapsproto2.proto

It has these top-level messages:
	FloatingPoint
	CustomMap
	AllMaps
	AllMapsOrdered
*/
package proto2_maps

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_test_custom "github.com/gogo/protobuf/test/custom"
import github_com_gogo_protobuf_test "github.com/gogo/protobuf/test"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strconv "strconv"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MapEnum int32

const (
	MA MapEnum = 0
	MB MapEnum = 1
	MC MapEnum = 2
)

var MapEnum_name = map[int32]string{
	0: "MA",
	1: "MB",
	2: "MC",
}
var MapEnum_value = map[string]int32{
	"MA": 0,
	"MB": 1,
	"MC": 2,
}

func (x MapEnum) Enum() *MapEnum {
	p := new(MapEnum)
	*p = x
	return p
}
func (x MapEnum) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(MapEnum_name, int32(x))
}
func (x *MapEnum) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MapEnum_value, data, "MapEnum")
	if err != nil {
		return err
	}
	*x = MapEnum(value)
	return nil
}
func (MapEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptorMapsproto2, []int{0} }

type FloatingPoint struct {
	F                *float64 `protobuf:"fixed64,1,opt,name=f" json:"f,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FloatingPoint) Reset()                    { *m = FloatingPoint{} }
func (*FloatingPoint) ProtoMessage()               {}
func (*FloatingPoint) Descriptor() ([]byte, []int) { return fileDescriptorMapsproto2, []int{0} }

type CustomMap struct {
	Nullable128S     map[string]*github_com_gogo_protobuf_test_custom.Uint128 `protobuf:"bytes,1,rep,name=Nullable128s,customtype=github.com/gogo/protobuf/test/custom.Uint128" json:"Nullable128s,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uint128S         map[string]github_com_gogo_protobuf_test_custom.Uint128  `protobuf:"bytes,2,rep,name=Uint128s,customtype=github.com/gogo/protobuf/test/custom.Uint128" json:"Uint128s" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NullableIds      map[string]*github_com_gogo_protobuf_test.Uuid           `protobuf:"bytes,3,rep,name=NullableIds,customtype=github.com/gogo/protobuf/test.Uuid" json:"NullableIds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ids              map[string]github_com_gogo_protobuf_test.Uuid            `protobuf:"bytes,4,rep,name=Ids,customtype=github.com/gogo/protobuf/test.Uuid" json:"Ids" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte                                                   `json:"-"`
}

func (m *CustomMap) Reset()                    { *m = CustomMap{} }
func (*CustomMap) ProtoMessage()               {}
func (*CustomMap) Descriptor() ([]byte, []int) { return fileDescriptorMapsproto2, []int{1} }

type AllMaps struct {
	StringToDoubleMap map[string]float64        `protobuf:"bytes,1,rep,name=StringToDoubleMap" json:"StringToDoubleMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	StringToFloatMap  map[string]float32        `protobuf:"bytes,2,rep,name=StringToFloatMap" json:"StringToFloatMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Int32Map          map[int32]int32           `protobuf:"bytes,3,rep,name=Int32Map" json:"Int32Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Int64Map          map[int64]int64           `protobuf:"bytes,4,rep,name=Int64Map" json:"Int64Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint32Map         map[uint32]uint32         `protobuf:"bytes,5,rep,name=Uint32Map" json:"Uint32Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint64Map         map[uint64]uint64         `protobuf:"bytes,6,rep,name=Uint64Map" json:"Uint64Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Sint32Map         map[int32]int32           `protobuf:"bytes,7,rep,name=Sint32Map" json:"Sint32Map,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	Sint64Map         map[int64]int64           `protobuf:"bytes,8,rep,name=Sint64Map" json:"Sint64Map,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	Fixed32Map        map[uint32]uint32         `protobuf:"bytes,9,rep,name=Fixed32Map" json:"Fixed32Map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Sfixed32Map       map[int32]int32           `protobuf:"bytes,10,rep,name=Sfixed32Map" json:"Sfixed32Map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Fixed64Map        map[uint64]uint64         `protobuf:"bytes,11,rep,name=Fixed64Map" json:"Fixed64Map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Sfixed64Map       map[int64]int64           `protobuf:"bytes,12,rep,name=Sfixed64Map" json:"Sfixed64Map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BoolMap           map[bool]bool             `protobuf:"bytes,13,rep,name=BoolMap" json:"BoolMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringMap         map[string]string         `protobuf:"bytes,14,rep,name=StringMap" json:"StringMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToBytesMap  map[string][]byte         `protobuf:"bytes,15,rep,name=StringToBytesMap" json:"StringToBytesMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToEnumMap   map[string]MapEnum        `protobuf:"bytes,16,rep,name=StringToEnumMap" json:"StringToEnumMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=proto2.maps.MapEnum"`
	StringToMsgMap    map[string]*FloatingPoint `protobuf:"bytes,17,rep,name=StringToMsgMap" json:"StringToMsgMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized  []byte                    `json:"-"`
}

func (m *AllMaps) Reset()                    { *m = AllMaps{} }
func (*AllMaps) ProtoMessage()               {}
func (*AllMaps) Descriptor() ([]byte, []int) { return fileDescriptorMapsproto2, []int{2} }

type AllMapsOrdered struct {
	StringToDoubleMap map[string]float64        `protobuf:"bytes,1,rep,name=StringToDoubleMap" json:"StringToDoubleMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	StringToFloatMap  map[string]float32        `protobuf:"bytes,2,rep,name=StringToFloatMap" json:"StringToFloatMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Int32Map          map[int32]int32           `protobuf:"bytes,3,rep,name=Int32Map" json:"Int32Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Int64Map          map[int64]int64           `protobuf:"bytes,4,rep,name=Int64Map" json:"Int64Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint32Map         map[uint32]uint32         `protobuf:"bytes,5,rep,name=Uint32Map" json:"Uint32Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint64Map         map[uint64]uint64         `protobuf:"bytes,6,rep,name=Uint64Map" json:"Uint64Map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Sint32Map         map[int32]int32           `protobuf:"bytes,7,rep,name=Sint32Map" json:"Sint32Map,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	Sint64Map         map[int64]int64           `protobuf:"bytes,8,rep,name=Sint64Map" json:"Sint64Map,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	Fixed32Map        map[uint32]uint32         `protobuf:"bytes,9,rep,name=Fixed32Map" json:"Fixed32Map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Sfixed32Map       map[int32]int32           `protobuf:"bytes,10,rep,name=Sfixed32Map" json:"Sfixed32Map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Fixed64Map        map[uint64]uint64         `protobuf:"bytes,11,rep,name=Fixed64Map" json:"Fixed64Map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Sfixed64Map       map[int64]int64           `protobuf:"bytes,12,rep,name=Sfixed64Map" json:"Sfixed64Map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BoolMap           map[bool]bool             `protobuf:"bytes,13,rep,name=BoolMap" json:"BoolMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringMap         map[string]string         `protobuf:"bytes,14,rep,name=StringMap" json:"StringMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToBytesMap  map[string][]byte         `protobuf:"bytes,15,rep,name=StringToBytesMap" json:"StringToBytesMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToEnumMap   map[string]MapEnum        `protobuf:"bytes,16,rep,name=StringToEnumMap" json:"StringToEnumMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=proto2.maps.MapEnum"`
	StringToMsgMap    map[string]*FloatingPoint `protobuf:"bytes,17,rep,name=StringToMsgMap" json:"StringToMsgMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized  []byte                    `json:"-"`
}

func (m *AllMapsOrdered) Reset()                    { *m = AllMapsOrdered{} }
func (*AllMapsOrdered) ProtoMessage()               {}
func (*AllMapsOrdered) Descriptor() ([]byte, []int) { return fileDescriptorMapsproto2, []int{3} }

func init() {
	proto.RegisterType((*FloatingPoint)(nil), "proto2.maps.FloatingPoint")
	proto.RegisterType((*CustomMap)(nil), "proto2.maps.CustomMap")
	proto.RegisterType((*AllMaps)(nil), "proto2.maps.AllMaps")
	proto.RegisterType((*AllMapsOrdered)(nil), "proto2.maps.AllMapsOrdered")
	proto.RegisterEnum("proto2.maps.MapEnum", MapEnum_name, MapEnum_value)
}
func (this *FloatingPoint) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return Mapsproto2Description()
}
func (this *CustomMap) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return Mapsproto2Description()
}
func (this *AllMaps) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return Mapsproto2Description()
}
func (this *AllMapsOrdered) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return Mapsproto2Description()
}
func Mapsproto2Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4468 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7a, 0x6b, 0x6c, 0x23, 0xd7,
		0x75, 0xbf, 0x86, 0x0f, 0x89, 0x3c, 0xa4, 0xa8, 0xd1, 0x95, 0xbc, 0xa6, 0xe5, 0x98, 0xda, 0x95,
		0x5f, 0xf2, 0xda, 0x96, 0x6c, 0x79, 0x77, 0xbd, 0xe6, 0xc6, 0x36, 0x28, 0x89, 0xab, 0x95, 0xa3,
		0x57, 0x86, 0x92, 0x5f, 0x81, 0x31, 0xff, 0xd1, 0xf0, 0x8a, 0x1a, 0x2f, 0x39, 0xc3, 0xcc, 0x0c,
		0xd7, 0x96, 0x3f, 0xfc, 0xb1, 0x81, 0xfb, 0x40, 0x10, 0xf4, 0x5d, 0xa0, 0x8e, 0xe3, 0xb8, 0x49,
		0x80, 0xd6, 0x69, 0xfa, 0x4a, 0xfa, 0x48, 0x83, 0x7e, 0xca, 0x97, 0xb4, 0x06, 0x0a, 0x14, 0xc9,
		0xb7, 0x20, 0x08, 0x8c, 0xac, 0x6a, 0xa0, 0x6e, 0xeb, 0xb6, 0x6e, 0xe3, 0xa2, 0x01, 0xfc, 0xa5,
		0xb8, 0xaf, 0xe1, 0xcc, 0x70, 0xc8, 0xa1, 0x0c, 0xe4, 0xf1, 0xc1, 0x9f, 0xa4, 0x39, 0xf7, 0xfc,
		0x7e, 0xf7, 0xdc, 0x73, 0xcf, 0x3d, 0xe7, 0xcc, 0xe5, 0xc0, 0x67, 0xce, 0xc1, 0xe9, 0x86, 0x65,
		0x35, 0x9a, 0x78, 0xb1, 0x6d, 0x5b, 0xae, 0xb5, 0xdf, 0x39, 0x58, 0xac, 0x63, 0x47, 0xb7, 0x8d,
		0xb6, 0x6b, 0xd9, 0x0b, 0x54, 0x86, 0x26, 0x98, 0xc6, 0x82, 0xd0, 0x98, 0xdb, 0x84, 0xc9, 0xcb,
		0x46, 0x13, 0xaf, 0x7a, 0x8a, 0x35, 0xec, 0xa2, 0x8b, 0x90, 0x3a, 0x30, 0x9a, 0xb8, 0x28, 0x9d,
		0x4e, 0xce, 0xe7, 0x96, 0xee, 0x58, 0x08, 0x81, 0x16, 0x82, 0x88, 0x1d, 0x22, 0x56, 0x28, 0x62,
		0xee, 0xed, 0x14, 0x4c, 0x45, 0x8c, 0x22, 0x04, 0x29, 0x53, 0x6b, 0x11, 0x46, 0x69, 0x3e, 0xab,
		0xd0, 0xff, 0x51, 0x11, 0xc6, 0xda, 0x9a, 0x7e, 0x55, 0x6b, 0xe0, 0x62, 0x82, 0x8a, 0xc5, 0x23,
		0x2a, 0x01, 0xd4, 0x71, 0x1b, 0x9b, 0x75, 0x6c, 0xea, 0x47, 0xc5, 0xe4, 0xe9, 0xe4, 0x7c, 0x56,
		0xf1, 0x49, 0xd0, 0xbd, 0x30, 0xd9, 0xee, 0xec, 0x37, 0x0d, 0x5d, 0xf5, 0xa9, 0xc1, 0xe9, 0xe4,
		0x7c, 0x5a, 0x91, 0xd9, 0xc0, 0x6a, 0x57, 0xf9, 0x6e, 0x98, 0x78, 0x01, 0x6b, 0x57, 0xfd, 0xaa,
		0x39, 0xaa, 0x5a, 0x20, 0x62, 0x9f, 0xe2, 0x0a, 0xe4, 0x5b, 0xd8, 0x71, 0xb4, 0x06, 0x56, 0xdd,
		0xa3, 0x36, 0x2e, 0xa6, 0xe8, 0xea, 0x4f, 0xf7, 0xac, 0x3e, 0xbc, 0xf2, 0x1c, 0x47, 0xed, 0x1e,
		0xb5, 0x31, 0xaa, 0x40, 0x16, 0x9b, 0x9d, 0x16, 0x63, 0x48, 0xf7, 0xf1, 0x5f, 0xd5, 0xec, 0xb4,
		0xc2, 0x2c, 0x19, 0x02, 0xe3, 0x14, 0x63, 0x0e, 0xb6, 0xaf, 0x19, 0x3a, 0x2e, 0x8e, 0x52, 0x82,
		0xbb, 0x7b, 0x08, 0x6a, 0x6c, 0x3c, 0xcc, 0x21, 0x70, 0x68, 0x05, 0xb2, 0xf8, 0x45, 0x17, 0x9b,
		0x8e, 0x61, 0x99, 0xc5, 0x31, 0x4a, 0x72, 0x67, 0xc4, 0x2e, 0xe2, 0x66, 0x3d, 0x4c, 0xd1, 0xc5,
		0xa1, 0x0b, 0x30, 0x66, 0xb5, 0x5d, 0xc3, 0x32, 0x9d, 0x62, 0xe6, 0xb4, 0x34, 0x9f, 0x5b, 0xfa,
		0x58, 0x64, 0x20, 0x6c, 0x33, 0x1d, 0x45, 0x28, 0xa3, 0x75, 0x90, 0x1d, 0xab, 0x63, 0xeb, 0x58,
		0xd5, 0xad, 0x3a, 0x56, 0x0d, 0xf3, 0xc0, 0x2a, 0x66, 0x29, 0xc1, 0x6c, 0xef, 0x42, 0xa8, 0xe2,
		0x8a, 0x55, 0xc7, 0xeb, 0xe6, 0x81, 0xa5, 0x14, 0x9c, 0xc0, 0x33, 0x3a, 0x05, 0xa3, 0xce, 0x91,
		0xe9, 0x6a, 0x2f, 0x16, 0xf3, 0x34, 0x42, 0xf8, 0xd3, 0xdc, 0xff, 0xa6, 0x61, 0x62, 0x98, 0x10,
		0xbb, 0x04, 0xe9, 0x03, 0xb2, 0xca, 0x62, 0xe2, 0x24, 0x3e, 0x60, 0x98, 0xa0, 0x13, 0x47, 0x3f,
		0xa4, 0x13, 0x2b, 0x90, 0x33, 0xb1, 0xe3, 0xe2, 0x3a, 0x8b, 0x88, 0xe4, 0x90, 0x31, 0x05, 0x0c,
		0xd4, 0x1b, 0x52, 0xa9, 0x0f, 0x15, 0x52, 0x4f, 0xc3, 0x84, 0x67, 0x92, 0x6a, 0x6b, 0x66, 0x43,
		0xc4, 0xe6, 0x62, 0x9c, 0x25, 0x0b, 0x55, 0x81, 0x53, 0x08, 0x4c, 0x29, 0xe0, 0xc0, 0x33, 0x5a,
		0x05, 0xb0, 0x4c, 0x6c, 0x1d, 0xa8, 0x75, 0xac, 0x37, 0x8b, 0x99, 0x3e, 0x5e, 0xda, 0x26, 0x2a,
		0x3d, 0x5e, 0xb2, 0x98, 0x54, 0x6f, 0xa2, 0x47, 0xba, 0xa1, 0x36, 0xd6, 0x27, 0x52, 0x36, 0xd9,
		0x21, 0xeb, 0x89, 0xb6, 0x3d, 0x28, 0xd8, 0x98, 0xc4, 0x3d, 0xae, 0xf3, 0x95, 0x65, 0xa9, 0x11,
		0x0b, 0xb1, 0x2b, 0x53, 0x38, 0x8c, 0x2d, 0x6c, 0xdc, 0xf6, 0x3f, 0xa2, 0xdb, 0xc1, 0x13, 0xa8,
		0x34, 0xac, 0x80, 0x66, 0xa1, 0xbc, 0x10, 0x6e, 0x69, 0x2d, 0x3c, 0x73, 0x11, 0x0a, 0x41, 0xf7,
		0xa0, 0x69, 0x48, 0x3b, 0xae, 0x66, 0xbb, 0x34, 0x0a, 0xd3, 0x0a, 0x7b, 0x40, 0x32, 0x24, 0xb1,
		0x59, 0xa7, 0x59, 0x2e, 0xad, 0x90, 0x7f, 0x67, 0x1e, 0x86, 0xf1, 0xc0, 0xf4, 0xc3, 0x02, 0xe7,
		0x5e, 0x19, 0x85, 0xe9, 0xa8, 0x98, 0x8b, 0x0c, 0xff, 0x53, 0x30, 0x6a, 0x76, 0x5a, 0xfb, 0xd8,
		0x2e, 0x26, 0x29, 0x03, 0x7f, 0x42, 0x15, 0x48, 0x37, 0xb5, 0x7d, 0xdc, 0x2c, 0xa6, 0x4e, 0x4b,
		0xf3, 0x85, 0xa5, 0x7b, 0x87, 0x8a, 0xea, 0x85, 0x0d, 0x02, 0x51, 0x18, 0x12, 0x3d, 0x06, 0x29,
		0x9e, 0xe2, 0x08, 0xc3, 0xd9, 0xe1, 0x18, 0x48, 0x2c, 0x2a, 0x14, 0x87, 0x6e, 0x85, 0x2c, 0xf9,
		0xcb, 0x7c, 0x3b, 0x4a, 0x6d, 0xce, 0x10, 0x01, 0xf1, 0x2b, 0x9a, 0x81, 0x0c, 0x0d, 0xb3, 0x3a,
		0x16, 0xa5, 0xc1, 0x7b, 0x26, 0x1b, 0x53, 0xc7, 0x07, 0x5a, 0xa7, 0xe9, 0xaa, 0xd7, 0xb4, 0x66,
		0x07, 0xd3, 0x80, 0xc9, 0x2a, 0x79, 0x2e, 0x7c, 0x92, 0xc8, 0xd0, 0x2c, 0xe4, 0x58, 0x54, 0x1a,
		0x66, 0x1d, 0xbf, 0x48, 0xb3, 0x4f, 0x5a, 0x61, 0x81, 0xba, 0x4e, 0x24, 0x64, 0xfa, 0xe7, 0x1d,
		0xcb, 0x14, 0x5b, 0x4b, 0xa7, 0x20, 0x02, 0x3a, 0xfd, 0xc3, 0xe1, 0xc4, 0x77, 0x5b, 0xf4, 0xf2,
		0xc2, 0xb1, 0x38, 0xf7, 0xcd, 0x04, 0xa4, 0xe8, 0x79, 0x9b, 0x80, 0xdc, 0xee, 0x33, 0x3b, 0x55,
		0x75, 0x75, 0x7b, 0x6f, 0x79, 0xa3, 0x2a, 0x4b, 0xa8, 0x00, 0x40, 0x05, 0x97, 0x37, 0xb6, 0x2b,
		0xbb, 0x72, 0xc2, 0x7b, 0x5e, 0xdf, 0xda, 0xbd, 0x70, 0x4e, 0x4e, 0x7a, 0x80, 0x3d, 0x26, 0x48,
		0xf9, 0x15, 0x1e, 0x5a, 0x92, 0xd3, 0x48, 0x86, 0x3c, 0x23, 0x58, 0x7f, 0xba, 0xba, 0x7a, 0xe1,
		0x9c, 0x3c, 0x1a, 0x94, 0x3c, 0xb4, 0x24, 0x8f, 0xa1, 0x71, 0xc8, 0x52, 0xc9, 0xf2, 0xf6, 0xf6,
		0x86, 0x9c, 0xf1, 0x38, 0x6b, 0xbb, 0xca, 0xfa, 0xd6, 0x9a, 0x9c, 0xf5, 0x38, 0xd7, 0x94, 0xed,
		0xbd, 0x1d, 0x19, 0x3c, 0x86, 0xcd, 0x6a, 0xad, 0x56, 0x59, 0xab, 0xca, 0x39, 0x4f, 0x63, 0xf9,
		0x99, 0xdd, 0x6a, 0x4d, 0xce, 0x07, 0xcc, 0x7a, 0x68, 0x49, 0x1e, 0xf7, 0xa6, 0xa8, 0x6e, 0xed,
		0x6d, 0xca, 0x05, 0x34, 0x09, 0xe3, 0x6c, 0x0a, 0x61, 0xc4, 0x44, 0x48, 0x74, 0xe1, 0x9c, 0x2c,
		0x77, 0x0d, 0x61, 0x2c, 0x93, 0x01, 0xc1, 0x85, 0x73, 0x32, 0x9a, 0x5b, 0x81, 0x34, 0x8d, 0x2e,
		0x84, 0xa0, 0xb0, 0x51, 0x59, 0xae, 0x6e, 0xa8, 0xdb, 0x3b, 0xbb, 0xeb, 0xdb, 0x5b, 0x95, 0x0d,
		0x59, 0xea, 0xca, 0x94, 0xea, 0x27, 0xf7, 0xd6, 0x95, 0xea, 0xaa, 0x9c, 0xf0, 0xcb, 0x76, 0xaa,
		0x95, 0xdd, 0xea, 0xaa, 0x9c, 0x9c, 0xd3, 0x61, 0x3a, 0x2a, 0xcf, 0x44, 0x9e, 0x0c, 0xdf, 0x16,
		0x27, 0xfa, 0x6c, 0x31, 0xe5, 0xea, 0xd9, 0xe2, 0xaf, 0x48, 0x30, 0x15, 0x91, 0x6b, 0x23, 0x27,
		0x79, 0x1c, 0xd2, 0x2c, 0x44, 0x59, 0xf5, 0xb9, 0x27, 0x32, 0x69, 0xd3, 0x80, 0xed, 0xa9, 0x40,
		0x14, 0xe7, 0xaf, 0xc0, 0xc9, 0x3e, 0x15, 0x98, 0x50, 0xf4, 0x18, 0xf9, 0xb2, 0x04, 0xc5, 0x7e,
		0xdc, 0x31, 0x89, 0x22, 0x11, 0x48, 0x14, 0x97, 0xc2, 0x06, 0x9c, 0xe9, 0xbf, 0x86, 0x1e, 0x2b,
		0xde, 0x90, 0xe0, 0x54, 0x74, 0xa3, 0x12, 0x69, 0xc3, 0x63, 0x30, 0xda, 0xc2, 0xee, 0xa1, 0x25,
		0x8a, 0xf5, 0x5d, 0x11, 0x25, 0x80, 0x0c, 0x87, 0x7d, 0xc5, 0x51, 0xfe, 0x1a, 0x92, 0xec, 0xd7,
		0x6d, 0x30, 0x6b, 0x7a, 0x2c, 0xfd, 0x6c, 0x02, 0x6e, 0x8a, 0x24, 0x8f, 0x34, 0xf4, 0x36, 0x00,
		0xc3, 0x6c, 0x77, 0x5c, 0x56, 0x90, 0x59, 0x7e, 0xca, 0x52, 0x09, 0x3d, 0xfb, 0x24, 0xf7, 0x74,
		0x5c, 0x6f, 0x3c, 0x49, 0xc7, 0x81, 0x89, 0xa8, 0xc2, 0xc5, 0xae, 0xa1, 0x29, 0x6a, 0x68, 0xa9,
		0xcf, 0x4a, 0x7b, 0x6a, 0xdd, 0x03, 0x20, 0xeb, 0x4d, 0x03, 0x9b, 0xae, 0xea, 0xb8, 0x36, 0xd6,
		0x5a, 0x86, 0xd9, 0xa0, 0x09, 0x38, 0x53, 0x4e, 0x1f, 0x68, 0x4d, 0x07, 0x2b, 0x13, 0x6c, 0xb8,
		0x26, 0x46, 0x09, 0x82, 0x56, 0x19, 0xdb, 0x87, 0x18, 0x0d, 0x20, 0xd8, 0xb0, 0x87, 0x98, 0xfb,
		0xdc, 0x18, 0xe4, 0x7c, 0x6d, 0x1d, 0x3a, 0x03, 0xf9, 0xe7, 0xb5, 0x6b, 0x9a, 0x2a, 0x5a, 0x75,
		0xe6, 0x89, 0x1c, 0x91, 0xed, 0xf0, 0x76, 0xfd, 0x01, 0x98, 0xa6, 0x2a, 0x56, 0xc7, 0xc5, 0xb6,
		0xaa, 0x37, 0x35, 0xc7, 0xa1, 0x4e, 0xcb, 0x50, 0x55, 0x44, 0xc6, 0xb6, 0xc9, 0xd0, 0x8a, 0x18,
		0x41, 0xe7, 0x61, 0x8a, 0x22, 0x5a, 0x9d, 0xa6, 0x6b, 0xb4, 0x9b, 0x58, 0x25, 0x2f, 0x0f, 0x0e,
		0x4d, 0xc4, 0x9e, 0x65, 0x93, 0x44, 0x63, 0x93, 0x2b, 0x10, 0x8b, 0x1c, 0xb4, 0x06, 0xb7, 0x51,
		0x58, 0x03, 0x9b, 0xd8, 0xd6, 0x5c, 0xac, 0xe2, 0x4f, 0x77, 0xb4, 0xa6, 0xa3, 0x6a, 0x66, 0x5d,
		0x3d, 0xd4, 0x9c, 0xc3, 0xe2, 0xb4, 0x9f, 0xe0, 0x16, 0xa2, 0xbb, 0xc6, 0x55, 0xab, 0x54, 0xb3,
		0x62, 0xd6, 0xaf, 0x68, 0xce, 0x21, 0x2a, 0xc3, 0x29, 0x4a, 0xe4, 0xb8, 0xb6, 0x61, 0x36, 0x54,
		0xfd, 0x10, 0xeb, 0x57, 0xd5, 0x8e, 0x7b, 0x70, 0xb1, 0x78, 0xab, 0x9f, 0x81, 0x1a, 0x59, 0xa3,
		0x3a, 0x2b, 0x44, 0x65, 0xcf, 0x3d, 0xb8, 0x88, 0x6a, 0x90, 0x27, 0xfb, 0xd1, 0x32, 0x5e, 0xc2,
		0xea, 0x81, 0x65, 0xd3, 0xe2, 0x52, 0x88, 0x38, 0xdc, 0x3e, 0x27, 0x2e, 0x6c, 0x73, 0xc0, 0xa6,
		0x55, 0xc7, 0xe5, 0x74, 0x6d, 0xa7, 0x5a, 0x5d, 0x55, 0x72, 0x82, 0xe5, 0xb2, 0x65, 0x93, 0x98,
		0x6a, 0x58, 0x9e, 0x8f, 0x73, 0x2c, 0xa6, 0x1a, 0x96, 0xf0, 0xf0, 0x79, 0x98, 0xd2, 0x75, 0xb6,
		0x6c, 0x43, 0x57, 0x79, 0x97, 0xef, 0x14, 0xe5, 0x80, 0xbf, 0x74, 0x7d, 0x8d, 0x29, 0xf0, 0x30,
		0x77, 0xd0, 0x23, 0x70, 0x53, 0xd7, 0x5f, 0x7e, 0xe0, 0x64, 0xcf, 0x2a, 0xc3, 0xd0, 0xf3, 0x30,
		0xd5, 0x3e, 0xea, 0x05, 0xa2, 0xc0, 0x8c, 0xed, 0xa3, 0x30, 0xec, 0x4e, 0xfa, 0xe6, 0x66, 0x63,
		0x5d, 0x73, 0x71, 0xbd, 0x78, 0xb3, 0x5f, 0xdb, 0x37, 0x80, 0x16, 0x41, 0xd6, 0x75, 0x15, 0x9b,
		0xda, 0x7e, 0x13, 0xab, 0x9a, 0x8d, 0x4d, 0xcd, 0x29, 0xce, 0xfa, 0x95, 0x0b, 0xba, 0x5e, 0xa5,
		0xa3, 0x15, 0x3a, 0x88, 0xce, 0xc2, 0xa4, 0xb5, 0xff, 0xbc, 0xce, 0x82, 0x4b, 0x6d, 0xdb, 0xf8,
		0xc0, 0x78, 0xb1, 0x78, 0x07, 0x75, 0xd3, 0x04, 0x19, 0xa0, 0xa1, 0xb5, 0x43, 0xc5, 0xe8, 0x1e,
		0x90, 0x75, 0xe7, 0x50, 0xb3, 0xdb, 0xb4, 0xba, 0x3b, 0x6d, 0x4d, 0xc7, 0xc5, 0x3b, 0x99, 0x2a,
		0x93, 0x6f, 0x09, 0x31, 0x7a, 0x1a, 0xa6, 0x3b, 0xa6, 0x61, 0xba, 0xd8, 0x6e, 0xdb, 0x98, 0x34,
		0xe9, 0xec, 0xa4, 0x15, 0xff, 0x79, 0xac, 0x4f, 0x9b, 0xbd, 0xe7, 0xd7, 0x66, 0xbb, 0xab, 0x4c,
		0x75, 0x7a, 0x85, 0x73, 0x65, 0xc8, 0xfb, 0x37, 0x1d, 0x65, 0x81, 0x6d, 0xbb, 0x2c, 0x91, 0x1a,
		0xba, 0xb2, 0xbd, 0x4a, 0xaa, 0xdf, 0xb3, 0x55, 0x39, 0x41, 0xaa, 0xf0, 0xc6, 0xfa, 0x6e, 0x55,
		0x55, 0xf6, 0xb6, 0x76, 0xd7, 0x37, 0xab, 0x72, 0xf2, 0x6c, 0x36, 0xf3, 0xce, 0x98, 0x7c, 0xfd,
		0xfa, 0xf5, 0xeb, 0x89, 0xb9, 0xef, 0x24, 0xa0, 0x10, 0xec, 0x7c, 0xd1, 0xc7, 0xe1, 0x66, 0xf1,
		0x9a, 0xea, 0x60, 0x57, 0x7d, 0xc1, 0xb0, 0x69, 0x1c, 0xb6, 0x34, 0xd6, 0x3b, 0x7a, 0x2e, 0x9c,
		0xe6, 0x5a, 0x35, 0xec, 0x3e, 0x65, 0xd8, 0x24, 0xca, 0x5a, 0x9a, 0x8b, 0x36, 0x60, 0xd6, 0xb4,
		0x54, 0xc7, 0xd5, 0xcc, 0xba, 0x66, 0xd7, 0xd5, 0xee, 0x05, 0x81, 0xaa, 0xe9, 0x3a, 0x76, 0x1c,
		0x8b, 0x95, 0x00, 0x8f, 0xe5, 0x63, 0xa6, 0x55, 0xe3, 0xca, 0xdd, 0xdc, 0x58, 0xe1, 0xaa, 0xa1,
		0xed, 0x4e, 0xf6, 0xdb, 0xee, 0x5b, 0x21, 0xdb, 0xd2, 0xda, 0x2a, 0x36, 0x5d, 0xfb, 0x88, 0xf6,
		0x6b, 0x19, 0x25, 0xd3, 0xd2, 0xda, 0x55, 0xf2, 0xfc, 0xd3, 0xdb, 0x03, 0xbf, 0x1f, 0x7f, 0x98,
		0x84, 0xbc, 0xbf, 0x67, 0x23, 0x2d, 0xb0, 0x4e, 0xf3, 0xb3, 0x44, 0x8f, 0xef, 0xed, 0x03, 0x3b,
		0xbc, 0x85, 0x15, 0x92, 0xb8, 0xcb, 0xa3, 0xac, 0x93, 0x52, 0x18, 0x92, 0x14, 0x4d, 0x72, 0x60,
		0x31, 0xeb, 0xcf, 0x33, 0x0a, 0x7f, 0x42, 0x6b, 0x30, 0xfa, 0xbc, 0x43, 0xb9, 0x47, 0x29, 0xf7,
		0x1d, 0x83, 0xb9, 0x9f, 0xa8, 0x51, 0xf2, 0xec, 0x13, 0x35, 0x75, 0x6b, 0x5b, 0xd9, 0xac, 0x6c,
		0x28, 0x1c, 0x8e, 0x6e, 0x81, 0x54, 0x53, 0x7b, 0xe9, 0x28, 0x98, 0xe2, 0xa9, 0x68, 0x58, 0xc7,
		0xdf, 0x02, 0xa9, 0x17, 0xb0, 0x76, 0x35, 0x98, 0x58, 0xa9, 0xe8, 0xa7, 0x18, 0xfa, 0x8b, 0x90,
		0xa6, 0xfe, 0x42, 0x00, 0xdc, 0x63, 0xf2, 0x08, 0xca, 0x40, 0x6a, 0x65, 0x5b, 0x21, 0xe1, 0x2f,
		0x43, 0x9e, 0x49, 0xd5, 0x9d, 0xf5, 0xea, 0x4a, 0x55, 0x4e, 0xcc, 0x9d, 0x87, 0x51, 0xe6, 0x04,
		0x72, 0x34, 0x3c, 0x37, 0xc8, 0x23, 0xfc, 0x91, 0x73, 0x48, 0x62, 0x74, 0x6f, 0x73, 0xb9, 0xaa,
		0xc8, 0x09, 0xff, 0xf6, 0x3a, 0x90, 0xf7, 0xb7, 0x6b, 0x3f, 0x9b, 0x98, 0xfa, 0x5b, 0x09, 0x72,
		0xbe, 0xf6, 0x8b, 0x14, 0x7e, 0xad, 0xd9, 0xb4, 0x5e, 0x50, 0xb5, 0xa6, 0xa1, 0x39, 0x3c, 0x28,
		0x80, 0x8a, 0x2a, 0x44, 0x32, 0xec, 0xa6, 0xfd, 0x4c, 0x8c, 0x7f, 0x5d, 0x02, 0x39, 0xdc, 0xba,
		0x85, 0x0c, 0x94, 0x7e, 0xae, 0x06, 0xbe, 0x26, 0x41, 0x21, 0xd8, 0xaf, 0x85, 0xcc, 0x3b, 0xf3,
		0x73, 0x35, 0xef, 0x0b, 0x12, 0x8c, 0x07, 0xba, 0xb4, 0x5f, 0x28, 0xeb, 0x5e, 0x4d, 0xc2, 0x54,
		0x04, 0x0e, 0x55, 0x78, 0x3b, 0xcb, 0x3a, 0xec, 0xfb, 0x87, 0x99, 0x6b, 0x81, 0x54, 0xcb, 0x1d,
		0xcd, 0x76, 0x79, 0xf7, 0x7b, 0x0f, 0xc8, 0x46, 0x1d, 0x9b, 0xae, 0x71, 0x60, 0x60, 0x9b, 0xbf,
		0x82, 0xb3, 0x1e, 0x77, 0xa2, 0x2b, 0x67, 0x6f, 0xe1, 0xf7, 0x01, 0x6a, 0x5b, 0x8e, 0xe1, 0x1a,
		0xd7, 0xb0, 0x6a, 0x98, 0xe2, 0x7d, 0x9d, 0xf4, 0xbc, 0x29, 0x45, 0x16, 0x23, 0xeb, 0xa6, 0xeb,
		0x69, 0x9b, 0xb8, 0xa1, 0x85, 0xb4, 0x49, 0xee, 0x4b, 0x2a, 0xb2, 0x18, 0xf1, 0xb4, 0xcf, 0x40,
		0xbe, 0x6e, 0x75, 0x48, 0xfb, 0xc0, 0xf4, 0x48, 0xaa, 0x95, 0x94, 0x1c, 0x93, 0x79, 0x2a, 0xbc,
		0xbf, 0xeb, 0x5e, 0x14, 0xe4, 0x95, 0x1c, 0x93, 0x31, 0x95, 0xbb, 0x61, 0x42, 0x6b, 0x34, 0x6c,
		0x42, 0x2e, 0x88, 0x58, 0xd3, 0x5a, 0xf0, 0xc4, 0x54, 0x71, 0xe6, 0x09, 0xc8, 0x08, 0x3f, 0x90,
		0x6a, 0x46, 0x3c, 0xa1, 0xb6, 0xd9, 0x75, 0x4d, 0x62, 0x3e, 0xab, 0x64, 0x4c, 0x31, 0x78, 0x06,
		0xf2, 0x86, 0xa3, 0x76, 0xef, 0x0d, 0x13, 0xa7, 0x13, 0xf3, 0x19, 0x25, 0x67, 0x38, 0xde, 0x45,
		0xd1, 0xdc, 0x1b, 0x09, 0x28, 0x04, 0xef, 0x3d, 0xd1, 0x2a, 0x64, 0x9a, 0x96, 0xae, 0xd1, 0x40,
		0x60, 0x97, 0xee, 0xf3, 0x31, 0x57, 0xa5, 0x0b, 0x1b, 0x5c, 0x5f, 0xf1, 0x90, 0x33, 0xff, 0x28,
		0x41, 0x46, 0x88, 0xd1, 0x29, 0x48, 0xb5, 0x35, 0xf7, 0x90, 0xd2, 0xa5, 0x97, 0x13, 0xb2, 0xa4,
		0xd0, 0x67, 0x22, 0x77, 0xda, 0x9a, 0x49, 0x43, 0x80, 0xcb, 0xc9, 0x33, 0xd9, 0xd7, 0x26, 0xd6,
		0xea, 0xb4, 0x1d, 0xb6, 0x5a, 0x2d, 0x6c, 0xba, 0x8e, 0xd8, 0x57, 0x2e, 0x5f, 0xe1, 0x62, 0x74,
		0x2f, 0x4c, 0xba, 0xb6, 0x66, 0x34, 0x03, 0xba, 0x29, 0xaa, 0x2b, 0x8b, 0x01, 0x4f, 0xb9, 0x0c,
		0xb7, 0x08, 0xde, 0x3a, 0x76, 0x35, 0xfd, 0x10, 0xd7, 0xbb, 0xa0, 0x51, 0x7a, 0xa9, 0x76, 0x33,
		0x57, 0x58, 0xe5, 0xe3, 0x02, 0x3b, 0xf7, 0x3d, 0x09, 0x26, 0x45, 0x03, 0x5f, 0xf7, 0x9c, 0xb5,
		0x09, 0xa0, 0x99, 0xa6, 0xe5, 0xfa, 0xdd, 0xd5, 0x1b, 0xca, 0x3d, 0xb8, 0x85, 0x8a, 0x07, 0x52,
		0x7c, 0x04, 0x33, 0x2d, 0x80, 0xee, 0x48, 0x5f, 0xb7, 0xcd, 0x42, 0x8e, 0x5f, 0x6a, 0xd3, 0x5f,
		0x46, 0xd8, 0x5b, 0x1f, 0x30, 0x11, 0xe9, 0xf4, 0xd1, 0x34, 0xa4, 0xf7, 0x71, 0xc3, 0x30, 0xf9,
		0x55, 0x1b, 0x7b, 0x10, 0x17, 0x78, 0x29, 0xef, 0x02, 0x6f, 0xf9, 0x53, 0x30, 0xa5, 0x5b, 0xad,
		0xb0, 0xb9, 0xcb, 0x72, 0xe8, 0xcd, 0xd3, 0xb9, 0x22, 0x3d, 0x0b, 0xdd, 0xee, 0xec, 0x4b, 0x92,
		0xf4, 0x95, 0x44, 0x72, 0x6d, 0x67, 0xf9, 0x6b, 0x89, 0x99, 0x35, 0x06, 0xdd, 0x11, 0x2b, 0x55,
		0xf0, 0x41, 0x13, 0xeb, 0xc4, 0x7a, 0xf8, 0xf1, 0x5d, 0x70, 0x7f, 0xc3, 0x70, 0x0f, 0x3b, 0xfb,
		0x0b, 0xba, 0xd5, 0x5a, 0x6c, 0x58, 0x0d, 0xab, 0xfb, 0x63, 0x10, 0x79, 0xa2, 0x0f, 0xf4, 0x3f,
		0xfe, 0x83, 0x50, 0xd6, 0x93, 0xce, 0xc4, 0xfe, 0x7a, 0x54, 0xde, 0x82, 0x29, 0xae, 0xac, 0xd2,
		0x1b, 0x69, 0xd6, 0x87, 0xa3, 0x81, 0xb7, 0x12, 0xc5, 0x6f, 0xbc, 0x4d, 0x2b, 0x9d, 0x32, 0xc9,
		0xa1, 0x64, 0x8c, 0x75, 0xea, 0x65, 0x05, 0x6e, 0x0a, 0xf0, 0xb1, 0xa3, 0x89, 0xed, 0x18, 0xc6,
		0xef, 0x70, 0xc6, 0x29, 0x1f, 0x63, 0x8d, 0x43, 0xcb, 0x2b, 0x30, 0x7e, 0x12, 0xae, 0xbf, 0xe3,
		0x5c, 0x79, 0xec, 0x27, 0x59, 0x83, 0x09, 0x4a, 0xa2, 0x77, 0x1c, 0xd7, 0x6a, 0xd1, 0xbc, 0x37,
		0x98, 0xe6, 0xef, 0xdf, 0x66, 0x67, 0xa5, 0x40, 0x60, 0x2b, 0x1e, 0xaa, 0x5c, 0x06, 0x7a, 0x09,
		0x5f, 0xc7, 0x7a, 0x33, 0x86, 0xe1, 0x4d, 0x6e, 0x88, 0xa7, 0x5f, 0x7e, 0x12, 0xa6, 0xc9, 0xff,
		0x34, 0x2d, 0xf9, 0x2d, 0x89, 0xbf, 0x83, 0x29, 0x7e, 0xef, 0x65, 0x76, 0x1c, 0xa7, 0x3c, 0x02,
		0x9f, 0x4d, 0xbe, 0x5d, 0x6c, 0x60, 0xd7, 0xc5, 0xb6, 0xa3, 0x6a, 0xcd, 0x28, 0xf3, 0x7c, 0x6f,
		0xb0, 0xc5, 0xcf, 0xbf, 0x1b, 0xdc, 0xc5, 0x35, 0x86, 0xac, 0x34, 0x9b, 0xe5, 0x3d, 0xb8, 0x39,
		0x22, 0x2a, 0x86, 0xe0, 0x7c, 0x95, 0x73, 0x4e, 0xf7, 0x44, 0x06, 0xa1, 0xdd, 0x01, 0x21, 0xf7,
		0xf6, 0x72, 0x08, 0xce, 0x2f, 0x70, 0x4e, 0xc4, 0xb1, 0x62, 0x4b, 0x09, 0xe3, 0x13, 0x30, 0x79,
		0x0d, 0xdb, 0xfb, 0x96, 0xc3, 0x2f, 0x0e, 0x86, 0xa0, 0x7b, 0x8d, 0xd3, 0x4d, 0x70, 0x20, 0xbd,
		0x46, 0x20, 0x5c, 0x8f, 0x40, 0xe6, 0x40, 0xd3, 0xf1, 0x10, 0x14, 0x5f, 0xe4, 0x14, 0x63, 0x44,
		0x9f, 0x40, 0x2b, 0x90, 0x6f, 0x58, 0xbc, 0x32, 0xc5, 0xc3, 0x5f, 0xe7, 0xf0, 0x9c, 0xc0, 0x70,
		0x8a, 0xb6, 0xd5, 0xee, 0x34, 0x49, 0xd9, 0x8a, 0xa7, 0xf8, 0x7d, 0x41, 0x21, 0x30, 0x9c, 0xe2,
		0x04, 0x6e, 0xfd, 0x92, 0xa0, 0x70, 0x7c, 0xfe, 0x7c, 0x1c, 0x72, 0x96, 0xd9, 0x3c, 0xb2, 0xcc,
		0x61, 0x8c, 0xf8, 0x32, 0x67, 0x00, 0x0e, 0x21, 0x04, 0x97, 0x20, 0x3b, 0xec, 0x46, 0xfc, 0xc1,
		0xbb, 0xe2, 0x78, 0x88, 0x1d, 0x58, 0x83, 0x09, 0x91, 0xa0, 0x0c, 0xcb, 0x1c, 0x82, 0xe2, 0x0f,
		0x39, 0x45, 0xc1, 0x07, 0xe3, 0xcb, 0x70, 0xb1, 0xe3, 0x36, 0xf0, 0x30, 0x24, 0x6f, 0x88, 0x65,
		0x70, 0x08, 0x77, 0xe5, 0x3e, 0x36, 0xf5, 0xc3, 0xe1, 0x18, 0xbe, 0x2a, 0x5c, 0x29, 0x30, 0x84,
		0x62, 0x05, 0xc6, 0x5b, 0x9a, 0xed, 0x1c, 0x6a, 0xcd, 0xa1, 0xb6, 0xe3, 0x8f, 0x38, 0x47, 0xde,
		0x03, 0x71, 0x8f, 0x74, 0xcc, 0x93, 0xd0, 0x7c, 0x4d, 0x78, 0xc4, 0x07, 0xe3, 0x47, 0xcf, 0x71,
		0xe9, 0xdd, 0xcc, 0x49, 0xd8, 0xfe, 0x58, 0x1c, 0x3d, 0x86, 0xdd, 0xf4, 0x33, 0x5e, 0x82, 0xac,
		0x63, 0xbc, 0x34, 0x14, 0xcd, 0x9f, 0x88, 0x9d, 0xa6, 0x00, 0x02, 0x7e, 0x06, 0x6e, 0x89, 0x2c,
		0x13, 0x43, 0x90, 0xfd, 0x29, 0x27, 0x3b, 0x15, 0x51, 0x2a, 0x78, 0x4a, 0x38, 0x29, 0xe5, 0x9f,
		0x89, 0x94, 0x80, 0x43, 0x5c, 0x3b, 0xa4, 0xb3, 0x77, 0xb4, 0x83, 0x93, 0x79, 0xed, 0xcf, 0x85,
		0xd7, 0x18, 0x36, 0xe0, 0xb5, 0x5d, 0x38, 0xc5, 0x19, 0x4f, 0xb6, 0xaf, 0x5f, 0x17, 0x89, 0x95,
		0xa1, 0xf7, 0x82, 0xbb, 0xfb, 0x29, 0x98, 0xf1, 0xdc, 0x29, 0x9a, 0x52, 0x47, 0x6d, 0x69, 0xed,
		0x21, 0x98, 0xbf, 0xc1, 0x99, 0x45, 0xc6, 0xf7, 0xba, 0x5a, 0x67, 0x53, 0x6b, 0x13, 0xf2, 0xa7,
		0xa1, 0x28, 0xc8, 0x3b, 0xa6, 0x8d, 0x75, 0xab, 0x61, 0x1a, 0x2f, 0xe1, 0xfa, 0x10, 0xd4, 0x7f,
		0x11, 0xda, 0xaa, 0x3d, 0x1f, 0x9c, 0x30, 0xaf, 0x83, 0xec, 0xf5, 0x2a, 0xaa, 0xd1, 0x6a, 0x5b,
		0xb6, 0x1b, 0xc3, 0xf8, 0x97, 0x62, 0xa7, 0x3c, 0xdc, 0x3a, 0x85, 0x95, 0xab, 0x50, 0xa0, 0x8f,
		0xc3, 0x86, 0xe4, 0x5f, 0x71, 0xa2, 0xf1, 0x2e, 0x8a, 0x27, 0x0e, 0xdd, 0x6a, 0xb5, 0x35, 0x7b,
		0x98, 0xfc, 0xf7, 0xd7, 0x22, 0x71, 0x70, 0x08, 0x4f, 0x1c, 0xee, 0x51, 0x1b, 0x93, 0x6a, 0x3f,
		0x04, 0xc3, 0x37, 0x45, 0xe2, 0x10, 0x18, 0x4e, 0x21, 0x1a, 0x86, 0x21, 0x28, 0xfe, 0x46, 0x50,
		0x08, 0x0c, 0xa1, 0xf8, 0x64, 0xb7, 0xd0, 0xda, 0xb8, 0x61, 0x38, 0xae, 0xcd, 0x5a, 0xe1, 0xc1,
		0x54, 0xdf, 0x7a, 0x37, 0xd8, 0x84, 0x29, 0x3e, 0x68, 0xf9, 0x09, 0x98, 0x08, 0xb5, 0x18, 0x28,
		0xee, 0x17, 0xfd, 0xe2, 0x67, 0xde, 0xe7, 0xc9, 0x28, 0xd8, 0x61, 0x94, 0x37, 0xc8, 0xbe, 0x07,
		0xfb, 0x80, 0x78, 0xb2, 0x97, 0xdf, 0xf7, 0xb6, 0x3e, 0xd0, 0x06, 0x94, 0x2f, 0xc3, 0x78, 0xa0,
		0x07, 0x88, 0xa7, 0xfa, 0x25, 0x4e, 0x95, 0xf7, 0xb7, 0x00, 0xe5, 0xf3, 0x90, 0x22, 0xf5, 0x3c,
		0x1e, 0xfe, 0xcb, 0x1c, 0x4e, 0xd5, 0xcb, 0x8f, 0x42, 0x46, 0xd4, 0xf1, 0x78, 0xe8, 0xaf, 0x70,
		0xa8, 0x07, 0x21, 0x70, 0x51, 0xc3, 0xe3, 0xe1, 0xbf, 0x2a, 0xe0, 0x02, 0x42, 0xe0, 0xc3, 0xbb,
		0xf0, 0xdb, 0x9f, 0x4b, 0xf1, 0x3c, 0x2c, 0x7c, 0x77, 0x09, 0xc6, 0x78, 0xf1, 0x8e, 0x47, 0x7f,
		0x96, 0x4f, 0x2e, 0x10, 0xe5, 0x87, 0x21, 0x3d, 0xa4, 0xc3, 0x7f, 0x8d, 0x43, 0x99, 0x7e, 0x79,
		0x05, 0x72, 0xbe, 0x82, 0x1d, 0x0f, 0xff, 0x75, 0x0e, 0xf7, 0xa3, 0x88, 0xe9, 0xbc, 0x60, 0xc7,
		0x13, 0xfc, 0x86, 0x30, 0x9d, 0x23, 0x88, 0xdb, 0x44, 0xad, 0x8e, 0x47, 0xff, 0xa6, 0xf0, 0xba,
		0x80, 0x94, 0x1f, 0x87, 0xac, 0x97, 0x7f, 0xe3, 0xf1, 0xbf, 0xc5, 0xf1, 0x5d, 0x0c, 0xf1, 0x80,
		0x2f, 0xff, 0xc7, 0x53, 0xfc, 0xb6, 0xf0, 0x80, 0x0f, 0x45, 0x8e, 0x51, 0xb8, 0xa6, 0xc7, 0x33,
		0xfd, 0x8e, 0x38, 0x46, 0xa1, 0x92, 0x4e, 0x76, 0x93, 0xa6, 0xc1, 0x78, 0x8a, 0xdf, 0x15, 0xbb,
		0x49, 0xf5, 0x89, 0x19, 0xe1, 0x22, 0x19, 0xcf, 0xf1, 0x7b, 0xc2, 0x8c, 0x50, 0x8d, 0x2c, 0xef,
		0x00, 0xea, 0x2d, 0x90, 0xf1, 0x7c, 0xaf, 0x70, 0xbe, 0xc9, 0x9e, 0xfa, 0x58, 0x7e, 0x0a, 0x4e,
		0x45, 0x17, 0xc7, 0x78, 0xd6, 0xcf, 0xbf, 0x1f, 0x7a, 0x9d, 0xf1, 0xd7, 0xc6, 0xf2, 0x6e, 0x37,
		0xcb, 0xfa, 0x0b, 0x63, 0x3c, 0xed, 0xab, 0xef, 0x07, 0x13, 0xad, 0xbf, 0x2e, 0x96, 0x2b, 0x00,
		0xdd, 0x9a, 0x14, 0xcf, 0xf5, 0x1a, 0xe7, 0xf2, 0x81, 0xc8, 0xd1, 0xe0, 0x25, 0x29, 0x1e, 0xff,
		0x45, 0x71, 0x34, 0x38, 0x82, 0x1c, 0x0d, 0x51, 0x8d, 0xe2, 0xd1, 0xaf, 0x8b, 0xa3, 0x21, 0x20,
		0xe5, 0x4b, 0x90, 0x31, 0x3b, 0xcd, 0x26, 0x89, 0x2d, 0x34, 0xf8, 0x23, 0x9b, 0xe2, 0xbf, 0x7c,
		0xc0, 0xc1, 0x02, 0x50, 0x3e, 0x0f, 0x69, 0xdc, 0xda, 0xc7, 0xf5, 0x38, 0xe4, 0xbf, 0x7e, 0x20,
		0xf2, 0x09, 0xd1, 0x2e, 0x3f, 0x0e, 0xc0, 0x5e, 0xa6, 0xe9, 0x6f, 0x2c, 0x31, 0xd8, 0x7f, 0xfb,
		0x80, 0xff, 0x7e, 0xdf, 0x85, 0x74, 0x09, 0xd8, 0xd7, 0x00, 0x83, 0x09, 0xde, 0x0d, 0x12, 0xd0,
		0x17, 0xf0, 0x47, 0x60, 0xec, 0x79, 0xc7, 0x32, 0x5d, 0xad, 0x11, 0x87, 0xfe, 0x77, 0x8e, 0x16,
		0xfa, 0xc4, 0x61, 0x2d, 0xcb, 0xc6, 0xae, 0xd6, 0x70, 0xe2, 0xb0, 0xff, 0xc1, 0xb1, 0x1e, 0x80,
		0x80, 0x75, 0xcd, 0x71, 0x87, 0x59, 0xf7, 0x7f, 0x0a, 0xb0, 0x00, 0x10, 0xa3, 0xc9, 0xff, 0x57,
		0xf1, 0x51, 0x1c, 0xf6, 0x3d, 0x61, 0x34, 0xd7, 0x2f, 0x3f, 0x0a, 0x59, 0xf2, 0x2f, 0xfb, 0xa6,
		0x25, 0x06, 0xfc, 0x5f, 0x1c, 0xdc, 0x45, 0x90, 0x99, 0x1d, 0xb7, 0xee, 0x1a, 0xf1, 0xce, 0xfe,
		0x6f, 0xbe, 0xd3, 0x42, 0xbf, 0x5c, 0x81, 0x9c, 0xe3, 0xd6, 0xeb, 0x1d, 0xde, 0xd1, 0xc4, 0xc0,
		0x7f, 0xfc, 0x81, 0xf7, 0x92, 0xeb, 0x61, 0x96, 0xcf, 0x44, 0xdf, 0xd7, 0xc1, 0x9a, 0xb5, 0x66,
		0xb1, 0x9b, 0x3a, 0xf8, 0x9f, 0xfb, 0x61, 0x56, 0xb7, 0x5a, 0xfb, 0x96, 0xb3, 0x68, 0x62, 0xc3,
		0x3d, 0xc4, 0xf6, 0x62, 0x4b, 0x6b, 0x3b, 0x54, 0x77, 0x89, 0xdf, 0xb3, 0xe5, 0xf8, 0x13, 0x19,
		0x98, 0x39, 0xd9, 0x1d, 0xdd, 0xdc, 0x6d, 0x30, 0x7e, 0xb9, 0x69, 0x69, 0xae, 0x61, 0x36, 0x76,
		0x2c, 0xc3, 0x74, 0x51, 0x1e, 0xa4, 0x03, 0xfa, 0xf3, 0x8c, 0xa4, 0x48, 0x07, 0x73, 0xff, 0x90,
		0x86, 0x2c, 0xbb, 0xde, 0xd9, 0xd4, 0xda, 0xe8, 0xff, 0x43, 0x7e, 0x8b, 0x9f, 0x90, 0x07, 0x97,
		0x2e, 0x3a, 0xde, 0x75, 0xb2, 0x6f, 0xfe, 0x05, 0x4f, 0x7b, 0xc1, 0xaf, 0x4a, 0x7f, 0x8e, 0x5d,
		0x7e, 0xe0, 0x07, 0x6f, 0xcd, 0xde, 0xd7, 0xd7, 0x3e, 0x52, 0x12, 0x17, 0x59, 0x28, 0x2f, 0xec,
		0x19, 0xa6, 0xfb, 0xe0, 0xd2, 0x45, 0x25, 0x30, 0x1f, 0xba, 0x06, 0x19, 0x3e, 0xe0, 0xf0, 0x9f,
		0x19, 0xee, 0xe8, 0x33, 0xb7, 0x50, 0x63, 0xf3, 0x9e, 0x7b, 0xf3, 0xad, 0xd9, 0x91, 0x13, 0xcf,
		0xed, 0xcd, 0x85, 0x3e, 0x0d, 0x39, 0x61, 0xc7, 0x7a, 0xdd, 0xe1, 0x1f, 0xda, 0xde, 0x1d, 0xb3,
		0xec, 0xf5, 0x3a, 0x9f, 0xfd, 0xae, 0x1f, 0xbc, 0x35, 0x3b, 0x37, 0x70, 0xe6, 0x85, 0xbd, 0x8e,
		0x51, 0x57, 0xfc, 0x73, 0xa0, 0xe7, 0x20, 0x49, 0xa6, 0x62, 0x9f, 0xe4, 0xce, 0xf6, 0x99, 0xca,
		0x9b, 0xe2, 0x2c, 0x5f, 0xe0, 0x30, 0xd3, 0x10, 0xde, 0x99, 0xc7, 0x61, 0xb2, 0x67, 0x7b, 0x90,
		0x0c, 0xc9, 0xab, 0xf8, 0x88, 0x7f, 0x85, 0x43, 0xfe, 0x45, 0xd3, 0xdd, 0xaf, 0xcc, 0xa4, 0xf9,
		0x3c, 0xff, 0x74, 0xac, 0x9c, 0xb8, 0x28, 0xcd, 0x5c, 0x82, 0xf1, 0x80, 0x8f, 0x4f, 0x04, 0x7e,
		0x0c, 0xe4, 0xb0, 0x97, 0x4e, 0x84, 0xbf, 0x00, 0x99, 0x0f, 0x83, 0x9b, 0xfb, 0x3e, 0x82, 0xb1,
		0x4a, 0xb3, 0xb9, 0xa9, 0xb5, 0x1d, 0xf4, 0x0c, 0x4c, 0xb2, 0xc6, 0x7d, 0xd7, 0x5a, 0xa5, 0x3f,
		0xec, 0x6c, 0x6a, 0x6d, 0x1e, 0xd0, 0xf7, 0x06, 0xdc, 0xcd, 0x01, 0x0b, 0x3d, 0xda, 0x74, 0x7e,
		0xa5, 0x97, 0x05, 0x3d, 0x09, 0xb2, 0x10, 0xd2, 0xb3, 0x45, 0x98, 0x59, 0xb8, 0x9e, 0x1d, 0xc8,
		0x2c, 0x94, 0x19, 0x71, 0x0f, 0x07, 0x7a, 0x0c, 0x32, 0xeb, 0xa6, 0xfb, 0xd0, 0x12, 0xe1, 0x63,
		0x31, 0x38, 0x17, 0xc9, 0x27, 0x94, 0x18, 0x8f, 0x87, 0xe1, 0xf8, 0x0b, 0xe7, 0x08, 0x3e, 0x35,
		0x18, 0x4f, 0x95, 0xba, 0x78, 0xfa, 0x88, 0x2a, 0x90, 0x25, 0x7b, 0xce, 0x0c, 0x60, 0xdf, 0x78,
		0xdf, 0x1e, 0x49, 0xe0, 0x69, 0x31, 0x86, 0x2e, 0x4a, 0x50, 0x30, 0x1b, 0x46, 0x63, 0x28, 0x7c,
		0x46, 0x74, 0x51, 0x84, 0xa2, 0xe6, 0x59, 0x31, 0x36, 0x80, 0xa2, 0x16, 0xb2, 0xa2, 0xe6, 0xb7,
		0xa2, 0xe6, 0x59, 0x91, 0x89, 0xa1, 0xf0, 0x5b, 0xe1, 0x3d, 0xa3, 0x55, 0x80, 0xcb, 0xc6, 0x8b,
		0xb8, 0xce, 0xcc, 0xc8, 0x46, 0x24, 0x23, 0xc1, 0xd1, 0x55, 0x63, 0x24, 0x3e, 0x1c, 0x5a, 0x83,
		0x5c, 0xed, 0xa0, 0x4b, 0x03, 0xfc, 0x13, 0xf7, 0x48, 0x53, 0x0e, 0x42, 0x3c, 0x7e, 0xa4, 0x67,
		0x0e, 0x5b, 0x52, 0x2e, 0xce, 0x1c, 0xdf, 0x9a, 0x7c, 0xb8, 0xae, 0x39, 0x8c, 0x26, 0x1f, 0x6b,
		0x8e, 0x8f, 0xc7, 0x8f, 0x44, 0x97, 0x60, 0x6c, 0xd9, 0xb2, 0x88, 0x66, 0x71, 0x9c, 0x92, 0x9c,
		0x89, 0x24, 0xe1, 0x3a, 0x8c, 0x40, 0x20, 0xe8, 0xee, 0xd0, 0xd0, 0x27, 0xf0, 0xc2, 0xa0, 0xdd,
		0x11, 0x5a, 0x62, 0x77, 0xc4, 0xb3, 0xff, 0x04, 0x2e, 0x1f, 0xb9, 0x98, 0x34, 0xc9, 0xc5, 0x89,
		0x21, 0x4e, 0xa0, 0x50, 0x0e, 0x9d, 0x40, 0x21, 0x46, 0x35, 0x98, 0x10, 0xb2, 0xaa, 0xd9, 0x21,
		0x39, 0xb8, 0x28, 0xf3, 0xef, 0x6f, 0x07, 0xd1, 0x72, 0x5d, 0xc6, 0x1a, 0x66, 0x40, 0x3b, 0x50,
		0x10, 0xa2, 0x4d, 0x87, 0x2e, 0x7a, 0x32, 0xa2, 0xae, 0x86, 0x39, 0x99, 0x2a, 0xa3, 0x0c, 0xe1,
		0x67, 0x56, 0xe1, 0x54, 0x74, 0xb6, 0x8a, 0xcb, 0x96, 0x92, 0x3f, 0xcb, 0xae, 0xc0, 0x4d, 0x91,
		0x99, 0x29, 0x8e, 0x24, 0x11, 0xaa, 0x13, 0x81, 0x74, 0xe4, 0x07, 0xa7, 0x23, 0xc0, 0xe9, 0x5e,
		0x70, 0x37, 0xc8, 0xfc, 0xe0, 0x64, 0x04, 0x38, 0xe9, 0x07, 0x7f, 0x1c, 0x0a, 0xc1, 0x3c, 0xe4,
		0x47, 0x8f, 0x47, 0xa0, 0xc7, 0x23, 0xd0, 0xd1, 0x73, 0xa7, 0x22, 0xd0, 0xa9, 0x10, 0xba, 0xd6,
		0x77, 0xee, 0xc9, 0x08, 0xf4, 0x64, 0x04, 0x3a, 0x7a, 0x6e, 0x14, 0x81, 0x46, 0x7e, 0xf4, 0xa3,
		0x30, 0x11, 0x4a, 0x39, 0x7e, 0xf8, 0x58, 0x04, 0x7c, 0x2c, 0x54, 0x9b, 0xc3, 0xa9, 0xc6, 0x8f,
		0x9f, 0x88, 0xc0, 0x4f, 0x44, 0x4d, 0x1f, 0x6d, 0xfd, 0x68, 0x04, 0x7c, 0x34, 0x72, 0xfa, 0x68,
		0xbc, 0x1c, 0x81, 0x97, 0xfd, 0xf8, 0x32, 0xe4, 0xfd, 0x59, 0xc5, 0x8f, 0xcd, 0x44, 0x60, 0x33,
		0x61, 0xbf, 0x07, 0x52, 0x4a, 0x5c, 0xa4, 0x67, 0xfb, 0x1c, 0x97, 0x40, 0x1a, 0x39, 0x51, 0x67,
		0xf3, 0x34, 0x4c, 0x47, 0x25, 0x8d, 0x08, 0x8e, 0xb3, 0x7e, 0x8e, 0xc2, 0xd2, 0x74, 0x20, 0x59,
		0x50, 0x5c, 0xa7, 0xe5, 0x67, 0x7e, 0x0e, 0xa6, 0x22, 0x52, 0x47, 0x04, 0xf1, 0x03, 0x7e, 0xe2,
		0xdc, 0xd2, 0x4c, 0x80, 0x38, 0xf0, 0xae, 0xe0, 0x6f, 0xad, 0x7e, 0x38, 0x05, 0x05, 0x9e, 0xa2,
		0xb6, 0xed, 0x3a, 0xb6, 0x71, 0x1d, 0xfd, 0xbf, 0xfe, 0x1d, 0xd6, 0x52, 0x54, 0x6a, 0xe3, 0xb8,
		0x13, 0x34, 0x5a, 0xcf, 0xf5, 0x6d, 0xb4, 0x1e, 0x1c, 0x66, 0x82, 0xb8, 0x7e, 0xab, 0xda, 0xd3,
		0x6f, 0xdd, 0x33, 0x88, 0xb6, 0x5f, 0xdb, 0x55, 0xed, 0x69, 0xbb, 0xe2, 0x68, 0x22, 0xbb, 0xaf,
		0x2b, 0xbd, 0xdd, 0xd7, 0xd9, 0x41, 0x3c, 0xfd, 0x9b, 0xb0, 0x2b, 0xbd, 0x4d, 0x58, 0x2c, 0x53,
		0x74, 0x2f, 0x76, 0xa5, 0xb7, 0x17, 0x1b, 0xc8, 0xd4, 0xbf, 0x25, 0xbb, 0xd2, 0xdb, 0x92, 0xc5,
		0x32, 0x45, 0x77, 0x66, 0x9f, 0x88, 0xe8, 0xcc, 0xee, 0x1d, 0x44, 0x35, 0xa8, 0x41, 0xdb, 0x8a,
		0x6a, 0xd0, 0xee, 0x1b, 0x68, 0xd8, 0xc0, 0x3e, 0xed, 0x13, 0x11, 0x7d, 0x5a, 0xbc, 0x71, 0x7d,
		0xda, 0xb5, 0xad, 0xa8, 0x76, 0x6d, 0x08, 0xe3, 0xfa, 0x75, 0x6d, 0xcb, 0xe1, 0xae, 0x6d, 0x7e,
		0x10, 0x57, 0x74, 0xf3, 0x76, 0xa5, 0xb7, 0x79, 0x3b, 0x1b, 0x7f, 0x16, 0xa3, 0x7a, 0xb8, 0xe7,
		0xfa, 0xf6, 0x70, 0x43, 0x1d, 0xee, 0xb8, 0x56, 0xee, 0xd9, 0x7e, 0xad, 0xdc, 0x03, 0xc3, 0xb0,
		0x0f, 0xee, 0xe8, 0x9e, 0xea, 0xd3, 0xd1, 0x2d, 0x0e, 0x43, 0xfd, 0x51, 0x63, 0xf7, 0x51, 0x63,
		0xf7, 0x51, 0x63, 0xf7, 0x51, 0x63, 0xf7, 0x8b, 0xd1, 0xd8, 0x95, 0x53, 0xaf, 0x7c, 0x79, 0x56,
		0x3a, 0x7b, 0x06, 0xc6, 0xf8, 0xd4, 0x68, 0x14, 0x12, 0x9b, 0x15, 0x79, 0x84, 0xfe, 0x5d, 0x96,
		0x25, 0xfa, 0x77, 0x45, 0x4e, 0x2c, 0x6f, 0xbc, 0x79, 0xa3, 0x34, 0xf2, 0xdd, 0x1b, 0xa5, 0x91,
		0xef, 0xdf, 0x28, 0x8d, 0xfc, 0xe8, 0x46, 0x49, 0x7a, 0xe7, 0x46, 0x49, 0x7a, 0xef, 0x46, 0x49,
		0xfa, 0xc9, 0x8d, 0x92, 0x74, 0xfd, 0xb8, 0x24, 0x7d, 0xf5, 0xb8, 0x24, 0x7d, 0xfd, 0xb8, 0x24,
		0x7d, 0xeb, 0xb8, 0x24, 0x7d, 0xfb, 0xb8, 0x24, 0xbd, 0x79, 0x5c, 0x1a, 0xf9, 0xee, 0x71, 0x69,
		0xe4, 0x47, 0xc7, 0x25, 0xe9, 0x9d, 0xe3, 0xd2, 0xc8, 0x7b, 0xc7, 0x25, 0xe9, 0x27, 0xc7, 0xa5,
		0x91, 0xeb, 0xff, 0x54, 0x1a, 0xf9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0x86, 0x85, 0xf7,
		0x72, 0x44, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (x MapEnum) String() string {
	s, ok := MapEnum_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *FloatingPoint) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FloatingPoint)
	if !ok {
		that2, ok := that.(FloatingPoint)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FloatingPoint")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FloatingPoint but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FloatingPoint but is not nil && this == nil")
	}
	if this.F != nil && that1.F != nil {
		if *this.F != *that1.F {
			return fmt.Errorf("F this(%v) Not Equal that(%v)", *this.F, *that1.F)
		}
	} else if this.F != nil {
		return fmt.Errorf("this.F == nil && that.F != nil")
	} else if that1.F != nil {
		return fmt.Errorf("F this(%v) Not Equal that(%v)", this.F, that1.F)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FloatingPoint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FloatingPoint)
	if !ok {
		that2, ok := that.(FloatingPoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.F != nil && that1.F != nil {
		if *this.F != *that1.F {
			return false
		}
	} else if this.F != nil {
		return false
	} else if that1.F != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomMap) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomMap)
	if !ok {
		that2, ok := that.(CustomMap)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomMap")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomMap but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomMap but is not nil && this == nil")
	}
	if len(this.Nullable128S) != len(that1.Nullable128S) {
		return fmt.Errorf("Nullable128S this(%v) Not Equal that(%v)", len(this.Nullable128S), len(that1.Nullable128S))
	}
	for i := range this.Nullable128S {
		if !this.Nullable128S[i].Equal(*that1.Nullable128S[i]) { //nullable
			return fmt.Errorf("Nullable128S this[%v](%v) Not Equal that[%v](%v)", i, this.Nullable128S[i], i, that1.Nullable128S[i])
		}
	}
	if len(this.Uint128S) != len(that1.Uint128S) {
		return fmt.Errorf("Uint128S this(%v) Not Equal that(%v)", len(this.Uint128S), len(that1.Uint128S))
	}
	for i := range this.Uint128S {
		if !this.Uint128S[i].Equal(that1.Uint128S[i]) { //not nullable
			return fmt.Errorf("Uint128S this[%v](%v) Not Equal that[%v](%v)", i, this.Uint128S[i], i, that1.Uint128S[i])
		}
	}
	if len(this.NullableIds) != len(that1.NullableIds) {
		return fmt.Errorf("NullableIds this(%v) Not Equal that(%v)", len(this.NullableIds), len(that1.NullableIds))
	}
	for i := range this.NullableIds {
		if !this.NullableIds[i].Equal(*that1.NullableIds[i]) { //nullable
			return fmt.Errorf("NullableIds this[%v](%v) Not Equal that[%v](%v)", i, this.NullableIds[i], i, that1.NullableIds[i])
		}
	}
	if len(this.Ids) != len(that1.Ids) {
		return fmt.Errorf("Ids this(%v) Not Equal that(%v)", len(this.Ids), len(that1.Ids))
	}
	for i := range this.Ids {
		if !this.Ids[i].Equal(that1.Ids[i]) { //not nullable
			return fmt.Errorf("Ids this[%v](%v) Not Equal that[%v](%v)", i, this.Ids[i], i, that1.Ids[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CustomMap) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomMap)
	if !ok {
		that2, ok := that.(CustomMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Nullable128S) != len(that1.Nullable128S) {
		return false
	}
	for i := range this.Nullable128S {
		if !this.Nullable128S[i].Equal(*that1.Nullable128S[i]) { //nullable
			return false
		}
	}
	if len(this.Uint128S) != len(that1.Uint128S) {
		return false
	}
	for i := range this.Uint128S {
		if !this.Uint128S[i].Equal(that1.Uint128S[i]) { //not nullable
			return false
		}
	}
	if len(this.NullableIds) != len(that1.NullableIds) {
		return false
	}
	for i := range this.NullableIds {
		if !this.NullableIds[i].Equal(*that1.NullableIds[i]) { //nullable
			return false
		}
	}
	if len(this.Ids) != len(that1.Ids) {
		return false
	}
	for i := range this.Ids {
		if !this.Ids[i].Equal(that1.Ids[i]) { //not nullable
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AllMaps) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllMaps)
	if !ok {
		that2, ok := that.(AllMaps)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllMaps")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllMaps but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllMaps but is not nil && this == nil")
	}
	if len(this.StringToDoubleMap) != len(that1.StringToDoubleMap) {
		return fmt.Errorf("StringToDoubleMap this(%v) Not Equal that(%v)", len(this.StringToDoubleMap), len(that1.StringToDoubleMap))
	}
	for i := range this.StringToDoubleMap {
		if this.StringToDoubleMap[i] != that1.StringToDoubleMap[i] {
			return fmt.Errorf("StringToDoubleMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToDoubleMap[i], i, that1.StringToDoubleMap[i])
		}
	}
	if len(this.StringToFloatMap) != len(that1.StringToFloatMap) {
		return fmt.Errorf("StringToFloatMap this(%v) Not Equal that(%v)", len(this.StringToFloatMap), len(that1.StringToFloatMap))
	}
	for i := range this.StringToFloatMap {
		if this.StringToFloatMap[i] != that1.StringToFloatMap[i] {
			return fmt.Errorf("StringToFloatMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToFloatMap[i], i, that1.StringToFloatMap[i])
		}
	}
	if len(this.Int32Map) != len(that1.Int32Map) {
		return fmt.Errorf("Int32Map this(%v) Not Equal that(%v)", len(this.Int32Map), len(that1.Int32Map))
	}
	for i := range this.Int32Map {
		if this.Int32Map[i] != that1.Int32Map[i] {
			return fmt.Errorf("Int32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Int32Map[i], i, that1.Int32Map[i])
		}
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return fmt.Errorf("Int64Map this(%v) Not Equal that(%v)", len(this.Int64Map), len(that1.Int64Map))
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return fmt.Errorf("Int64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Int64Map[i], i, that1.Int64Map[i])
		}
	}
	if len(this.Uint32Map) != len(that1.Uint32Map) {
		return fmt.Errorf("Uint32Map this(%v) Not Equal that(%v)", len(this.Uint32Map), len(that1.Uint32Map))
	}
	for i := range this.Uint32Map {
		if this.Uint32Map[i] != that1.Uint32Map[i] {
			return fmt.Errorf("Uint32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Uint32Map[i], i, that1.Uint32Map[i])
		}
	}
	if len(this.Uint64Map) != len(that1.Uint64Map) {
		return fmt.Errorf("Uint64Map this(%v) Not Equal that(%v)", len(this.Uint64Map), len(that1.Uint64Map))
	}
	for i := range this.Uint64Map {
		if this.Uint64Map[i] != that1.Uint64Map[i] {
			return fmt.Errorf("Uint64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Uint64Map[i], i, that1.Uint64Map[i])
		}
	}
	if len(this.Sint32Map) != len(that1.Sint32Map) {
		return fmt.Errorf("Sint32Map this(%v) Not Equal that(%v)", len(this.Sint32Map), len(that1.Sint32Map))
	}
	for i := range this.Sint32Map {
		if this.Sint32Map[i] != that1.Sint32Map[i] {
			return fmt.Errorf("Sint32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sint32Map[i], i, that1.Sint32Map[i])
		}
	}
	if len(this.Sint64Map) != len(that1.Sint64Map) {
		return fmt.Errorf("Sint64Map this(%v) Not Equal that(%v)", len(this.Sint64Map), len(that1.Sint64Map))
	}
	for i := range this.Sint64Map {
		if this.Sint64Map[i] != that1.Sint64Map[i] {
			return fmt.Errorf("Sint64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sint64Map[i], i, that1.Sint64Map[i])
		}
	}
	if len(this.Fixed32Map) != len(that1.Fixed32Map) {
		return fmt.Errorf("Fixed32Map this(%v) Not Equal that(%v)", len(this.Fixed32Map), len(that1.Fixed32Map))
	}
	for i := range this.Fixed32Map {
		if this.Fixed32Map[i] != that1.Fixed32Map[i] {
			return fmt.Errorf("Fixed32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Fixed32Map[i], i, that1.Fixed32Map[i])
		}
	}
	if len(this.Sfixed32Map) != len(that1.Sfixed32Map) {
		return fmt.Errorf("Sfixed32Map this(%v) Not Equal that(%v)", len(this.Sfixed32Map), len(that1.Sfixed32Map))
	}
	for i := range this.Sfixed32Map {
		if this.Sfixed32Map[i] != that1.Sfixed32Map[i] {
			return fmt.Errorf("Sfixed32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sfixed32Map[i], i, that1.Sfixed32Map[i])
		}
	}
	if len(this.Fixed64Map) != len(that1.Fixed64Map) {
		return fmt.Errorf("Fixed64Map this(%v) Not Equal that(%v)", len(this.Fixed64Map), len(that1.Fixed64Map))
	}
	for i := range this.Fixed64Map {
		if this.Fixed64Map[i] != that1.Fixed64Map[i] {
			return fmt.Errorf("Fixed64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Fixed64Map[i], i, that1.Fixed64Map[i])
		}
	}
	if len(this.Sfixed64Map) != len(that1.Sfixed64Map) {
		return fmt.Errorf("Sfixed64Map this(%v) Not Equal that(%v)", len(this.Sfixed64Map), len(that1.Sfixed64Map))
	}
	for i := range this.Sfixed64Map {
		if this.Sfixed64Map[i] != that1.Sfixed64Map[i] {
			return fmt.Errorf("Sfixed64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sfixed64Map[i], i, that1.Sfixed64Map[i])
		}
	}
	if len(this.BoolMap) != len(that1.BoolMap) {
		return fmt.Errorf("BoolMap this(%v) Not Equal that(%v)", len(this.BoolMap), len(that1.BoolMap))
	}
	for i := range this.BoolMap {
		if this.BoolMap[i] != that1.BoolMap[i] {
			return fmt.Errorf("BoolMap this[%v](%v) Not Equal that[%v](%v)", i, this.BoolMap[i], i, that1.BoolMap[i])
		}
	}
	if len(this.StringMap) != len(that1.StringMap) {
		return fmt.Errorf("StringMap this(%v) Not Equal that(%v)", len(this.StringMap), len(that1.StringMap))
	}
	for i := range this.StringMap {
		if this.StringMap[i] != that1.StringMap[i] {
			return fmt.Errorf("StringMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringMap[i], i, that1.StringMap[i])
		}
	}
	if len(this.StringToBytesMap) != len(that1.StringToBytesMap) {
		return fmt.Errorf("StringToBytesMap this(%v) Not Equal that(%v)", len(this.StringToBytesMap), len(that1.StringToBytesMap))
	}
	for i := range this.StringToBytesMap {
		if !bytes.Equal(this.StringToBytesMap[i], that1.StringToBytesMap[i]) {
			return fmt.Errorf("StringToBytesMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToBytesMap[i], i, that1.StringToBytesMap[i])
		}
	}
	if len(this.StringToEnumMap) != len(that1.StringToEnumMap) {
		return fmt.Errorf("StringToEnumMap this(%v) Not Equal that(%v)", len(this.StringToEnumMap), len(that1.StringToEnumMap))
	}
	for i := range this.StringToEnumMap {
		if this.StringToEnumMap[i] != that1.StringToEnumMap[i] {
			return fmt.Errorf("StringToEnumMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToEnumMap[i], i, that1.StringToEnumMap[i])
		}
	}
	if len(this.StringToMsgMap) != len(that1.StringToMsgMap) {
		return fmt.Errorf("StringToMsgMap this(%v) Not Equal that(%v)", len(this.StringToMsgMap), len(that1.StringToMsgMap))
	}
	for i := range this.StringToMsgMap {
		if !this.StringToMsgMap[i].Equal(that1.StringToMsgMap[i]) {
			return fmt.Errorf("StringToMsgMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToMsgMap[i], i, that1.StringToMsgMap[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AllMaps) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllMaps)
	if !ok {
		that2, ok := that.(AllMaps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.StringToDoubleMap) != len(that1.StringToDoubleMap) {
		return false
	}
	for i := range this.StringToDoubleMap {
		if this.StringToDoubleMap[i] != that1.StringToDoubleMap[i] {
			return false
		}
	}
	if len(this.StringToFloatMap) != len(that1.StringToFloatMap) {
		return false
	}
	for i := range this.StringToFloatMap {
		if this.StringToFloatMap[i] != that1.StringToFloatMap[i] {
			return false
		}
	}
	if len(this.Int32Map) != len(that1.Int32Map) {
		return false
	}
	for i := range this.Int32Map {
		if this.Int32Map[i] != that1.Int32Map[i] {
			return false
		}
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return false
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return false
		}
	}
	if len(this.Uint32Map) != len(that1.Uint32Map) {
		return false
	}
	for i := range this.Uint32Map {
		if this.Uint32Map[i] != that1.Uint32Map[i] {
			return false
		}
	}
	if len(this.Uint64Map) != len(that1.Uint64Map) {
		return false
	}
	for i := range this.Uint64Map {
		if this.Uint64Map[i] != that1.Uint64Map[i] {
			return false
		}
	}
	if len(this.Sint32Map) != len(that1.Sint32Map) {
		return false
	}
	for i := range this.Sint32Map {
		if this.Sint32Map[i] != that1.Sint32Map[i] {
			return false
		}
	}
	if len(this.Sint64Map) != len(that1.Sint64Map) {
		return false
	}
	for i := range this.Sint64Map {
		if this.Sint64Map[i] != that1.Sint64Map[i] {
			return false
		}
	}
	if len(this.Fixed32Map) != len(that1.Fixed32Map) {
		return false
	}
	for i := range this.Fixed32Map {
		if this.Fixed32Map[i] != that1.Fixed32Map[i] {
			return false
		}
	}
	if len(this.Sfixed32Map) != len(that1.Sfixed32Map) {
		return false
	}
	for i := range this.Sfixed32Map {
		if this.Sfixed32Map[i] != that1.Sfixed32Map[i] {
			return false
		}
	}
	if len(this.Fixed64Map) != len(that1.Fixed64Map) {
		return false
	}
	for i := range this.Fixed64Map {
		if this.Fixed64Map[i] != that1.Fixed64Map[i] {
			return false
		}
	}
	if len(this.Sfixed64Map) != len(that1.Sfixed64Map) {
		return false
	}
	for i := range this.Sfixed64Map {
		if this.Sfixed64Map[i] != that1.Sfixed64Map[i] {
			return false
		}
	}
	if len(this.BoolMap) != len(that1.BoolMap) {
		return false
	}
	for i := range this.BoolMap {
		if this.BoolMap[i] != that1.BoolMap[i] {
			return false
		}
	}
	if len(this.StringMap) != len(that1.StringMap) {
		return false
	}
	for i := range this.StringMap {
		if this.StringMap[i] != that1.StringMap[i] {
			return false
		}
	}
	if len(this.StringToBytesMap) != len(that1.StringToBytesMap) {
		return false
	}
	for i := range this.StringToBytesMap {
		if !bytes.Equal(this.StringToBytesMap[i], that1.StringToBytesMap[i]) {
			return false
		}
	}
	if len(this.StringToEnumMap) != len(that1.StringToEnumMap) {
		return false
	}
	for i := range this.StringToEnumMap {
		if this.StringToEnumMap[i] != that1.StringToEnumMap[i] {
			return false
		}
	}
	if len(this.StringToMsgMap) != len(that1.StringToMsgMap) {
		return false
	}
	for i := range this.StringToMsgMap {
		if !this.StringToMsgMap[i].Equal(that1.StringToMsgMap[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AllMapsOrdered) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllMapsOrdered)
	if !ok {
		that2, ok := that.(AllMapsOrdered)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllMapsOrdered")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllMapsOrdered but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllMapsOrdered but is not nil && this == nil")
	}
	if len(this.StringToDoubleMap) != len(that1.StringToDoubleMap) {
		return fmt.Errorf("StringToDoubleMap this(%v) Not Equal that(%v)", len(this.StringToDoubleMap), len(that1.StringToDoubleMap))
	}
	for i := range this.StringToDoubleMap {
		if this.StringToDoubleMap[i] != that1.StringToDoubleMap[i] {
			return fmt.Errorf("StringToDoubleMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToDoubleMap[i], i, that1.StringToDoubleMap[i])
		}
	}
	if len(this.StringToFloatMap) != len(that1.StringToFloatMap) {
		return fmt.Errorf("StringToFloatMap this(%v) Not Equal that(%v)", len(this.StringToFloatMap), len(that1.StringToFloatMap))
	}
	for i := range this.StringToFloatMap {
		if this.StringToFloatMap[i] != that1.StringToFloatMap[i] {
			return fmt.Errorf("StringToFloatMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToFloatMap[i], i, that1.StringToFloatMap[i])
		}
	}
	if len(this.Int32Map) != len(that1.Int32Map) {
		return fmt.Errorf("Int32Map this(%v) Not Equal that(%v)", len(this.Int32Map), len(that1.Int32Map))
	}
	for i := range this.Int32Map {
		if this.Int32Map[i] != that1.Int32Map[i] {
			return fmt.Errorf("Int32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Int32Map[i], i, that1.Int32Map[i])
		}
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return fmt.Errorf("Int64Map this(%v) Not Equal that(%v)", len(this.Int64Map), len(that1.Int64Map))
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return fmt.Errorf("Int64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Int64Map[i], i, that1.Int64Map[i])
		}
	}
	if len(this.Uint32Map) != len(that1.Uint32Map) {
		return fmt.Errorf("Uint32Map this(%v) Not Equal that(%v)", len(this.Uint32Map), len(that1.Uint32Map))
	}
	for i := range this.Uint32Map {
		if this.Uint32Map[i] != that1.Uint32Map[i] {
			return fmt.Errorf("Uint32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Uint32Map[i], i, that1.Uint32Map[i])
		}
	}
	if len(this.Uint64Map) != len(that1.Uint64Map) {
		return fmt.Errorf("Uint64Map this(%v) Not Equal that(%v)", len(this.Uint64Map), len(that1.Uint64Map))
	}
	for i := range this.Uint64Map {
		if this.Uint64Map[i] != that1.Uint64Map[i] {
			return fmt.Errorf("Uint64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Uint64Map[i], i, that1.Uint64Map[i])
		}
	}
	if len(this.Sint32Map) != len(that1.Sint32Map) {
		return fmt.Errorf("Sint32Map this(%v) Not Equal that(%v)", len(this.Sint32Map), len(that1.Sint32Map))
	}
	for i := range this.Sint32Map {
		if this.Sint32Map[i] != that1.Sint32Map[i] {
			return fmt.Errorf("Sint32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sint32Map[i], i, that1.Sint32Map[i])
		}
	}
	if len(this.Sint64Map) != len(that1.Sint64Map) {
		return fmt.Errorf("Sint64Map this(%v) Not Equal that(%v)", len(this.Sint64Map), len(that1.Sint64Map))
	}
	for i := range this.Sint64Map {
		if this.Sint64Map[i] != that1.Sint64Map[i] {
			return fmt.Errorf("Sint64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sint64Map[i], i, that1.Sint64Map[i])
		}
	}
	if len(this.Fixed32Map) != len(that1.Fixed32Map) {
		return fmt.Errorf("Fixed32Map this(%v) Not Equal that(%v)", len(this.Fixed32Map), len(that1.Fixed32Map))
	}
	for i := range this.Fixed32Map {
		if this.Fixed32Map[i] != that1.Fixed32Map[i] {
			return fmt.Errorf("Fixed32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Fixed32Map[i], i, that1.Fixed32Map[i])
		}
	}
	if len(this.Sfixed32Map) != len(that1.Sfixed32Map) {
		return fmt.Errorf("Sfixed32Map this(%v) Not Equal that(%v)", len(this.Sfixed32Map), len(that1.Sfixed32Map))
	}
	for i := range this.Sfixed32Map {
		if this.Sfixed32Map[i] != that1.Sfixed32Map[i] {
			return fmt.Errorf("Sfixed32Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sfixed32Map[i], i, that1.Sfixed32Map[i])
		}
	}
	if len(this.Fixed64Map) != len(that1.Fixed64Map) {
		return fmt.Errorf("Fixed64Map this(%v) Not Equal that(%v)", len(this.Fixed64Map), len(that1.Fixed64Map))
	}
	for i := range this.Fixed64Map {
		if this.Fixed64Map[i] != that1.Fixed64Map[i] {
			return fmt.Errorf("Fixed64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Fixed64Map[i], i, that1.Fixed64Map[i])
		}
	}
	if len(this.Sfixed64Map) != len(that1.Sfixed64Map) {
		return fmt.Errorf("Sfixed64Map this(%v) Not Equal that(%v)", len(this.Sfixed64Map), len(that1.Sfixed64Map))
	}
	for i := range this.Sfixed64Map {
		if this.Sfixed64Map[i] != that1.Sfixed64Map[i] {
			return fmt.Errorf("Sfixed64Map this[%v](%v) Not Equal that[%v](%v)", i, this.Sfixed64Map[i], i, that1.Sfixed64Map[i])
		}
	}
	if len(this.BoolMap) != len(that1.BoolMap) {
		return fmt.Errorf("BoolMap this(%v) Not Equal that(%v)", len(this.BoolMap), len(that1.BoolMap))
	}
	for i := range this.BoolMap {
		if this.BoolMap[i] != that1.BoolMap[i] {
			return fmt.Errorf("BoolMap this[%v](%v) Not Equal that[%v](%v)", i, this.BoolMap[i], i, that1.BoolMap[i])
		}
	}
	if len(this.StringMap) != len(that1.StringMap) {
		return fmt.Errorf("StringMap this(%v) Not Equal that(%v)", len(this.StringMap), len(that1.StringMap))
	}
	for i := range this.StringMap {
		if this.StringMap[i] != that1.StringMap[i] {
			return fmt.Errorf("StringMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringMap[i], i, that1.StringMap[i])
		}
	}
	if len(this.StringToBytesMap) != len(that1.StringToBytesMap) {
		return fmt.Errorf("StringToBytesMap this(%v) Not Equal that(%v)", len(this.StringToBytesMap), len(that1.StringToBytesMap))
	}
	for i := range this.StringToBytesMap {
		if !bytes.Equal(this.StringToBytesMap[i], that1.StringToBytesMap[i]) {
			return fmt.Errorf("StringToBytesMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToBytesMap[i], i, that1.StringToBytesMap[i])
		}
	}
	if len(this.StringToEnumMap) != len(that1.StringToEnumMap) {
		return fmt.Errorf("StringToEnumMap this(%v) Not Equal that(%v)", len(this.StringToEnumMap), len(that1.StringToEnumMap))
	}
	for i := range this.StringToEnumMap {
		if this.StringToEnumMap[i] != that1.StringToEnumMap[i] {
			return fmt.Errorf("StringToEnumMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToEnumMap[i], i, that1.StringToEnumMap[i])
		}
	}
	if len(this.StringToMsgMap) != len(that1.StringToMsgMap) {
		return fmt.Errorf("StringToMsgMap this(%v) Not Equal that(%v)", len(this.StringToMsgMap), len(that1.StringToMsgMap))
	}
	for i := range this.StringToMsgMap {
		if !this.StringToMsgMap[i].Equal(that1.StringToMsgMap[i]) {
			return fmt.Errorf("StringToMsgMap this[%v](%v) Not Equal that[%v](%v)", i, this.StringToMsgMap[i], i, that1.StringToMsgMap[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AllMapsOrdered) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AllMapsOrdered)
	if !ok {
		that2, ok := that.(AllMapsOrdered)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.StringToDoubleMap) != len(that1.StringToDoubleMap) {
		return false
	}
	for i := range this.StringToDoubleMap {
		if this.StringToDoubleMap[i] != that1.StringToDoubleMap[i] {
			return false
		}
	}
	if len(this.StringToFloatMap) != len(that1.StringToFloatMap) {
		return false
	}
	for i := range this.StringToFloatMap {
		if this.StringToFloatMap[i] != that1.StringToFloatMap[i] {
			return false
		}
	}
	if len(this.Int32Map) != len(that1.Int32Map) {
		return false
	}
	for i := range this.Int32Map {
		if this.Int32Map[i] != that1.Int32Map[i] {
			return false
		}
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return false
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return false
		}
	}
	if len(this.Uint32Map) != len(that1.Uint32Map) {
		return false
	}
	for i := range this.Uint32Map {
		if this.Uint32Map[i] != that1.Uint32Map[i] {
			return false
		}
	}
	if len(this.Uint64Map) != len(that1.Uint64Map) {
		return false
	}
	for i := range this.Uint64Map {
		if this.Uint64Map[i] != that1.Uint64Map[i] {
			return false
		}
	}
	if len(this.Sint32Map) != len(that1.Sint32Map) {
		return false
	}
	for i := range this.Sint32Map {
		if this.Sint32Map[i] != that1.Sint32Map[i] {
			return false
		}
	}
	if len(this.Sint64Map) != len(that1.Sint64Map) {
		return false
	}
	for i := range this.Sint64Map {
		if this.Sint64Map[i] != that1.Sint64Map[i] {
			return false
		}
	}
	if len(this.Fixed32Map) != len(that1.Fixed32Map) {
		return false
	}
	for i := range this.Fixed32Map {
		if this.Fixed32Map[i] != that1.Fixed32Map[i] {
			return false
		}
	}
	if len(this.Sfixed32Map) != len(that1.Sfixed32Map) {
		return false
	}
	for i := range this.Sfixed32Map {
		if this.Sfixed32Map[i] != that1.Sfixed32Map[i] {
			return false
		}
	}
	if len(this.Fixed64Map) != len(that1.Fixed64Map) {
		return false
	}
	for i := range this.Fixed64Map {
		if this.Fixed64Map[i] != that1.Fixed64Map[i] {
			return false
		}
	}
	if len(this.Sfixed64Map) != len(that1.Sfixed64Map) {
		return false
	}
	for i := range this.Sfixed64Map {
		if this.Sfixed64Map[i] != that1.Sfixed64Map[i] {
			return false
		}
	}
	if len(this.BoolMap) != len(that1.BoolMap) {
		return false
	}
	for i := range this.BoolMap {
		if this.BoolMap[i] != that1.BoolMap[i] {
			return false
		}
	}
	if len(this.StringMap) != len(that1.StringMap) {
		return false
	}
	for i := range this.StringMap {
		if this.StringMap[i] != that1.StringMap[i] {
			return false
		}
	}
	if len(this.StringToBytesMap) != len(that1.StringToBytesMap) {
		return false
	}
	for i := range this.StringToBytesMap {
		if !bytes.Equal(this.StringToBytesMap[i], that1.StringToBytesMap[i]) {
			return false
		}
	}
	if len(this.StringToEnumMap) != len(that1.StringToEnumMap) {
		return false
	}
	for i := range this.StringToEnumMap {
		if this.StringToEnumMap[i] != that1.StringToEnumMap[i] {
			return false
		}
	}
	if len(this.StringToMsgMap) != len(that1.StringToMsgMap) {
		return false
	}
	for i := range this.StringToMsgMap {
		if !this.StringToMsgMap[i].Equal(that1.StringToMsgMap[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type FloatingPointFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetF() *float64
}

func (this *FloatingPoint) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *FloatingPoint) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewFloatingPointFromFace(this)
}

func (this *FloatingPoint) GetF() *float64 {
	return this.F
}

func NewFloatingPointFromFace(that FloatingPointFace) *FloatingPoint {
	this := &FloatingPoint{}
	this.F = that.GetF()
	return this
}

type CustomMapFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetNullable128S() map[string]*github_com_gogo_protobuf_test_custom.Uint128
	GetUint128S() map[string]github_com_gogo_protobuf_test_custom.Uint128
	GetNullableIds() map[string]*github_com_gogo_protobuf_test.Uuid
	GetIds() map[string]github_com_gogo_protobuf_test.Uuid
}

func (this *CustomMap) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *CustomMap) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCustomMapFromFace(this)
}

func (this *CustomMap) GetNullable128S() map[string]*github_com_gogo_protobuf_test_custom.Uint128 {
	return this.Nullable128S
}

func (this *CustomMap) GetUint128S() map[string]github_com_gogo_protobuf_test_custom.Uint128 {
	return this.Uint128S
}

func (this *CustomMap) GetNullableIds() map[string]*github_com_gogo_protobuf_test.Uuid {
	return this.NullableIds
}

func (this *CustomMap) GetIds() map[string]github_com_gogo_protobuf_test.Uuid {
	return this.Ids
}

func NewCustomMapFromFace(that CustomMapFace) *CustomMap {
	this := &CustomMap{}
	this.Nullable128S = that.GetNullable128S()
	this.Uint128S = that.GetUint128S()
	this.NullableIds = that.GetNullableIds()
	this.Ids = that.GetIds()
	return this
}

type AllMapsFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetStringToDoubleMap() map[string]float64
	GetStringToFloatMap() map[string]float32
	GetInt32Map() map[int32]int32
	GetInt64Map() map[int64]int64
	GetUint32Map() map[uint32]uint32
	GetUint64Map() map[uint64]uint64
	GetSint32Map() map[int32]int32
	GetSint64Map() map[int64]int64
	GetFixed32Map() map[uint32]uint32
	GetSfixed32Map() map[int32]int32
	GetFixed64Map() map[uint64]uint64
	GetSfixed64Map() map[int64]int64
	GetBoolMap() map[bool]bool
	GetStringMap() map[string]string
	GetStringToBytesMap() map[string][]byte
	GetStringToEnumMap() map[string]MapEnum
	GetStringToMsgMap() map[string]*FloatingPoint
}

func (this *AllMaps) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *AllMaps) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewAllMapsFromFace(this)
}

func (this *AllMaps) GetStringToDoubleMap() map[string]float64 {
	return this.StringToDoubleMap
}

func (this *AllMaps) GetStringToFloatMap() map[string]float32 {
	return this.StringToFloatMap
}

func (this *AllMaps) GetInt32Map() map[int32]int32 {
	return this.Int32Map
}

func (this *AllMaps) GetInt64Map() map[int64]int64 {
	return this.Int64Map
}

func (this *AllMaps) GetUint32Map() map[uint32]uint32 {
	return this.Uint32Map
}

func (this *AllMaps) GetUint64Map() map[uint64]uint64 {
	return this.Uint64Map
}

func (this *AllMaps) GetSint32Map() map[int32]int32 {
	return this.Sint32Map
}

func (this *AllMaps) GetSint64Map() map[int64]int64 {
	return this.Sint64Map
}

func (this *AllMaps) GetFixed32Map() map[uint32]uint32 {
	return this.Fixed32Map
}

func (this *AllMaps) GetSfixed32Map() map[int32]int32 {
	return this.Sfixed32Map
}

func (this *AllMaps) GetFixed64Map() map[uint64]uint64 {
	return this.Fixed64Map
}

func (this *AllMaps) GetSfixed64Map() map[int64]int64 {
	return this.Sfixed64Map
}

func (this *AllMaps) GetBoolMap() map[bool]bool {
	return this.BoolMap
}

func (this *AllMaps) GetStringMap() map[string]string {
	return this.StringMap
}

func (this *AllMaps) GetStringToBytesMap() map[string][]byte {
	return this.StringToBytesMap
}

func (this *AllMaps) GetStringToEnumMap() map[string]MapEnum {
	return this.StringToEnumMap
}

func (this *AllMaps) GetStringToMsgMap() map[string]*FloatingPoint {
	return this.StringToMsgMap
}

func NewAllMapsFromFace(that AllMapsFace) *AllMaps {
	this := &AllMaps{}
	this.StringToDoubleMap = that.GetStringToDoubleMap()
	this.StringToFloatMap = that.GetStringToFloatMap()
	this.Int32Map = that.GetInt32Map()
	this.Int64Map = that.GetInt64Map()
	this.Uint32Map = that.GetUint32Map()
	this.Uint64Map = that.GetUint64Map()
	this.Sint32Map = that.GetSint32Map()
	this.Sint64Map = that.GetSint64Map()
	this.Fixed32Map = that.GetFixed32Map()
	this.Sfixed32Map = that.GetSfixed32Map()
	this.Fixed64Map = that.GetFixed64Map()
	this.Sfixed64Map = that.GetSfixed64Map()
	this.BoolMap = that.GetBoolMap()
	this.StringMap = that.GetStringMap()
	this.StringToBytesMap = that.GetStringToBytesMap()
	this.StringToEnumMap = that.GetStringToEnumMap()
	this.StringToMsgMap = that.GetStringToMsgMap()
	return this
}

type AllMapsOrderedFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetStringToDoubleMap() map[string]float64
	GetStringToFloatMap() map[string]float32
	GetInt32Map() map[int32]int32
	GetInt64Map() map[int64]int64
	GetUint32Map() map[uint32]uint32
	GetUint64Map() map[uint64]uint64
	GetSint32Map() map[int32]int32
	GetSint64Map() map[int64]int64
	GetFixed32Map() map[uint32]uint32
	GetSfixed32Map() map[int32]int32
	GetFixed64Map() map[uint64]uint64
	GetSfixed64Map() map[int64]int64
	GetBoolMap() map[bool]bool
	GetStringMap() map[string]string
	GetStringToBytesMap() map[string][]byte
	GetStringToEnumMap() map[string]MapEnum
	GetStringToMsgMap() map[string]*FloatingPoint
}

func (this *AllMapsOrdered) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *AllMapsOrdered) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewAllMapsOrderedFromFace(this)
}

func (this *AllMapsOrdered) GetStringToDoubleMap() map[string]float64 {
	return this.StringToDoubleMap
}

func (this *AllMapsOrdered) GetStringToFloatMap() map[string]float32 {
	return this.StringToFloatMap
}

func (this *AllMapsOrdered) GetInt32Map() map[int32]int32 {
	return this.Int32Map
}

func (this *AllMapsOrdered) GetInt64Map() map[int64]int64 {
	return this.Int64Map
}

func (this *AllMapsOrdered) GetUint32Map() map[uint32]uint32 {
	return this.Uint32Map
}

func (this *AllMapsOrdered) GetUint64Map() map[uint64]uint64 {
	return this.Uint64Map
}

func (this *AllMapsOrdered) GetSint32Map() map[int32]int32 {
	return this.Sint32Map
}

func (this *AllMapsOrdered) GetSint64Map() map[int64]int64 {
	return this.Sint64Map
}

func (this *AllMapsOrdered) GetFixed32Map() map[uint32]uint32 {
	return this.Fixed32Map
}

func (this *AllMapsOrdered) GetSfixed32Map() map[int32]int32 {
	return this.Sfixed32Map
}

func (this *AllMapsOrdered) GetFixed64Map() map[uint64]uint64 {
	return this.Fixed64Map
}

func (this *AllMapsOrdered) GetSfixed64Map() map[int64]int64 {
	return this.Sfixed64Map
}

func (this *AllMapsOrdered) GetBoolMap() map[bool]bool {
	return this.BoolMap
}

func (this *AllMapsOrdered) GetStringMap() map[string]string {
	return this.StringMap
}

func (this *AllMapsOrdered) GetStringToBytesMap() map[string][]byte {
	return this.StringToBytesMap
}

func (this *AllMapsOrdered) GetStringToEnumMap() map[string]MapEnum {
	return this.StringToEnumMap
}

func (this *AllMapsOrdered) GetStringToMsgMap() map[string]*FloatingPoint {
	return this.StringToMsgMap
}

func NewAllMapsOrderedFromFace(that AllMapsOrderedFace) *AllMapsOrdered {
	this := &AllMapsOrdered{}
	this.StringToDoubleMap = that.GetStringToDoubleMap()
	this.StringToFloatMap = that.GetStringToFloatMap()
	this.Int32Map = that.GetInt32Map()
	this.Int64Map = that.GetInt64Map()
	this.Uint32Map = that.GetUint32Map()
	this.Uint64Map = that.GetUint64Map()
	this.Sint32Map = that.GetSint32Map()
	this.Sint64Map = that.GetSint64Map()
	this.Fixed32Map = that.GetFixed32Map()
	this.Sfixed32Map = that.GetSfixed32Map()
	this.Fixed64Map = that.GetFixed64Map()
	this.Sfixed64Map = that.GetSfixed64Map()
	this.BoolMap = that.GetBoolMap()
	this.StringMap = that.GetStringMap()
	this.StringToBytesMap = that.GetStringToBytesMap()
	this.StringToEnumMap = that.GetStringToEnumMap()
	this.StringToMsgMap = that.GetStringToMsgMap()
	return this
}

func (this *FloatingPoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto2_maps.FloatingPoint{")
	if this.F != nil {
		s = append(s, "F: "+valueToGoStringMapsproto2(this.F, "float64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomMap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&proto2_maps.CustomMap{")
	keysForNullable128S := make([]string, 0, len(this.Nullable128S))
	for k := range this.Nullable128S {
		keysForNullable128S = append(keysForNullable128S, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNullable128S)
	mapStringForNullable128S := "map[string]*github_com_gogo_protobuf_test_custom.Uint128{"
	for _, k := range keysForNullable128S {
		mapStringForNullable128S += fmt.Sprintf("%#v: %#v,", k, this.Nullable128S[k])
	}
	mapStringForNullable128S += "}"
	if this.Nullable128S != nil {
		s = append(s, "Nullable128S: "+mapStringForNullable128S+",\n")
	}
	keysForUint128S := make([]string, 0, len(this.Uint128S))
	for k := range this.Uint128S {
		keysForUint128S = append(keysForUint128S, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForUint128S)
	mapStringForUint128S := "map[string]github_com_gogo_protobuf_test_custom.Uint128{"
	for _, k := range keysForUint128S {
		mapStringForUint128S += fmt.Sprintf("%#v: %#v,", k, this.Uint128S[k])
	}
	mapStringForUint128S += "}"
	if this.Uint128S != nil {
		s = append(s, "Uint128S: "+mapStringForUint128S+",\n")
	}
	keysForNullableIds := make([]string, 0, len(this.NullableIds))
	for k := range this.NullableIds {
		keysForNullableIds = append(keysForNullableIds, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNullableIds)
	mapStringForNullableIds := "map[string]*github_com_gogo_protobuf_test.Uuid{"
	for _, k := range keysForNullableIds {
		mapStringForNullableIds += fmt.Sprintf("%#v: %#v,", k, this.NullableIds[k])
	}
	mapStringForNullableIds += "}"
	if this.NullableIds != nil {
		s = append(s, "NullableIds: "+mapStringForNullableIds+",\n")
	}
	keysForIds := make([]string, 0, len(this.Ids))
	for k := range this.Ids {
		keysForIds = append(keysForIds, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForIds)
	mapStringForIds := "map[string]github_com_gogo_protobuf_test.Uuid{"
	for _, k := range keysForIds {
		mapStringForIds += fmt.Sprintf("%#v: %#v,", k, this.Ids[k])
	}
	mapStringForIds += "}"
	if this.Ids != nil {
		s = append(s, "Ids: "+mapStringForIds+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllMaps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&proto2_maps.AllMaps{")
	keysForStringToDoubleMap := make([]string, 0, len(this.StringToDoubleMap))
	for k := range this.StringToDoubleMap {
		keysForStringToDoubleMap = append(keysForStringToDoubleMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToDoubleMap)
	mapStringForStringToDoubleMap := "map[string]float64{"
	for _, k := range keysForStringToDoubleMap {
		mapStringForStringToDoubleMap += fmt.Sprintf("%#v: %#v,", k, this.StringToDoubleMap[k])
	}
	mapStringForStringToDoubleMap += "}"
	if this.StringToDoubleMap != nil {
		s = append(s, "StringToDoubleMap: "+mapStringForStringToDoubleMap+",\n")
	}
	keysForStringToFloatMap := make([]string, 0, len(this.StringToFloatMap))
	for k := range this.StringToFloatMap {
		keysForStringToFloatMap = append(keysForStringToFloatMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToFloatMap)
	mapStringForStringToFloatMap := "map[string]float32{"
	for _, k := range keysForStringToFloatMap {
		mapStringForStringToFloatMap += fmt.Sprintf("%#v: %#v,", k, this.StringToFloatMap[k])
	}
	mapStringForStringToFloatMap += "}"
	if this.StringToFloatMap != nil {
		s = append(s, "StringToFloatMap: "+mapStringForStringToFloatMap+",\n")
	}
	keysForInt32Map := make([]int32, 0, len(this.Int32Map))
	for k := range this.Int32Map {
		keysForInt32Map = append(keysForInt32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInt32Map)
	mapStringForInt32Map := "map[int32]int32{"
	for _, k := range keysForInt32Map {
		mapStringForInt32Map += fmt.Sprintf("%#v: %#v,", k, this.Int32Map[k])
	}
	mapStringForInt32Map += "}"
	if this.Int32Map != nil {
		s = append(s, "Int32Map: "+mapStringForInt32Map+",\n")
	}
	keysForInt64Map := make([]int64, 0, len(this.Int64Map))
	for k := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForInt64Map)
	mapStringForInt64Map := "map[int64]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%#v: %#v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	if this.Int64Map != nil {
		s = append(s, "Int64Map: "+mapStringForInt64Map+",\n")
	}
	keysForUint32Map := make([]uint32, 0, len(this.Uint32Map))
	for k := range this.Uint32Map {
		keysForUint32Map = append(keysForUint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForUint32Map)
	mapStringForUint32Map := "map[uint32]uint32{"
	for _, k := range keysForUint32Map {
		mapStringForUint32Map += fmt.Sprintf("%#v: %#v,", k, this.Uint32Map[k])
	}
	mapStringForUint32Map += "}"
	if this.Uint32Map != nil {
		s = append(s, "Uint32Map: "+mapStringForUint32Map+",\n")
	}
	keysForUint64Map := make([]uint64, 0, len(this.Uint64Map))
	for k := range this.Uint64Map {
		keysForUint64Map = append(keysForUint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForUint64Map)
	mapStringForUint64Map := "map[uint64]uint64{"
	for _, k := range keysForUint64Map {
		mapStringForUint64Map += fmt.Sprintf("%#v: %#v,", k, this.Uint64Map[k])
	}
	mapStringForUint64Map += "}"
	if this.Uint64Map != nil {
		s = append(s, "Uint64Map: "+mapStringForUint64Map+",\n")
	}
	keysForSint32Map := make([]int32, 0, len(this.Sint32Map))
	for k := range this.Sint32Map {
		keysForSint32Map = append(keysForSint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSint32Map)
	mapStringForSint32Map := "map[int32]int32{"
	for _, k := range keysForSint32Map {
		mapStringForSint32Map += fmt.Sprintf("%#v: %#v,", k, this.Sint32Map[k])
	}
	mapStringForSint32Map += "}"
	if this.Sint32Map != nil {
		s = append(s, "Sint32Map: "+mapStringForSint32Map+",\n")
	}
	keysForSint64Map := make([]int64, 0, len(this.Sint64Map))
	for k := range this.Sint64Map {
		keysForSint64Map = append(keysForSint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSint64Map)
	mapStringForSint64Map := "map[int64]int64{"
	for _, k := range keysForSint64Map {
		mapStringForSint64Map += fmt.Sprintf("%#v: %#v,", k, this.Sint64Map[k])
	}
	mapStringForSint64Map += "}"
	if this.Sint64Map != nil {
		s = append(s, "Sint64Map: "+mapStringForSint64Map+",\n")
	}
	keysForFixed32Map := make([]uint32, 0, len(this.Fixed32Map))
	for k := range this.Fixed32Map {
		keysForFixed32Map = append(keysForFixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForFixed32Map)
	mapStringForFixed32Map := "map[uint32]uint32{"
	for _, k := range keysForFixed32Map {
		mapStringForFixed32Map += fmt.Sprintf("%#v: %#v,", k, this.Fixed32Map[k])
	}
	mapStringForFixed32Map += "}"
	if this.Fixed32Map != nil {
		s = append(s, "Fixed32Map: "+mapStringForFixed32Map+",\n")
	}
	keysForSfixed32Map := make([]int32, 0, len(this.Sfixed32Map))
	for k := range this.Sfixed32Map {
		keysForSfixed32Map = append(keysForSfixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSfixed32Map)
	mapStringForSfixed32Map := "map[int32]int32{"
	for _, k := range keysForSfixed32Map {
		mapStringForSfixed32Map += fmt.Sprintf("%#v: %#v,", k, this.Sfixed32Map[k])
	}
	mapStringForSfixed32Map += "}"
	if this.Sfixed32Map != nil {
		s = append(s, "Sfixed32Map: "+mapStringForSfixed32Map+",\n")
	}
	keysForFixed64Map := make([]uint64, 0, len(this.Fixed64Map))
	for k := range this.Fixed64Map {
		keysForFixed64Map = append(keysForFixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForFixed64Map)
	mapStringForFixed64Map := "map[uint64]uint64{"
	for _, k := range keysForFixed64Map {
		mapStringForFixed64Map += fmt.Sprintf("%#v: %#v,", k, this.Fixed64Map[k])
	}
	mapStringForFixed64Map += "}"
	if this.Fixed64Map != nil {
		s = append(s, "Fixed64Map: "+mapStringForFixed64Map+",\n")
	}
	keysForSfixed64Map := make([]int64, 0, len(this.Sfixed64Map))
	for k := range this.Sfixed64Map {
		keysForSfixed64Map = append(keysForSfixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSfixed64Map)
	mapStringForSfixed64Map := "map[int64]int64{"
	for _, k := range keysForSfixed64Map {
		mapStringForSfixed64Map += fmt.Sprintf("%#v: %#v,", k, this.Sfixed64Map[k])
	}
	mapStringForSfixed64Map += "}"
	if this.Sfixed64Map != nil {
		s = append(s, "Sfixed64Map: "+mapStringForSfixed64Map+",\n")
	}
	keysForBoolMap := make([]bool, 0, len(this.BoolMap))
	for k := range this.BoolMap {
		keysForBoolMap = append(keysForBoolMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Bools(keysForBoolMap)
	mapStringForBoolMap := "map[bool]bool{"
	for _, k := range keysForBoolMap {
		mapStringForBoolMap += fmt.Sprintf("%#v: %#v,", k, this.BoolMap[k])
	}
	mapStringForBoolMap += "}"
	if this.BoolMap != nil {
		s = append(s, "BoolMap: "+mapStringForBoolMap+",\n")
	}
	keysForStringMap := make([]string, 0, len(this.StringMap))
	for k := range this.StringMap {
		keysForStringMap = append(keysForStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringMap)
	mapStringForStringMap := "map[string]string{"
	for _, k := range keysForStringMap {
		mapStringForStringMap += fmt.Sprintf("%#v: %#v,", k, this.StringMap[k])
	}
	mapStringForStringMap += "}"
	if this.StringMap != nil {
		s = append(s, "StringMap: "+mapStringForStringMap+",\n")
	}
	keysForStringToBytesMap := make([]string, 0, len(this.StringToBytesMap))
	for k := range this.StringToBytesMap {
		keysForStringToBytesMap = append(keysForStringToBytesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToBytesMap)
	mapStringForStringToBytesMap := "map[string][]byte{"
	for _, k := range keysForStringToBytesMap {
		mapStringForStringToBytesMap += fmt.Sprintf("%#v: %#v,", k, this.StringToBytesMap[k])
	}
	mapStringForStringToBytesMap += "}"
	if this.StringToBytesMap != nil {
		s = append(s, "StringToBytesMap: "+mapStringForStringToBytesMap+",\n")
	}
	keysForStringToEnumMap := make([]string, 0, len(this.StringToEnumMap))
	for k := range this.StringToEnumMap {
		keysForStringToEnumMap = append(keysForStringToEnumMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToEnumMap)
	mapStringForStringToEnumMap := "map[string]MapEnum{"
	for _, k := range keysForStringToEnumMap {
		mapStringForStringToEnumMap += fmt.Sprintf("%#v: %#v,", k, this.StringToEnumMap[k])
	}
	mapStringForStringToEnumMap += "}"
	if this.StringToEnumMap != nil {
		s = append(s, "StringToEnumMap: "+mapStringForStringToEnumMap+",\n")
	}
	keysForStringToMsgMap := make([]string, 0, len(this.StringToMsgMap))
	for k := range this.StringToMsgMap {
		keysForStringToMsgMap = append(keysForStringToMsgMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToMsgMap)
	mapStringForStringToMsgMap := "map[string]*FloatingPoint{"
	for _, k := range keysForStringToMsgMap {
		mapStringForStringToMsgMap += fmt.Sprintf("%#v: %#v,", k, this.StringToMsgMap[k])
	}
	mapStringForStringToMsgMap += "}"
	if this.StringToMsgMap != nil {
		s = append(s, "StringToMsgMap: "+mapStringForStringToMsgMap+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllMapsOrdered) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&proto2_maps.AllMapsOrdered{")
	keysForStringToDoubleMap := make([]string, 0, len(this.StringToDoubleMap))
	for k := range this.StringToDoubleMap {
		keysForStringToDoubleMap = append(keysForStringToDoubleMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToDoubleMap)
	mapStringForStringToDoubleMap := "map[string]float64{"
	for _, k := range keysForStringToDoubleMap {
		mapStringForStringToDoubleMap += fmt.Sprintf("%#v: %#v,", k, this.StringToDoubleMap[k])
	}
	mapStringForStringToDoubleMap += "}"
	if this.StringToDoubleMap != nil {
		s = append(s, "StringToDoubleMap: "+mapStringForStringToDoubleMap+",\n")
	}
	keysForStringToFloatMap := make([]string, 0, len(this.StringToFloatMap))
	for k := range this.StringToFloatMap {
		keysForStringToFloatMap = append(keysForStringToFloatMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToFloatMap)
	mapStringForStringToFloatMap := "map[string]float32{"
	for _, k := range keysForStringToFloatMap {
		mapStringForStringToFloatMap += fmt.Sprintf("%#v: %#v,", k, this.StringToFloatMap[k])
	}
	mapStringForStringToFloatMap += "}"
	if this.StringToFloatMap != nil {
		s = append(s, "StringToFloatMap: "+mapStringForStringToFloatMap+",\n")
	}
	keysForInt32Map := make([]int32, 0, len(this.Int32Map))
	for k := range this.Int32Map {
		keysForInt32Map = append(keysForInt32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInt32Map)
	mapStringForInt32Map := "map[int32]int32{"
	for _, k := range keysForInt32Map {
		mapStringForInt32Map += fmt.Sprintf("%#v: %#v,", k, this.Int32Map[k])
	}
	mapStringForInt32Map += "}"
	if this.Int32Map != nil {
		s = append(s, "Int32Map: "+mapStringForInt32Map+",\n")
	}
	keysForInt64Map := make([]int64, 0, len(this.Int64Map))
	for k := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForInt64Map)
	mapStringForInt64Map := "map[int64]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%#v: %#v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	if this.Int64Map != nil {
		s = append(s, "Int64Map: "+mapStringForInt64Map+",\n")
	}
	keysForUint32Map := make([]uint32, 0, len(this.Uint32Map))
	for k := range this.Uint32Map {
		keysForUint32Map = append(keysForUint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForUint32Map)
	mapStringForUint32Map := "map[uint32]uint32{"
	for _, k := range keysForUint32Map {
		mapStringForUint32Map += fmt.Sprintf("%#v: %#v,", k, this.Uint32Map[k])
	}
	mapStringForUint32Map += "}"
	if this.Uint32Map != nil {
		s = append(s, "Uint32Map: "+mapStringForUint32Map+",\n")
	}
	keysForUint64Map := make([]uint64, 0, len(this.Uint64Map))
	for k := range this.Uint64Map {
		keysForUint64Map = append(keysForUint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForUint64Map)
	mapStringForUint64Map := "map[uint64]uint64{"
	for _, k := range keysForUint64Map {
		mapStringForUint64Map += fmt.Sprintf("%#v: %#v,", k, this.Uint64Map[k])
	}
	mapStringForUint64Map += "}"
	if this.Uint64Map != nil {
		s = append(s, "Uint64Map: "+mapStringForUint64Map+",\n")
	}
	keysForSint32Map := make([]int32, 0, len(this.Sint32Map))
	for k := range this.Sint32Map {
		keysForSint32Map = append(keysForSint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSint32Map)
	mapStringForSint32Map := "map[int32]int32{"
	for _, k := range keysForSint32Map {
		mapStringForSint32Map += fmt.Sprintf("%#v: %#v,", k, this.Sint32Map[k])
	}
	mapStringForSint32Map += "}"
	if this.Sint32Map != nil {
		s = append(s, "Sint32Map: "+mapStringForSint32Map+",\n")
	}
	keysForSint64Map := make([]int64, 0, len(this.Sint64Map))
	for k := range this.Sint64Map {
		keysForSint64Map = append(keysForSint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSint64Map)
	mapStringForSint64Map := "map[int64]int64{"
	for _, k := range keysForSint64Map {
		mapStringForSint64Map += fmt.Sprintf("%#v: %#v,", k, this.Sint64Map[k])
	}
	mapStringForSint64Map += "}"
	if this.Sint64Map != nil {
		s = append(s, "Sint64Map: "+mapStringForSint64Map+",\n")
	}
	keysForFixed32Map := make([]uint32, 0, len(this.Fixed32Map))
	for k := range this.Fixed32Map {
		keysForFixed32Map = append(keysForFixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForFixed32Map)
	mapStringForFixed32Map := "map[uint32]uint32{"
	for _, k := range keysForFixed32Map {
		mapStringForFixed32Map += fmt.Sprintf("%#v: %#v,", k, this.Fixed32Map[k])
	}
	mapStringForFixed32Map += "}"
	if this.Fixed32Map != nil {
		s = append(s, "Fixed32Map: "+mapStringForFixed32Map+",\n")
	}
	keysForSfixed32Map := make([]int32, 0, len(this.Sfixed32Map))
	for k := range this.Sfixed32Map {
		keysForSfixed32Map = append(keysForSfixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSfixed32Map)
	mapStringForSfixed32Map := "map[int32]int32{"
	for _, k := range keysForSfixed32Map {
		mapStringForSfixed32Map += fmt.Sprintf("%#v: %#v,", k, this.Sfixed32Map[k])
	}
	mapStringForSfixed32Map += "}"
	if this.Sfixed32Map != nil {
		s = append(s, "Sfixed32Map: "+mapStringForSfixed32Map+",\n")
	}
	keysForFixed64Map := make([]uint64, 0, len(this.Fixed64Map))
	for k := range this.Fixed64Map {
		keysForFixed64Map = append(keysForFixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForFixed64Map)
	mapStringForFixed64Map := "map[uint64]uint64{"
	for _, k := range keysForFixed64Map {
		mapStringForFixed64Map += fmt.Sprintf("%#v: %#v,", k, this.Fixed64Map[k])
	}
	mapStringForFixed64Map += "}"
	if this.Fixed64Map != nil {
		s = append(s, "Fixed64Map: "+mapStringForFixed64Map+",\n")
	}
	keysForSfixed64Map := make([]int64, 0, len(this.Sfixed64Map))
	for k := range this.Sfixed64Map {
		keysForSfixed64Map = append(keysForSfixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSfixed64Map)
	mapStringForSfixed64Map := "map[int64]int64{"
	for _, k := range keysForSfixed64Map {
		mapStringForSfixed64Map += fmt.Sprintf("%#v: %#v,", k, this.Sfixed64Map[k])
	}
	mapStringForSfixed64Map += "}"
	if this.Sfixed64Map != nil {
		s = append(s, "Sfixed64Map: "+mapStringForSfixed64Map+",\n")
	}
	keysForBoolMap := make([]bool, 0, len(this.BoolMap))
	for k := range this.BoolMap {
		keysForBoolMap = append(keysForBoolMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Bools(keysForBoolMap)
	mapStringForBoolMap := "map[bool]bool{"
	for _, k := range keysForBoolMap {
		mapStringForBoolMap += fmt.Sprintf("%#v: %#v,", k, this.BoolMap[k])
	}
	mapStringForBoolMap += "}"
	if this.BoolMap != nil {
		s = append(s, "BoolMap: "+mapStringForBoolMap+",\n")
	}
	keysForStringMap := make([]string, 0, len(this.StringMap))
	for k := range this.StringMap {
		keysForStringMap = append(keysForStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringMap)
	mapStringForStringMap := "map[string]string{"
	for _, k := range keysForStringMap {
		mapStringForStringMap += fmt.Sprintf("%#v: %#v,", k, this.StringMap[k])
	}
	mapStringForStringMap += "}"
	if this.StringMap != nil {
		s = append(s, "StringMap: "+mapStringForStringMap+",\n")
	}
	keysForStringToBytesMap := make([]string, 0, len(this.StringToBytesMap))
	for k := range this.StringToBytesMap {
		keysForStringToBytesMap = append(keysForStringToBytesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToBytesMap)
	mapStringForStringToBytesMap := "map[string][]byte{"
	for _, k := range keysForStringToBytesMap {
		mapStringForStringToBytesMap += fmt.Sprintf("%#v: %#v,", k, this.StringToBytesMap[k])
	}
	mapStringForStringToBytesMap += "}"
	if this.StringToBytesMap != nil {
		s = append(s, "StringToBytesMap: "+mapStringForStringToBytesMap+",\n")
	}
	keysForStringToEnumMap := make([]string, 0, len(this.StringToEnumMap))
	for k := range this.StringToEnumMap {
		keysForStringToEnumMap = append(keysForStringToEnumMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToEnumMap)
	mapStringForStringToEnumMap := "map[string]MapEnum{"
	for _, k := range keysForStringToEnumMap {
		mapStringForStringToEnumMap += fmt.Sprintf("%#v: %#v,", k, this.StringToEnumMap[k])
	}
	mapStringForStringToEnumMap += "}"
	if this.StringToEnumMap != nil {
		s = append(s, "StringToEnumMap: "+mapStringForStringToEnumMap+",\n")
	}
	keysForStringToMsgMap := make([]string, 0, len(this.StringToMsgMap))
	for k := range this.StringToMsgMap {
		keysForStringToMsgMap = append(keysForStringToMsgMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToMsgMap)
	mapStringForStringToMsgMap := "map[string]*FloatingPoint{"
	for _, k := range keysForStringToMsgMap {
		mapStringForStringToMsgMap += fmt.Sprintf("%#v: %#v,", k, this.StringToMsgMap[k])
	}
	mapStringForStringToMsgMap += "}"
	if this.StringToMsgMap != nil {
		s = append(s, "StringToMsgMap: "+mapStringForStringToMsgMap+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMapsproto2(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func NewPopulatedFloatingPoint(r randyMapsproto2, easy bool) *FloatingPoint {
	this := &FloatingPoint{}
	if r.Intn(10) != 0 {
		v1 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.F = &v1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMapsproto2(r, 2)
	}
	return this
}

func NewPopulatedCustomMap(r randyMapsproto2, easy bool) *CustomMap {
	this := &CustomMap{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Nullable128S = make(map[string]*github_com_gogo_protobuf_test_custom.Uint128)
		for i := 0; i < v2; i++ {
			this.Nullable128S[randStringMapsproto2(r)] = (*github_com_gogo_protobuf_test_custom.Uint128)(github_com_gogo_protobuf_test_custom.NewPopulatedUint128(r))
		}
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(10)
		this.Uint128S = make(map[string]github_com_gogo_protobuf_test_custom.Uint128)
		for i := 0; i < v3; i++ {
			this.Uint128S[randStringMapsproto2(r)] = (github_com_gogo_protobuf_test_custom.Uint128)(*github_com_gogo_protobuf_test_custom.NewPopulatedUint128(r))
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.NullableIds = make(map[string]*github_com_gogo_protobuf_test.Uuid)
		for i := 0; i < v4; i++ {
			this.NullableIds[randStringMapsproto2(r)] = (*github_com_gogo_protobuf_test.Uuid)(github_com_gogo_protobuf_test.NewPopulatedUuid(r))
		}
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.Ids = make(map[string]github_com_gogo_protobuf_test.Uuid)
		for i := 0; i < v5; i++ {
			this.Ids[randStringMapsproto2(r)] = (github_com_gogo_protobuf_test.Uuid)(*github_com_gogo_protobuf_test.NewPopulatedUuid(r))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMapsproto2(r, 5)
	}
	return this
}

func NewPopulatedAllMaps(r randyMapsproto2, easy bool) *AllMaps {
	this := &AllMaps{}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.StringToDoubleMap = make(map[string]float64)
		for i := 0; i < v6; i++ {
			v7 := randStringMapsproto2(r)
			this.StringToDoubleMap[v7] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.StringToDoubleMap[v7] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(10)
		this.StringToFloatMap = make(map[string]float32)
		for i := 0; i < v8; i++ {
			v9 := randStringMapsproto2(r)
			this.StringToFloatMap[v9] = float32(r.Float32())
			if r.Intn(2) == 0 {
				this.StringToFloatMap[v9] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(10)
		this.Int32Map = make(map[int32]int32)
		for i := 0; i < v10; i++ {
			v11 := int32(r.Int31())
			this.Int32Map[v11] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Int32Map[v11] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(10)
		this.Int64Map = make(map[int64]int64)
		for i := 0; i < v12; i++ {
			v13 := int64(r.Int63())
			this.Int64Map[v13] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Int64Map[v13] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v14 := r.Intn(10)
		this.Uint32Map = make(map[uint32]uint32)
		for i := 0; i < v14; i++ {
			v15 := uint32(r.Uint32())
			this.Uint32Map[v15] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v16 := r.Intn(10)
		this.Uint64Map = make(map[uint64]uint64)
		for i := 0; i < v16; i++ {
			v17 := uint64(uint64(r.Uint32()))
			this.Uint64Map[v17] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v18 := r.Intn(10)
		this.Sint32Map = make(map[int32]int32)
		for i := 0; i < v18; i++ {
			v19 := int32(r.Int31())
			this.Sint32Map[v19] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Sint32Map[v19] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v20 := r.Intn(10)
		this.Sint64Map = make(map[int64]int64)
		for i := 0; i < v20; i++ {
			v21 := int64(r.Int63())
			this.Sint64Map[v21] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Sint64Map[v21] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v22 := r.Intn(10)
		this.Fixed32Map = make(map[uint32]uint32)
		for i := 0; i < v22; i++ {
			v23 := uint32(r.Uint32())
			this.Fixed32Map[v23] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v24 := r.Intn(10)
		this.Sfixed32Map = make(map[int32]int32)
		for i := 0; i < v24; i++ {
			v25 := int32(r.Int31())
			this.Sfixed32Map[v25] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Sfixed32Map[v25] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v26 := r.Intn(10)
		this.Fixed64Map = make(map[uint64]uint64)
		for i := 0; i < v26; i++ {
			v27 := uint64(uint64(r.Uint32()))
			this.Fixed64Map[v27] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v28 := r.Intn(10)
		this.Sfixed64Map = make(map[int64]int64)
		for i := 0; i < v28; i++ {
			v29 := int64(r.Int63())
			this.Sfixed64Map[v29] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Sfixed64Map[v29] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v30 := r.Intn(10)
		this.BoolMap = make(map[bool]bool)
		for i := 0; i < v30; i++ {
			v31 := bool(bool(r.Intn(2) == 0))
			this.BoolMap[v31] = bool(bool(r.Intn(2) == 0))
		}
	}
	if r.Intn(10) != 0 {
		v32 := r.Intn(10)
		this.StringMap = make(map[string]string)
		for i := 0; i < v32; i++ {
			this.StringMap[randStringMapsproto2(r)] = randStringMapsproto2(r)
		}
	}
	if r.Intn(10) != 0 {
		v33 := r.Intn(10)
		this.StringToBytesMap = make(map[string][]byte)
		for i := 0; i < v33; i++ {
			v34 := r.Intn(100)
			v35 := randStringMapsproto2(r)
			this.StringToBytesMap[v35] = make([]byte, v34)
			for i := 0; i < v34; i++ {
				this.StringToBytesMap[v35][i] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(10) != 0 {
		v36 := r.Intn(10)
		this.StringToEnumMap = make(map[string]MapEnum)
		for i := 0; i < v36; i++ {
			this.StringToEnumMap[randStringMapsproto2(r)] = MapEnum([]int32{0, 1, 2}[r.Intn(3)])
		}
	}
	if r.Intn(10) != 0 {
		v37 := r.Intn(10)
		this.StringToMsgMap = make(map[string]*FloatingPoint)
		for i := 0; i < v37; i++ {
			this.StringToMsgMap[randStringMapsproto2(r)] = NewPopulatedFloatingPoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMapsproto2(r, 18)
	}
	return this
}

func NewPopulatedAllMapsOrdered(r randyMapsproto2, easy bool) *AllMapsOrdered {
	this := &AllMapsOrdered{}
	if r.Intn(10) != 0 {
		v38 := r.Intn(10)
		this.StringToDoubleMap = make(map[string]float64)
		for i := 0; i < v38; i++ {
			v39 := randStringMapsproto2(r)
			this.StringToDoubleMap[v39] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.StringToDoubleMap[v39] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v40 := r.Intn(10)
		this.StringToFloatMap = make(map[string]float32)
		for i := 0; i < v40; i++ {
			v41 := randStringMapsproto2(r)
			this.StringToFloatMap[v41] = float32(r.Float32())
			if r.Intn(2) == 0 {
				this.StringToFloatMap[v41] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v42 := r.Intn(10)
		this.Int32Map = make(map[int32]int32)
		for i := 0; i < v42; i++ {
			v43 := int32(r.Int31())
			this.Int32Map[v43] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Int32Map[v43] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v44 := r.Intn(10)
		this.Int64Map = make(map[int64]int64)
		for i := 0; i < v44; i++ {
			v45 := int64(r.Int63())
			this.Int64Map[v45] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Int64Map[v45] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v46 := r.Intn(10)
		this.Uint32Map = make(map[uint32]uint32)
		for i := 0; i < v46; i++ {
			v47 := uint32(r.Uint32())
			this.Uint32Map[v47] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v48 := r.Intn(10)
		this.Uint64Map = make(map[uint64]uint64)
		for i := 0; i < v48; i++ {
			v49 := uint64(uint64(r.Uint32()))
			this.Uint64Map[v49] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v50 := r.Intn(10)
		this.Sint32Map = make(map[int32]int32)
		for i := 0; i < v50; i++ {
			v51 := int32(r.Int31())
			this.Sint32Map[v51] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Sint32Map[v51] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v52 := r.Intn(10)
		this.Sint64Map = make(map[int64]int64)
		for i := 0; i < v52; i++ {
			v53 := int64(r.Int63())
			this.Sint64Map[v53] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Sint64Map[v53] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v54 := r.Intn(10)
		this.Fixed32Map = make(map[uint32]uint32)
		for i := 0; i < v54; i++ {
			v55 := uint32(r.Uint32())
			this.Fixed32Map[v55] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v56 := r.Intn(10)
		this.Sfixed32Map = make(map[int32]int32)
		for i := 0; i < v56; i++ {
			v57 := int32(r.Int31())
			this.Sfixed32Map[v57] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Sfixed32Map[v57] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v58 := r.Intn(10)
		this.Fixed64Map = make(map[uint64]uint64)
		for i := 0; i < v58; i++ {
			v59 := uint64(uint64(r.Uint32()))
			this.Fixed64Map[v59] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v60 := r.Intn(10)
		this.Sfixed64Map = make(map[int64]int64)
		for i := 0; i < v60; i++ {
			v61 := int64(r.Int63())
			this.Sfixed64Map[v61] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Sfixed64Map[v61] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v62 := r.Intn(10)
		this.BoolMap = make(map[bool]bool)
		for i := 0; i < v62; i++ {
			v63 := bool(bool(r.Intn(2) == 0))
			this.BoolMap[v63] = bool(bool(r.Intn(2) == 0))
		}
	}
	if r.Intn(10) != 0 {
		v64 := r.Intn(10)
		this.StringMap = make(map[string]string)
		for i := 0; i < v64; i++ {
			this.StringMap[randStringMapsproto2(r)] = randStringMapsproto2(r)
		}
	}
	if r.Intn(10) != 0 {
		v65 := r.Intn(10)
		this.StringToBytesMap = make(map[string][]byte)
		for i := 0; i < v65; i++ {
			v66 := r.Intn(100)
			v67 := randStringMapsproto2(r)
			this.StringToBytesMap[v67] = make([]byte, v66)
			for i := 0; i < v66; i++ {
				this.StringToBytesMap[v67][i] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(10) != 0 {
		v68 := r.Intn(10)
		this.StringToEnumMap = make(map[string]MapEnum)
		for i := 0; i < v68; i++ {
			this.StringToEnumMap[randStringMapsproto2(r)] = MapEnum([]int32{0, 1, 2}[r.Intn(3)])
		}
	}
	if r.Intn(10) != 0 {
		v69 := r.Intn(10)
		this.StringToMsgMap = make(map[string]*FloatingPoint)
		for i := 0; i < v69; i++ {
			this.StringToMsgMap[randStringMapsproto2(r)] = NewPopulatedFloatingPoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMapsproto2(r, 18)
	}
	return this
}

type randyMapsproto2 interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMapsproto2(r randyMapsproto2) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMapsproto2(r randyMapsproto2) string {
	v70 := r.Intn(100)
	tmps := make([]rune, v70)
	for i := 0; i < v70; i++ {
		tmps[i] = randUTF8RuneMapsproto2(r)
	}
	return string(tmps)
}
func randUnrecognizedMapsproto2(r randyMapsproto2, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMapsproto2(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMapsproto2(dAtA []byte, r randyMapsproto2, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMapsproto2(dAtA, uint64(key))
		v71 := r.Int63()
		if r.Intn(2) == 0 {
			v71 *= -1
		}
		dAtA = encodeVarintPopulateMapsproto2(dAtA, uint64(v71))
	case 1:
		dAtA = encodeVarintPopulateMapsproto2(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMapsproto2(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMapsproto2(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMapsproto2(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMapsproto2(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *FloatingPoint) Size() (n int) {
	var l int
	_ = l
	if m.F != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomMap) Size() (n int) {
	var l int
	_ = l
	if len(m.Nullable128S) > 0 {
		for k, v := range m.Nullable128S {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMapsproto2(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Uint128S) > 0 {
		for k, v := range m.Uint128S {
			_ = k
			_ = v
			l = 0
			l = v.Size()
			l += 1 + sovMapsproto2(uint64(l))
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.NullableIds) > 0 {
		for k, v := range m.NullableIds {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMapsproto2(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Ids) > 0 {
		for k, v := range m.Ids {
			_ = k
			_ = v
			l = 0
			l = v.Size()
			l += 1 + sovMapsproto2(uint64(l))
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllMaps) Size() (n int) {
	var l int
	_ = l
	if len(m.StringToDoubleMap) > 0 {
		for k, v := range m.StringToDoubleMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToFloatMap) > 0 {
		for k, v := range m.StringToFloatMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Int32Map) > 0 {
		for k, v := range m.Int32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Int64Map) > 0 {
		for k, v := range m.Int64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Uint32Map) > 0 {
		for k, v := range m.Uint32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Uint64Map) > 0 {
		for k, v := range m.Uint64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sint32Map) > 0 {
		for k, v := range m.Sint32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sint64Map) > 0 {
		for k, v := range m.Sint64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Fixed32Map) > 0 {
		for k, v := range m.Fixed32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 4 + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sfixed32Map) > 0 {
		for k, v := range m.Sfixed32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 4 + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Fixed64Map) > 0 {
		for k, v := range m.Fixed64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 8 + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sfixed64Map) > 0 {
		for k, v := range m.Sfixed64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 8 + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.BoolMap) > 0 {
		for k, v := range m.BoolMap {
			_ = k
			_ = v
			mapEntrySize := 1 + 1 + 1 + 1
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringMap) > 0 {
		for k, v := range m.StringMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + len(v) + sovMapsproto2(uint64(len(v)))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToBytesMap) > 0 {
		for k, v := range m.StringToBytesMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = 1 + len(v) + sovMapsproto2(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToEnumMap) > 0 {
		for k, v := range m.StringToEnumMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 2 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToMsgMap) > 0 {
		for k, v := range m.StringToMsgMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMapsproto2(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllMapsOrdered) Size() (n int) {
	var l int
	_ = l
	if len(m.StringToDoubleMap) > 0 {
		for k, v := range m.StringToDoubleMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToFloatMap) > 0 {
		for k, v := range m.StringToFloatMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Int32Map) > 0 {
		for k, v := range m.Int32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Int64Map) > 0 {
		for k, v := range m.Int64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Uint32Map) > 0 {
		for k, v := range m.Uint32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Uint64Map) > 0 {
		for k, v := range m.Uint64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapsproto2(uint64(k)) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sint32Map) > 0 {
		for k, v := range m.Sint32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sint64Map) > 0 {
		for k, v := range m.Sint64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + sozMapsproto2(uint64(k)) + 1 + sozMapsproto2(uint64(v))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Fixed32Map) > 0 {
		for k, v := range m.Fixed32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 4 + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sfixed32Map) > 0 {
		for k, v := range m.Sfixed32Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 4 + 1 + 4
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Fixed64Map) > 0 {
		for k, v := range m.Fixed64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 8 + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.Sfixed64Map) > 0 {
		for k, v := range m.Sfixed64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + 8 + 1 + 8
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.BoolMap) > 0 {
		for k, v := range m.BoolMap {
			_ = k
			_ = v
			mapEntrySize := 1 + 1 + 1 + 1
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringMap) > 0 {
		for k, v := range m.StringMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + len(v) + sovMapsproto2(uint64(len(v)))
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToBytesMap) > 0 {
		for k, v := range m.StringToBytesMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = 1 + len(v) + sovMapsproto2(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToEnumMap) > 0 {
		for k, v := range m.StringToEnumMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + 1 + sovMapsproto2(uint64(v))
			n += mapEntrySize + 2 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if len(m.StringToMsgMap) > 0 {
		for k, v := range m.StringToMsgMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMapsproto2(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMapsproto2(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovMapsproto2(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMapsproto2(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMapsproto2(x uint64) (n int) {
	return sovMapsproto2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FloatingPoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FloatingPoint{`,
		`F:` + valueToStringMapsproto2(this.F) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomMap) String() string {
	if this == nil {
		return "nil"
	}
	keysForNullable128S := make([]string, 0, len(this.Nullable128S))
	for k := range this.Nullable128S {
		keysForNullable128S = append(keysForNullable128S, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNullable128S)
	mapStringForNullable128S := "map[string]*github_com_gogo_protobuf_test_custom.Uint128{"
	for _, k := range keysForNullable128S {
		mapStringForNullable128S += fmt.Sprintf("%v: %v,", k, this.Nullable128S[k])
	}
	mapStringForNullable128S += "}"
	keysForUint128S := make([]string, 0, len(this.Uint128S))
	for k := range this.Uint128S {
		keysForUint128S = append(keysForUint128S, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForUint128S)
	mapStringForUint128S := "map[string]github_com_gogo_protobuf_test_custom.Uint128{"
	for _, k := range keysForUint128S {
		mapStringForUint128S += fmt.Sprintf("%v: %v,", k, this.Uint128S[k])
	}
	mapStringForUint128S += "}"
	keysForNullableIds := make([]string, 0, len(this.NullableIds))
	for k := range this.NullableIds {
		keysForNullableIds = append(keysForNullableIds, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNullableIds)
	mapStringForNullableIds := "map[string]*github_com_gogo_protobuf_test.Uuid{"
	for _, k := range keysForNullableIds {
		mapStringForNullableIds += fmt.Sprintf("%v: %v,", k, this.NullableIds[k])
	}
	mapStringForNullableIds += "}"
	keysForIds := make([]string, 0, len(this.Ids))
	for k := range this.Ids {
		keysForIds = append(keysForIds, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForIds)
	mapStringForIds := "map[string]github_com_gogo_protobuf_test.Uuid{"
	for _, k := range keysForIds {
		mapStringForIds += fmt.Sprintf("%v: %v,", k, this.Ids[k])
	}
	mapStringForIds += "}"
	s := strings.Join([]string{`&CustomMap{`,
		`Nullable128S:` + mapStringForNullable128S + `,`,
		`Uint128S:` + mapStringForUint128S + `,`,
		`NullableIds:` + mapStringForNullableIds + `,`,
		`Ids:` + mapStringForIds + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllMaps) String() string {
	if this == nil {
		return "nil"
	}
	keysForStringToDoubleMap := make([]string, 0, len(this.StringToDoubleMap))
	for k := range this.StringToDoubleMap {
		keysForStringToDoubleMap = append(keysForStringToDoubleMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToDoubleMap)
	mapStringForStringToDoubleMap := "map[string]float64{"
	for _, k := range keysForStringToDoubleMap {
		mapStringForStringToDoubleMap += fmt.Sprintf("%v: %v,", k, this.StringToDoubleMap[k])
	}
	mapStringForStringToDoubleMap += "}"
	keysForStringToFloatMap := make([]string, 0, len(this.StringToFloatMap))
	for k := range this.StringToFloatMap {
		keysForStringToFloatMap = append(keysForStringToFloatMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToFloatMap)
	mapStringForStringToFloatMap := "map[string]float32{"
	for _, k := range keysForStringToFloatMap {
		mapStringForStringToFloatMap += fmt.Sprintf("%v: %v,", k, this.StringToFloatMap[k])
	}
	mapStringForStringToFloatMap += "}"
	keysForInt32Map := make([]int32, 0, len(this.Int32Map))
	for k := range this.Int32Map {
		keysForInt32Map = append(keysForInt32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInt32Map)
	mapStringForInt32Map := "map[int32]int32{"
	for _, k := range keysForInt32Map {
		mapStringForInt32Map += fmt.Sprintf("%v: %v,", k, this.Int32Map[k])
	}
	mapStringForInt32Map += "}"
	keysForInt64Map := make([]int64, 0, len(this.Int64Map))
	for k := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForInt64Map)
	mapStringForInt64Map := "map[int64]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%v: %v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	keysForUint32Map := make([]uint32, 0, len(this.Uint32Map))
	for k := range this.Uint32Map {
		keysForUint32Map = append(keysForUint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForUint32Map)
	mapStringForUint32Map := "map[uint32]uint32{"
	for _, k := range keysForUint32Map {
		mapStringForUint32Map += fmt.Sprintf("%v: %v,", k, this.Uint32Map[k])
	}
	mapStringForUint32Map += "}"
	keysForUint64Map := make([]uint64, 0, len(this.Uint64Map))
	for k := range this.Uint64Map {
		keysForUint64Map = append(keysForUint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForUint64Map)
	mapStringForUint64Map := "map[uint64]uint64{"
	for _, k := range keysForUint64Map {
		mapStringForUint64Map += fmt.Sprintf("%v: %v,", k, this.Uint64Map[k])
	}
	mapStringForUint64Map += "}"
	keysForSint32Map := make([]int32, 0, len(this.Sint32Map))
	for k := range this.Sint32Map {
		keysForSint32Map = append(keysForSint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSint32Map)
	mapStringForSint32Map := "map[int32]int32{"
	for _, k := range keysForSint32Map {
		mapStringForSint32Map += fmt.Sprintf("%v: %v,", k, this.Sint32Map[k])
	}
	mapStringForSint32Map += "}"
	keysForSint64Map := make([]int64, 0, len(this.Sint64Map))
	for k := range this.Sint64Map {
		keysForSint64Map = append(keysForSint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSint64Map)
	mapStringForSint64Map := "map[int64]int64{"
	for _, k := range keysForSint64Map {
		mapStringForSint64Map += fmt.Sprintf("%v: %v,", k, this.Sint64Map[k])
	}
	mapStringForSint64Map += "}"
	keysForFixed32Map := make([]uint32, 0, len(this.Fixed32Map))
	for k := range this.Fixed32Map {
		keysForFixed32Map = append(keysForFixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForFixed32Map)
	mapStringForFixed32Map := "map[uint32]uint32{"
	for _, k := range keysForFixed32Map {
		mapStringForFixed32Map += fmt.Sprintf("%v: %v,", k, this.Fixed32Map[k])
	}
	mapStringForFixed32Map += "}"
	keysForSfixed32Map := make([]int32, 0, len(this.Sfixed32Map))
	for k := range this.Sfixed32Map {
		keysForSfixed32Map = append(keysForSfixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSfixed32Map)
	mapStringForSfixed32Map := "map[int32]int32{"
	for _, k := range keysForSfixed32Map {
		mapStringForSfixed32Map += fmt.Sprintf("%v: %v,", k, this.Sfixed32Map[k])
	}
	mapStringForSfixed32Map += "}"
	keysForFixed64Map := make([]uint64, 0, len(this.Fixed64Map))
	for k := range this.Fixed64Map {
		keysForFixed64Map = append(keysForFixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForFixed64Map)
	mapStringForFixed64Map := "map[uint64]uint64{"
	for _, k := range keysForFixed64Map {
		mapStringForFixed64Map += fmt.Sprintf("%v: %v,", k, this.Fixed64Map[k])
	}
	mapStringForFixed64Map += "}"
	keysForSfixed64Map := make([]int64, 0, len(this.Sfixed64Map))
	for k := range this.Sfixed64Map {
		keysForSfixed64Map = append(keysForSfixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSfixed64Map)
	mapStringForSfixed64Map := "map[int64]int64{"
	for _, k := range keysForSfixed64Map {
		mapStringForSfixed64Map += fmt.Sprintf("%v: %v,", k, this.Sfixed64Map[k])
	}
	mapStringForSfixed64Map += "}"
	keysForBoolMap := make([]bool, 0, len(this.BoolMap))
	for k := range this.BoolMap {
		keysForBoolMap = append(keysForBoolMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Bools(keysForBoolMap)
	mapStringForBoolMap := "map[bool]bool{"
	for _, k := range keysForBoolMap {
		mapStringForBoolMap += fmt.Sprintf("%v: %v,", k, this.BoolMap[k])
	}
	mapStringForBoolMap += "}"
	keysForStringMap := make([]string, 0, len(this.StringMap))
	for k := range this.StringMap {
		keysForStringMap = append(keysForStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringMap)
	mapStringForStringMap := "map[string]string{"
	for _, k := range keysForStringMap {
		mapStringForStringMap += fmt.Sprintf("%v: %v,", k, this.StringMap[k])
	}
	mapStringForStringMap += "}"
	keysForStringToBytesMap := make([]string, 0, len(this.StringToBytesMap))
	for k := range this.StringToBytesMap {
		keysForStringToBytesMap = append(keysForStringToBytesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToBytesMap)
	mapStringForStringToBytesMap := "map[string][]byte{"
	for _, k := range keysForStringToBytesMap {
		mapStringForStringToBytesMap += fmt.Sprintf("%v: %v,", k, this.StringToBytesMap[k])
	}
	mapStringForStringToBytesMap += "}"
	keysForStringToEnumMap := make([]string, 0, len(this.StringToEnumMap))
	for k := range this.StringToEnumMap {
		keysForStringToEnumMap = append(keysForStringToEnumMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToEnumMap)
	mapStringForStringToEnumMap := "map[string]MapEnum{"
	for _, k := range keysForStringToEnumMap {
		mapStringForStringToEnumMap += fmt.Sprintf("%v: %v,", k, this.StringToEnumMap[k])
	}
	mapStringForStringToEnumMap += "}"
	keysForStringToMsgMap := make([]string, 0, len(this.StringToMsgMap))
	for k := range this.StringToMsgMap {
		keysForStringToMsgMap = append(keysForStringToMsgMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToMsgMap)
	mapStringForStringToMsgMap := "map[string]*FloatingPoint{"
	for _, k := range keysForStringToMsgMap {
		mapStringForStringToMsgMap += fmt.Sprintf("%v: %v,", k, this.StringToMsgMap[k])
	}
	mapStringForStringToMsgMap += "}"
	s := strings.Join([]string{`&AllMaps{`,
		`StringToDoubleMap:` + mapStringForStringToDoubleMap + `,`,
		`StringToFloatMap:` + mapStringForStringToFloatMap + `,`,
		`Int32Map:` + mapStringForInt32Map + `,`,
		`Int64Map:` + mapStringForInt64Map + `,`,
		`Uint32Map:` + mapStringForUint32Map + `,`,
		`Uint64Map:` + mapStringForUint64Map + `,`,
		`Sint32Map:` + mapStringForSint32Map + `,`,
		`Sint64Map:` + mapStringForSint64Map + `,`,
		`Fixed32Map:` + mapStringForFixed32Map + `,`,
		`Sfixed32Map:` + mapStringForSfixed32Map + `,`,
		`Fixed64Map:` + mapStringForFixed64Map + `,`,
		`Sfixed64Map:` + mapStringForSfixed64Map + `,`,
		`BoolMap:` + mapStringForBoolMap + `,`,
		`StringMap:` + mapStringForStringMap + `,`,
		`StringToBytesMap:` + mapStringForStringToBytesMap + `,`,
		`StringToEnumMap:` + mapStringForStringToEnumMap + `,`,
		`StringToMsgMap:` + mapStringForStringToMsgMap + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllMapsOrdered) String() string {
	if this == nil {
		return "nil"
	}
	keysForStringToDoubleMap := make([]string, 0, len(this.StringToDoubleMap))
	for k := range this.StringToDoubleMap {
		keysForStringToDoubleMap = append(keysForStringToDoubleMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToDoubleMap)
	mapStringForStringToDoubleMap := "map[string]float64{"
	for _, k := range keysForStringToDoubleMap {
		mapStringForStringToDoubleMap += fmt.Sprintf("%v: %v,", k, this.StringToDoubleMap[k])
	}
	mapStringForStringToDoubleMap += "}"
	keysForStringToFloatMap := make([]string, 0, len(this.StringToFloatMap))
	for k := range this.StringToFloatMap {
		keysForStringToFloatMap = append(keysForStringToFloatMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToFloatMap)
	mapStringForStringToFloatMap := "map[string]float32{"
	for _, k := range keysForStringToFloatMap {
		mapStringForStringToFloatMap += fmt.Sprintf("%v: %v,", k, this.StringToFloatMap[k])
	}
	mapStringForStringToFloatMap += "}"
	keysForInt32Map := make([]int32, 0, len(this.Int32Map))
	for k := range this.Int32Map {
		keysForInt32Map = append(keysForInt32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForInt32Map)
	mapStringForInt32Map := "map[int32]int32{"
	for _, k := range keysForInt32Map {
		mapStringForInt32Map += fmt.Sprintf("%v: %v,", k, this.Int32Map[k])
	}
	mapStringForInt32Map += "}"
	keysForInt64Map := make([]int64, 0, len(this.Int64Map))
	for k := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForInt64Map)
	mapStringForInt64Map := "map[int64]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%v: %v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	keysForUint32Map := make([]uint32, 0, len(this.Uint32Map))
	for k := range this.Uint32Map {
		keysForUint32Map = append(keysForUint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForUint32Map)
	mapStringForUint32Map := "map[uint32]uint32{"
	for _, k := range keysForUint32Map {
		mapStringForUint32Map += fmt.Sprintf("%v: %v,", k, this.Uint32Map[k])
	}
	mapStringForUint32Map += "}"
	keysForUint64Map := make([]uint64, 0, len(this.Uint64Map))
	for k := range this.Uint64Map {
		keysForUint64Map = append(keysForUint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForUint64Map)
	mapStringForUint64Map := "map[uint64]uint64{"
	for _, k := range keysForUint64Map {
		mapStringForUint64Map += fmt.Sprintf("%v: %v,", k, this.Uint64Map[k])
	}
	mapStringForUint64Map += "}"
	keysForSint32Map := make([]int32, 0, len(this.Sint32Map))
	for k := range this.Sint32Map {
		keysForSint32Map = append(keysForSint32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSint32Map)
	mapStringForSint32Map := "map[int32]int32{"
	for _, k := range keysForSint32Map {
		mapStringForSint32Map += fmt.Sprintf("%v: %v,", k, this.Sint32Map[k])
	}
	mapStringForSint32Map += "}"
	keysForSint64Map := make([]int64, 0, len(this.Sint64Map))
	for k := range this.Sint64Map {
		keysForSint64Map = append(keysForSint64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSint64Map)
	mapStringForSint64Map := "map[int64]int64{"
	for _, k := range keysForSint64Map {
		mapStringForSint64Map += fmt.Sprintf("%v: %v,", k, this.Sint64Map[k])
	}
	mapStringForSint64Map += "}"
	keysForFixed32Map := make([]uint32, 0, len(this.Fixed32Map))
	for k := range this.Fixed32Map {
		keysForFixed32Map = append(keysForFixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForFixed32Map)
	mapStringForFixed32Map := "map[uint32]uint32{"
	for _, k := range keysForFixed32Map {
		mapStringForFixed32Map += fmt.Sprintf("%v: %v,", k, this.Fixed32Map[k])
	}
	mapStringForFixed32Map += "}"
	keysForSfixed32Map := make([]int32, 0, len(this.Sfixed32Map))
	for k := range this.Sfixed32Map {
		keysForSfixed32Map = append(keysForSfixed32Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSfixed32Map)
	mapStringForSfixed32Map := "map[int32]int32{"
	for _, k := range keysForSfixed32Map {
		mapStringForSfixed32Map += fmt.Sprintf("%v: %v,", k, this.Sfixed32Map[k])
	}
	mapStringForSfixed32Map += "}"
	keysForFixed64Map := make([]uint64, 0, len(this.Fixed64Map))
	for k := range this.Fixed64Map {
		keysForFixed64Map = append(keysForFixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForFixed64Map)
	mapStringForFixed64Map := "map[uint64]uint64{"
	for _, k := range keysForFixed64Map {
		mapStringForFixed64Map += fmt.Sprintf("%v: %v,", k, this.Fixed64Map[k])
	}
	mapStringForFixed64Map += "}"
	keysForSfixed64Map := make([]int64, 0, len(this.Sfixed64Map))
	for k := range this.Sfixed64Map {
		keysForSfixed64Map = append(keysForSfixed64Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSfixed64Map)
	mapStringForSfixed64Map := "map[int64]int64{"
	for _, k := range keysForSfixed64Map {
		mapStringForSfixed64Map += fmt.Sprintf("%v: %v,", k, this.Sfixed64Map[k])
	}
	mapStringForSfixed64Map += "}"
	keysForBoolMap := make([]bool, 0, len(this.BoolMap))
	for k := range this.BoolMap {
		keysForBoolMap = append(keysForBoolMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Bools(keysForBoolMap)
	mapStringForBoolMap := "map[bool]bool{"
	for _, k := range keysForBoolMap {
		mapStringForBoolMap += fmt.Sprintf("%v: %v,", k, this.BoolMap[k])
	}
	mapStringForBoolMap += "}"
	keysForStringMap := make([]string, 0, len(this.StringMap))
	for k := range this.StringMap {
		keysForStringMap = append(keysForStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringMap)
	mapStringForStringMap := "map[string]string{"
	for _, k := range keysForStringMap {
		mapStringForStringMap += fmt.Sprintf("%v: %v,", k, this.StringMap[k])
	}
	mapStringForStringMap += "}"
	keysForStringToBytesMap := make([]string, 0, len(this.StringToBytesMap))
	for k := range this.StringToBytesMap {
		keysForStringToBytesMap = append(keysForStringToBytesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToBytesMap)
	mapStringForStringToBytesMap := "map[string][]byte{"
	for _, k := range keysForStringToBytesMap {
		mapStringForStringToBytesMap += fmt.Sprintf("%v: %v,", k, this.StringToBytesMap[k])
	}
	mapStringForStringToBytesMap += "}"
	keysForStringToEnumMap := make([]string, 0, len(this.StringToEnumMap))
	for k := range this.StringToEnumMap {
		keysForStringToEnumMap = append(keysForStringToEnumMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToEnumMap)
	mapStringForStringToEnumMap := "map[string]MapEnum{"
	for _, k := range keysForStringToEnumMap {
		mapStringForStringToEnumMap += fmt.Sprintf("%v: %v,", k, this.StringToEnumMap[k])
	}
	mapStringForStringToEnumMap += "}"
	keysForStringToMsgMap := make([]string, 0, len(this.StringToMsgMap))
	for k := range this.StringToMsgMap {
		keysForStringToMsgMap = append(keysForStringToMsgMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStringToMsgMap)
	mapStringForStringToMsgMap := "map[string]*FloatingPoint{"
	for _, k := range keysForStringToMsgMap {
		mapStringForStringToMsgMap += fmt.Sprintf("%v: %v,", k, this.StringToMsgMap[k])
	}
	mapStringForStringToMsgMap += "}"
	s := strings.Join([]string{`&AllMapsOrdered{`,
		`StringToDoubleMap:` + mapStringForStringToDoubleMap + `,`,
		`StringToFloatMap:` + mapStringForStringToFloatMap + `,`,
		`Int32Map:` + mapStringForInt32Map + `,`,
		`Int64Map:` + mapStringForInt64Map + `,`,
		`Uint32Map:` + mapStringForUint32Map + `,`,
		`Uint64Map:` + mapStringForUint64Map + `,`,
		`Sint32Map:` + mapStringForSint32Map + `,`,
		`Sint64Map:` + mapStringForSint64Map + `,`,
		`Fixed32Map:` + mapStringForFixed32Map + `,`,
		`Sfixed32Map:` + mapStringForSfixed32Map + `,`,
		`Fixed64Map:` + mapStringForFixed64Map + `,`,
		`Sfixed64Map:` + mapStringForSfixed64Map + `,`,
		`BoolMap:` + mapStringForBoolMap + `,`,
		`StringMap:` + mapStringForStringMap + `,`,
		`StringToBytesMap:` + mapStringForStringToBytesMap + `,`,
		`StringToEnumMap:` + mapStringForStringToEnumMap + `,`,
		`StringToMsgMap:` + mapStringForStringToMsgMap + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMapsproto2(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}

func init() { proto.RegisterFile("combos/neither/mapsproto2.proto", fileDescriptorMapsproto2) }

var fileDescriptorMapsproto2 = []byte{
	// 1148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x97, 0xcd, 0x6f, 0x1a, 0xc7,
	0x1b, 0xc7, 0x77, 0xc0, 0x36, 0x30, 0xbc, 0x4f, 0xfc, 0xfb, 0x09, 0x21, 0x75, 0x70, 0xe8, 0x1b,
	0x21, 0x29, 0xd8, 0x34, 0x8a, 0x2c, 0xa7, 0x4d, 0x65, 0x6c, 0xa7, 0x58, 0x29, 0x6e, 0x04, 0x4d,
	0xdf, 0x24, 0x4b, 0x05, 0xb3, 0x10, 0x54, 0x60, 0x29, 0xbb, 0x44, 0xf5, 0xa5, 0xca, 0x9f, 0xd1,
	0x6b, 0x6f, 0x3d, 0xf6, 0xd8, 0x63, 0x8f, 0x96, 0x7a, 0xc9, 0x31, 0x8a, 0x2a, 0x2b, 0x6c, 0x2f,
	0x39, 0xe6, 0x98, 0x63, 0xb5, 0xb3, 0xbb, 0x30, 0xbb, 0xfb, 0xec, 0x2e, 0xf4, 0xd4, 0x83, 0x4f,
	0x78, 0x96, 0xe7, 0xfb, 0xf9, 0x3e, 0xbb, 0x3b, 0xf3, 0xf0, 0x35, 0xce, 0x9d, 0x49, 0xc3, 0xb6,
	0x24, 0x97, 0x47, 0x62, 0x5f, 0x79, 0x2c, 0x4e, 0xca, 0xc3, 0xd6, 0x58, 0x1e, 0x4f, 0x24, 0x45,
	0xaa, 0x94, 0xd8, 0x07, 0x89, 0x1a, 0x2b, 0xed, 0x8b, 0xec, 0x07, 0xbd, 0xbe, 0xf2, 0x78, 0xda,
	0x2e, 0x9d, 0x49, 0xc3, 0x72, 0x4f, 0xea, 0x49, 0x65, 0xf6, 0x65, 0x7b, 0xda, 0x65, 0x2b, 0xb6,
	0x60, 0x7f, 0xe9, 0xda, 0xfc, 0x5b, 0x38, 0x7e, 0x7f, 0x20, 0xb5, 0x94, 0xfe, 0xa8, 0xf7, 0x50,
	0xea, 0x8f, 0x14, 0x12, 0xc3, 0xa8, 0x9b, 0x41, 0x5b, 0xa8, 0x80, 0x1a, 0xa8, 0x9b, 0xff, 0x73,
	0x1d, 0x47, 0x0e, 0xa6, 0xb2, 0x22, 0x0d, 0xeb, 0xad, 0x31, 0xf9, 0x09, 0xc7, 0x4e, 0xa6, 0x83,
	0x41, 0xab, 0x3d, 0x10, 0x77, 0x2a, 0xbb, 0x72, 0x06, 0x6d, 0x05, 0x0b, 0xd1, 0x4a, 0xa1, 0xc4,
	0xf9, 0x97, 0xe6, 0xd5, 0x25, 0xbe, 0xf4, 0x68, 0xa4, 0x4c, 0xce, 0xab, 0xdb, 0x2f, 0x2e, 0x73,
	0xb7, 0x5c, 0xfb, 0x53, 0x44, 0x59, 0x29, 0x9f, 0x31, 0x79, 0xe9, 0x51, 0x7f, 0xa4, 0xec, 0x54,
	0x76, 0x1b, 0x16, 0x3f, 0xf2, 0x04, 0x87, 0x8d, 0x2f, 0xe4, 0x4c, 0x80, 0x79, 0xbf, 0xe3, 0xe2,
	0x6d, 0x96, 0xe9, 0xbe, 0xb7, 0x2f, 0x2e, 0x73, 0xc2, 0xca, 0xde, 0x73, 0x2f, 0xf2, 0x03, 0x8e,
	0x9a, 0x7d, 0x1c, 0x77, 0xe4, 0x4c, 0x90, 0x59, 0xbf, 0xef, 0x73, 0xdb, 0xc7, 0x1d, 0xc3, 0xfd,
	0xbd, 0x17, 0x97, 0xb9, 0xbc, 0xa7, 0x73, 0xe9, 0xd1, 0xb4, 0xdf, 0x69, 0xf0, 0x1e, 0xe4, 0x14,
	0x07, 0x35, 0xab, 0x35, 0x66, 0x95, 0x73, 0xb1, 0x9a, 0x5b, 0x14, 0x8d, 0x1b, 0x5c, 0xc6, 0x46,
	0xe3, 0x66, 0x3f, 0xc1, 0x69, 0xc7, 0xeb, 0x21, 0x29, 0x1c, 0xfc, 0x5e, 0x3c, 0x67, 0x2f, 0x3f,
	0xd2, 0xd0, 0xfe, 0x24, 0x9b, 0x78, 0xfd, 0x49, 0x6b, 0x30, 0x15, 0x33, 0x81, 0x2d, 0x54, 0x88,
	0x35, 0xf4, 0xc5, 0x5e, 0x60, 0x17, 0x65, 0xef, 0xe2, 0xb8, 0xe5, 0x19, 0xaf, 0x24, 0xbe, 0x87,
	0x53, 0xf6, 0xa7, 0xb4, 0x92, 0xfe, 0x0e, 0x0e, 0xff, 0x1b, 0x5d, 0xfe, 0x39, 0xc1, 0xa1, 0xfd,
	0xc1, 0xa0, 0xde, 0x1a, 0xcb, 0xe4, 0x1b, 0x9c, 0x6e, 0x2a, 0x93, 0xfe, 0xa8, 0xf7, 0x85, 0x74,
	0x28, 0x4d, 0xdb, 0x03, 0xb1, 0xde, 0x1a, 0x1b, 0x1b, 0xfa, 0xa6, 0xe5, 0x71, 0x1b, 0x82, 0x92,
	0xa3, 0x9a, 0xf9, 0x37, 0x9c, 0x14, 0xf2, 0x25, 0x4e, 0x99, 0x17, 0xd9, 0xd9, 0xd2, 0xc8, 0xfa,
	0x76, 0x2d, 0x7a, 0x92, 0xcd, 0x62, 0x1d, 0xec, 0x60, 0x90, 0x7b, 0x38, 0x7c, 0x3c, 0x52, 0x3e,
	0xac, 0x68, 0x3c, 0x7d, 0x0f, 0xe6, 0x41, 0x9e, 0x59, 0xa4, 0x73, 0xe6, 0x1a, 0x43, 0x7f, 0xe7,
	0xb6, 0xa6, 0x5f, 0xf3, 0xd6, 0xb3, 0xa2, 0x85, 0x9e, 0x2d, 0xc9, 0x3e, 0x8e, 0x68, 0xef, 0x5c,
	0x6f, 0x60, 0x9d, 0x01, 0xde, 0x06, 0x01, 0xf3, 0x2a, 0x9d, 0xb0, 0x50, 0x99, 0x08, 0xbd, 0x87,
	0x0d, 0x1f, 0x04, 0xd7, 0xc4, 0x42, 0xa5, 0x21, 0x9a, 0xf3, 0x2e, 0x42, 0x1e, 0x88, 0xa6, 0xad,
	0x8b, 0x26, 0xdf, 0x45, 0x73, 0xde, 0x45, 0xd8, 0x07, 0xc1, 0x77, 0x31, 0x5f, 0x93, 0x43, 0x8c,
	0xef, 0xf7, 0x7f, 0x14, 0x3b, 0x7a, 0x1b, 0x11, 0x60, 0x18, 0x99, 0x8c, 0x45, 0x99, 0x0e, 0xe1,
	0x74, 0xe4, 0x53, 0x1c, 0x6d, 0x76, 0x17, 0x18, 0xcc, 0x30, 0xef, 0xc2, 0xad, 0x74, 0x6d, 0x1c,
	0x5e, 0x39, 0x6f, 0x47, 0xbf, 0xa5, 0xa8, 0x5f, 0x3b, 0xdc, 0x3d, 0x71, 0xba, 0x45, 0x3b, 0x3a,
	0x26, 0xe6, 0xdb, 0x0e, 0xc7, 0xe1, 0x95, 0xe4, 0x2e, 0x0e, 0x55, 0x25, 0x49, 0xab, 0xcc, 0xc4,
	0x19, 0xe4, 0x3a, 0x08, 0x31, 0x6a, 0x74, 0x80, 0xa9, 0x60, 0x6f, 0x87, 0x6d, 0x7d, 0x4d, 0x9e,
	0xf0, 0x7a, 0x3b, 0x66, 0x95, 0xf9, 0x76, 0xcc, 0x35, 0x7f, 0x02, 0xab, 0xe7, 0x8a, 0x28, 0x6b,
	0xa4, 0xe4, 0x12, 0x27, 0xd0, 0x2c, 0xb6, 0x9d, 0x40, 0xf3, 0x32, 0x69, 0xe2, 0xa4, 0x79, 0xed,
	0x68, 0x34, 0xd5, 0x66, 0x70, 0x26, 0xc5, 0xb0, 0x37, 0x3c, 0xb1, 0x46, 0xad, 0x4e, 0xb5, 0x13,
	0xc8, 0x43, 0x9c, 0x30, 0x2f, 0xd5, 0x65, 0x76, 0xd3, 0x69, 0xe0, 0x77, 0xd5, 0xce, 0xd4, 0x4b,
	0x75, 0xa4, 0x4d, 0x9f, 0x3d, 0xc4, 0xff, 0x87, 0xa7, 0x95, 0xdf, 0xb4, 0x44, 0xfc, 0x94, 0x3d,
	0xc0, 0xff, 0x03, 0x27, 0x93, 0x1f, 0x24, 0x60, 0xfb, 0x9d, 0xb0, 0x8c, 0x23, 0x5e, 0xbc, 0x0e,
	0x88, 0xd7, 0x9d, 0xe2, 0xc5, 0x26, 0xe3, 0xc5, 0x41, 0x40, 0x1c, 0xe4, 0xc5, 0x1f, 0xe1, 0x84,
	0x75, 0x0e, 0xf1, 0xea, 0x38, 0xa0, 0x8e, 0x03, 0x6a, 0xd8, 0x7b, 0x0d, 0x50, 0xaf, 0xd9, 0xd4,
	0x4d, 0x57, 0xef, 0x34, 0xa0, 0x4e, 0x03, 0x6a, 0xd8, 0x9b, 0x00, 0x6a, 0xc2, 0xab, 0x3f, 0xc6,
	0x49, 0xdb, 0xc8, 0xe1, 0xe5, 0x21, 0x40, 0x1e, 0xb2, 0xfd, 0x36, 0xdb, 0x47, 0x0d, 0xaf, 0x4f,
	0x02, 0xfa, 0x24, 0x64, 0x0f, 0x77, 0xbf, 0x01, 0xc8, 0x37, 0x40, 0x7b, 0x58, 0x9f, 0x02, 0xf4,
	0x29, 0x5e, 0xbf, 0x87, 0x63, 0xfc, 0x54, 0xe1, 0xb5, 0x61, 0x40, 0x1b, 0xb6, 0x3f, 0x77, 0xcb,
	0x48, 0xf1, 0xdb, 0xe9, 0x11, 0x97, 0xe3, 0x62, 0x19, 0x23, 0x2b, 0x25, 0x9b, 0xaf, 0xf1, 0x26,
	0x34, 0x34, 0x00, 0x46, 0x91, 0x67, 0x24, 0x2a, 0x9b, 0x96, 0x61, 0xc1, 0x74, 0xd3, 0x21, 0x4f,
	0x3e, 0xc5, 0xd7, 0x80, 0xd1, 0x01, 0x80, 0xb7, 0x79, 0x70, 0xb4, 0x92, 0xb5, 0x80, 0x2d, 0xff,
	0x2b, 0xf0, 0xd1, 0xea, 0xaf, 0x6b, 0x38, 0x61, 0x8c, 0xa8, 0xcf, 0x27, 0x1d, 0x71, 0x22, 0x76,
	0xc8, 0x77, 0xee, 0x09, 0xab, 0x02, 0x8d, 0x36, 0x43, 0xb7, 0x42, 0xd0, 0x3a, 0x75, 0x0d, 0x5a,
	0x3b, 0xcb, 0x18, 0xf8, 0xe5, 0xad, 0x23, 0x47, 0xde, 0xba, 0xe1, 0x85, 0x75, 0x8b, 0x5d, 0x47,
	0x8e, 0xd8, 0xe5, 0x87, 0x01, 0xd3, 0x57, 0xcd, 0x99, 0xbe, 0x8a, 0x5e, 0x1c, 0xf7, 0x10, 0x56,
	0x73, 0x86, 0x30, 0x5f, 0x12, 0x9c, 0xc5, 0x6a, 0xce, 0x2c, 0xe6, 0x49, 0x72, 0x8f, 0x64, 0x35,
	0x67, 0x24, 0xf3, 0x25, 0xc1, 0xc9, 0xec, 0x01, 0x90, 0xcc, 0x6e, 0x7a, 0xa1, 0xbc, 0x02, 0xda,
	0x09, 0x14, 0xd0, 0x6e, 0x79, 0x36, 0xe6, 0x99, 0xd3, 0x1e, 0x00, 0x39, 0xcd, 0xbf, 0x39, 0x97,
	0xb8, 0x76, 0x02, 0xc5, 0xb5, 0x25, 0x9a, 0x73, 0x4b, 0x6d, 0x55, 0x7b, 0x6a, 0x2b, 0x78, 0xb1,
	0xe0, 0xf0, 0x56, 0x73, 0x86, 0xb7, 0xa2, 0xff, 0x59, 0x84, 0x32, 0xdc, 0xa9, 0x6b, 0x86, 0x5b,
	0xea, 0x70, 0xfb, 0x45, 0xb9, 0x6f, 0xdd, 0xa2, 0xdc, 0xf6, 0x32, 0x74, 0xef, 0x44, 0xf7, 0x95,
	0x4b, 0xa2, 0x2b, 0x2f, 0x83, 0xbe, 0x0a, 0x76, 0x57, 0xc1, 0xee, 0x2a, 0xd8, 0x5d, 0x05, 0xbb,
	0xff, 0x46, 0xb0, 0xdb, 0x5b, 0xfb, 0xf9, 0x97, 0x1c, 0x2a, 0x5e, 0xc7, 0x21, 0xc3, 0x9a, 0x6c,
	0xe0, 0x40, 0x7d, 0x3f, 0x25, 0xb0, 0xcf, 0x6a, 0x0a, 0xb1, 0xcf, 0x83, 0x54, 0xa0, 0xfa, 0xd9,
	0xc5, 0x8c, 0x0a, 0xcf, 0x66, 0x54, 0x78, 0x3e, 0xa3, 0xc2, 0xcb, 0x19, 0x45, 0xaf, 0x66, 0x14,
	0xbd, 0x9e, 0x51, 0xf4, 0x66, 0x46, 0xd1, 0x53, 0x95, 0xa2, 0x5f, 0x55, 0x8a, 0x7e, 0x53, 0x29,
	0xfa, 0x5d, 0xa5, 0xe8, 0x0f, 0x95, 0xa2, 0x0b, 0x95, 0x0a, 0xcf, 0x54, 0x2a, 0xbc, 0x54, 0x29,
	0x7a, 0xa5, 0x52, 0xe1, 0xb5, 0x4a, 0xd1, 0x1b, 0x95, 0x0a, 0x4f, 0xff, 0xa6, 0xc2, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x3c, 0x2b, 0x76, 0x8f, 0xf5, 0x16, 0x00, 0x00,
}
