// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: example.proto

package customname

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Bar struct {
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Bar) Reset()      { *m = Bar{} }
func (*Bar) ProtoMessage() {}
func (*Bar) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{0}
}
func (m *Bar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bar.Merge(m, src)
}
func (m *Bar) XXX_Size() int {
	return m.Size()
}
func (m *Bar) XXX_DiscardUnknown() {
	xxx_messageInfo_Bar.DiscardUnknown(m)
}

var xxx_messageInfo_Bar proto.InternalMessageInfo

func (m *Bar) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Bar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Foo struct {
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	URL  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Foo) Reset()      { *m = Foo{} }
func (*Foo) ProtoMessage() {}
func (*Foo) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{1}
}
func (m *Foo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Foo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Foo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Foo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Foo.Merge(m, src)
}
func (m *Foo) XXX_Size() int {
	return m.Size()
}
func (m *Foo) XXX_DiscardUnknown() {
	xxx_messageInfo_Foo.DiscardUnknown(m)
}

var xxx_messageInfo_Foo proto.InternalMessageInfo

func (m *Foo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Foo) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Foo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetBarRequest struct {
	IDBartender string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetBarRequest) Reset()      { *m = GetBarRequest{} }
func (*GetBarRequest) ProtoMessage() {}
func (*GetBarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{2}
}
func (m *GetBarRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBarRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBarRequest.Merge(m, src)
}
func (m *GetBarRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBarRequest proto.InternalMessageInfo

func (m *GetBarRequest) GetIDBartender() string {
	if m != nil {
		return m.IDBartender
	}
	return ""
}

type GetBarResponse struct {
	Bar *Bar `protobuf:"bytes,1,opt,name=bar,proto3" json:"bar,omitempty"`
}

func (m *GetBarResponse) Reset()      { *m = GetBarResponse{} }
func (*GetBarResponse) ProtoMessage() {}
func (*GetBarResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{3}
}
func (m *GetBarResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBarResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBarResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBarResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBarResponse.Merge(m, src)
}
func (m *GetBarResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBarResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBarResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBarResponse proto.InternalMessageInfo

func (m *GetBarResponse) GetBar() *Bar {
	if m != nil {
		return m.Bar
	}
	return nil
}

type DeleteBarRequest struct {
	IDBartenderToDelete string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteBarRequest) Reset()      { *m = DeleteBarRequest{} }
func (*DeleteBarRequest) ProtoMessage() {}
func (*DeleteBarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{4}
}
func (m *DeleteBarRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBarRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBarRequest.Merge(m, src)
}
func (m *DeleteBarRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBarRequest proto.InternalMessageInfo

func (m *DeleteBarRequest) GetIDBartenderToDelete() string {
	if m != nil {
		return m.IDBartenderToDelete
	}
	return ""
}

type DeleteBarResponse struct {
}

func (m *DeleteBarResponse) Reset()      { *m = DeleteBarResponse{} }
func (*DeleteBarResponse) ProtoMessage() {}
func (*DeleteBarResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{5}
}
func (m *DeleteBarResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBarResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBarResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBarResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBarResponse.Merge(m, src)
}
func (m *DeleteBarResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBarResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBarResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBarResponse proto.InternalMessageInfo

type GetFooRequest struct {
	IDFoofighter string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetFooRequest) Reset()      { *m = GetFooRequest{} }
func (*GetFooRequest) ProtoMessage() {}
func (*GetFooRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{6}
}
func (m *GetFooRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFooRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFooRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFooRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFooRequest.Merge(m, src)
}
func (m *GetFooRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFooRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFooRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFooRequest proto.InternalMessageInfo

func (m *GetFooRequest) GetIDFoofighter() string {
	if m != nil {
		return m.IDFoofighter
	}
	return ""
}

type GetFooResponse struct {
	Foo *Foo `protobuf:"bytes,1,opt,name=foo,proto3" json:"foo,omitempty"`
}

func (m *GetFooResponse) Reset()      { *m = GetFooResponse{} }
func (*GetFooResponse) ProtoMessage() {}
func (*GetFooResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{7}
}
func (m *GetFooResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFooResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFooResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFooResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFooResponse.Merge(m, src)
}
func (m *GetFooResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFooResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFooResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFooResponse proto.InternalMessageInfo

func (m *GetFooResponse) GetFoo() *Foo {
	if m != nil {
		return m.Foo
	}
	return nil
}

type UpdateFooRequest struct {
	Foo *Foo `protobuf:"bytes,1,opt,name=foo,proto3" json:"foo,omitempty"`
}

func (m *UpdateFooRequest) Reset()      { *m = UpdateFooRequest{} }
func (*UpdateFooRequest) ProtoMessage() {}
func (*UpdateFooRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{8}
}
func (m *UpdateFooRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFooRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFooRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateFooRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFooRequest.Merge(m, src)
}
func (m *UpdateFooRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFooRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFooRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFooRequest proto.InternalMessageInfo

func (m *UpdateFooRequest) GetFoo() *Foo {
	if m != nil {
		return m.Foo
	}
	return nil
}

type UpdateFooResponse struct {
	Foo *Foo `protobuf:"bytes,1,opt,name=foo,proto3" json:"foo,omitempty"`
}

func (m *UpdateFooResponse) Reset()      { *m = UpdateFooResponse{} }
func (*UpdateFooResponse) ProtoMessage() {}
func (*UpdateFooResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{9}
}
func (m *UpdateFooResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFooResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFooResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateFooResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFooResponse.Merge(m, src)
}
func (m *UpdateFooResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFooResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFooResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFooResponse proto.InternalMessageInfo

func (m *UpdateFooResponse) GetFoo() *Foo {
	if m != nil {
		return m.Foo
	}
	return nil
}

func init() {
	proto.RegisterType((*Bar)(nil), "customname.Bar")
	proto.RegisterType((*Foo)(nil), "customname.Foo")
	proto.RegisterType((*GetBarRequest)(nil), "customname.GetBarRequest")
	proto.RegisterType((*GetBarResponse)(nil), "customname.GetBarResponse")
	proto.RegisterType((*DeleteBarRequest)(nil), "customname.DeleteBarRequest")
	proto.RegisterType((*DeleteBarResponse)(nil), "customname.DeleteBarResponse")
	proto.RegisterType((*GetFooRequest)(nil), "customname.GetFooRequest")
	proto.RegisterType((*GetFooResponse)(nil), "customname.GetFooResponse")
	proto.RegisterType((*UpdateFooRequest)(nil), "customname.UpdateFooRequest")
	proto.RegisterType((*UpdateFooResponse)(nil), "customname.UpdateFooResponse")
}

func init() { proto.RegisterFile("example.proto", fileDescriptor_15a1dc8d40dadaa6) }

var fileDescriptor_15a1dc8d40dadaa6 = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x31, 0x6f, 0xd3, 0x4e,
	0x18, 0xc6, 0x7d, 0xf1, 0x5f, 0xf9, 0x2b, 0x57, 0x4a, 0xd3, 0x2b, 0x82, 0xc4, 0x2a, 0xe7, 0xe2,
	0x05, 0x54, 0x89, 0x98, 0xb4, 0xc0, 0x00, 0x13, 0x56, 0x14, 0x14, 0xa9, 0x53, 0x44, 0x07, 0xc6,
	0x73, 0x7d, 0x71, 0x2d, 0x25, 0x7e, 0x83, 0x73, 0x46, 0x48, 0xa8, 0x12, 0x62, 0x62, 0x44, 0xe2,
	0x4b, 0xf0, 0x51, 0x18, 0x23, 0xb1, 0x74, 0xb2, 0xc8, 0x85, 0x81, 0xb1, 0x1f, 0x01, 0xf9, 0x4c,
	0x93, 0x73, 0xd2, 0x4a, 0xdd, 0xee, 0xfc, 0xbe, 0xcf, 0xfb, 0x7b, 0xf4, 0xbc, 0x67, 0xbc, 0xc9,
	0x3f, 0xb0, 0xd1, 0x78, 0xc8, 0x5b, 0xe3, 0x04, 0x04, 0x10, 0x7c, 0x92, 0x4e, 0x04, 0x8c, 0x62,
	0x36, 0xe2, 0xd6, 0xe3, 0x30, 0x12, 0xa7, 0xa9, 0xdf, 0x3a, 0x81, 0x91, 0x1b, 0x42, 0x08, 0xae,
	0x6a, 0xf1, 0xd3, 0x81, 0xba, 0xa9, 0x8b, 0x3a, 0x15, 0x52, 0x6b, 0x37, 0x04, 0x08, 0x87, 0xdc,
	0x65, 0xe3, 0xc8, 0x65, 0x71, 0x0c, 0x82, 0x89, 0x08, 0xe2, 0x49, 0x51, 0x75, 0xda, 0xd8, 0xf4,
	0x58, 0x42, 0xee, 0xe2, 0x4a, 0x14, 0x34, 0xd0, 0x1e, 0x7a, 0x54, 0xf3, 0xaa, 0x32, 0xb3, 0x2b,
	0xbd, 0x4e, 0xbf, 0x12, 0x05, 0x84, 0xe0, 0xff, 0x72, 0x66, 0xa3, 0x92, 0x57, 0xfa, 0xea, 0xec,
	0x1c, 0x61, 0xb3, 0x0b, 0x70, 0xad, 0xa4, 0x89, 0xcd, 0x34, 0x19, 0x16, 0x0a, 0xef, 0x7f, 0x99,
	0xd9, 0xe6, 0x71, 0xff, 0xa8, 0x9f, 0x7f, 0x5b, 0x4c, 0x33, 0xb5, 0x69, 0x4f, 0xf0, 0xe6, 0x6b,
	0x2e, 0x3c, 0x96, 0xf4, 0xf9, 0xbb, 0x94, 0x4f, 0x04, 0xb1, 0xb5, 0xb9, 0x5b, 0x32, 0xb3, 0x37,
	0x7a, 0x1d, 0x8f, 0x25, 0x82, 0xc7, 0x01, 0x4f, 0x72, 0x80, 0x73, 0x88, 0x6f, 0x5f, 0x2a, 0x26,
	0x63, 0x88, 0x27, 0x9c, 0x3c, 0xc0, 0xa6, 0xcf, 0x12, 0xa5, 0xd9, 0x38, 0xd8, 0x6a, 0x2d, 0xb3,
	0x6a, 0xe5, 0x5d, 0x79, 0xcd, 0x79, 0x89, 0xeb, 0x1d, 0x3e, 0xe4, 0x82, 0x6b, 0xa4, 0x87, 0x1a,
	0xe9, 0x9e, 0xcc, 0xec, 0x1d, 0x8d, 0xf4, 0x06, 0x8a, 0x76, 0x45, 0xdc, 0xc1, 0xdb, 0x9a, 0xb8,
	0x80, 0x3a, 0x6d, 0x65, 0xbc, 0x0b, 0x70, 0x39, 0x6e, 0x4f, 0x1b, 0x57, 0x97, 0x99, 0x7d, 0xab,
	0xd7, 0xe9, 0x02, 0x0c, 0xa2, 0xf0, 0x54, 0x94, 0x9c, 0x2b, 0xc9, 0xd2, 0xf9, 0x00, 0xe0, 0x2a,
	0xe7, 0x79, 0x57, 0x5e, 0x73, 0x9e, 0xe1, 0xfa, 0xf1, 0x38, 0x60, 0x82, 0x6b, 0xa8, 0x1b, 0xc8,
	0x9e, 0xe3, 0x6d, 0x4d, 0x76, 0x63, 0xdc, 0xc1, 0x17, 0x13, 0xa3, 0x57, 0xe4, 0x2d, 0xae, 0x16,
	0x19, 0x93, 0xa6, 0xde, 0x55, 0xda, 0x94, 0x65, 0x5d, 0x55, 0xfa, 0x97, 0x4e, 0xe3, 0xf3, 0xcf,
	0xdf, 0xdf, 0x2a, 0x84, 0xd4, 0xd5, 0xbb, 0x7b, 0xdf, 0x76, 0x7d, 0x96, 0xb8, 0x1f, 0xa3, 0xe0,
	0x8c, 0xf8, 0xb8, 0xb6, 0x08, 0x93, 0xec, 0xea, 0x23, 0x56, 0x17, 0x64, 0xdd, 0xbf, 0xa6, 0x5a,
	0x66, 0xec, 0xaf, 0x33, 0x0a, 0xfb, 0xf9, 0x2b, 0x5d, 0xb5, 0xbf, 0x0c, 0x71, 0xcd, 0xbe, 0x16,
	0xd4, 0xba, 0xfd, 0x01, 0x40, 0x31, 0x3a, 0xc2, 0xb5, 0x45, 0xae, 0x65, 0xfb, 0xab, 0x5b, 0x2a,
	0xdb, 0x5f, 0x5b, 0x86, 0x63, 0x2b, 0x46, 0xd3, 0xba, 0x53, 0x62, 0x0c, 0x00, 0x5a, 0x51, 0x70,
	0xf6, 0x02, 0xed, 0x7b, 0x4f, 0xa7, 0x33, 0x6a, 0x9c, 0xcf, 0xa8, 0x71, 0x31, 0xa3, 0xe8, 0x93,
	0xa4, 0xe8, 0xbb, 0xa4, 0xe8, 0x87, 0xa4, 0x68, 0x2a, 0x29, 0xfa, 0x25, 0x29, 0xfa, 0x23, 0xa9,
	0x71, 0x21, 0x29, 0xfa, 0x3a, 0xa7, 0xc6, 0x74, 0x4e, 0x8d, 0xf3, 0x39, 0x35, 0xfc, 0xaa, 0xfa,
	0xb1, 0x0f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x93, 0xcb, 0xab, 0x42, 0x04, 0x00, 0x00,
}

func (this *Bar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bar)
	if !ok {
		that2, ok := that.(Bar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Foo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Foo)
	if !ok {
		that2, ok := that.(Foo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetBarRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBarRequest)
	if !ok {
		that2, ok := that.(GetBarRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IDBartender != that1.IDBartender {
		return false
	}
	return true
}
func (this *GetBarResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBarResponse)
	if !ok {
		that2, ok := that.(GetBarResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bar.Equal(that1.Bar) {
		return false
	}
	return true
}
func (this *DeleteBarRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteBarRequest)
	if !ok {
		that2, ok := that.(DeleteBarRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IDBartenderToDelete != that1.IDBartenderToDelete {
		return false
	}
	return true
}
func (this *DeleteBarResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteBarResponse)
	if !ok {
		that2, ok := that.(DeleteBarResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetFooRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFooRequest)
	if !ok {
		that2, ok := that.(GetFooRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IDFoofighter != that1.IDFoofighter {
		return false
	}
	return true
}
func (this *GetFooResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFooResponse)
	if !ok {
		that2, ok := that.(GetFooResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Foo.Equal(that1.Foo) {
		return false
	}
	return true
}
func (this *UpdateFooRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateFooRequest)
	if !ok {
		that2, ok := that.(UpdateFooRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Foo.Equal(that1.Foo) {
		return false
	}
	return true
}
func (this *UpdateFooResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateFooResponse)
	if !ok {
		that2, ok := that.(UpdateFooResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Foo.Equal(that1.Foo) {
		return false
	}
	return true
}
func (this *Bar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&customname.Bar{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Foo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&customname.Foo{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBarRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&customname.GetBarRequest{")
	s = append(s, "IDBartender: "+fmt.Sprintf("%#v", this.IDBartender)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBarResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&customname.GetBarResponse{")
	if this.Bar != nil {
		s = append(s, "Bar: "+fmt.Sprintf("%#v", this.Bar)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteBarRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&customname.DeleteBarRequest{")
	s = append(s, "IDBartenderToDelete: "+fmt.Sprintf("%#v", this.IDBartenderToDelete)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteBarResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&customname.DeleteBarResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFooRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&customname.GetFooRequest{")
	s = append(s, "IDFoofighter: "+fmt.Sprintf("%#v", this.IDFoofighter)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFooResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&customname.GetFooResponse{")
	if this.Foo != nil {
		s = append(s, "Foo: "+fmt.Sprintf("%#v", this.Foo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateFooRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&customname.UpdateFooRequest{")
	if this.Foo != nil {
		s = append(s, "Foo: "+fmt.Sprintf("%#v", this.Foo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateFooResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&customname.UpdateFooResponse{")
	if this.Foo != nil {
		s = append(s, "Foo: "+fmt.Sprintf("%#v", this.Foo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringExample(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AClient is the client API for A service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AClient interface {
	GetBar(ctx context.Context, in *GetBarRequest, opts ...grpc.CallOption) (*GetBarResponse, error)
	DeleteBar(ctx context.Context, in *DeleteBarRequest, opts ...grpc.CallOption) (*DeleteBarResponse, error)
	GetFoo(ctx context.Context, in *GetFooRequest, opts ...grpc.CallOption) (*GetFooResponse, error)
	UpdateFoo(ctx context.Context, in *UpdateFooRequest, opts ...grpc.CallOption) (*UpdateFooResponse, error)
}

type aClient struct {
	cc *grpc.ClientConn
}

func NewAClient(cc *grpc.ClientConn) AClient {
	return &aClient{cc}
}

func (c *aClient) GetBar(ctx context.Context, in *GetBarRequest, opts ...grpc.CallOption) (*GetBarResponse, error) {
	out := new(GetBarResponse)
	err := c.cc.Invoke(ctx, "/customname.A/GetBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aClient) DeleteBar(ctx context.Context, in *DeleteBarRequest, opts ...grpc.CallOption) (*DeleteBarResponse, error) {
	out := new(DeleteBarResponse)
	err := c.cc.Invoke(ctx, "/customname.A/DeleteBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aClient) GetFoo(ctx context.Context, in *GetFooRequest, opts ...grpc.CallOption) (*GetFooResponse, error) {
	out := new(GetFooResponse)
	err := c.cc.Invoke(ctx, "/customname.A/GetFoo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aClient) UpdateFoo(ctx context.Context, in *UpdateFooRequest, opts ...grpc.CallOption) (*UpdateFooResponse, error) {
	out := new(UpdateFooResponse)
	err := c.cc.Invoke(ctx, "/customname.A/UpdateFoo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AServer is the server API for A service.
type AServer interface {
	GetBar(context.Context, *GetBarRequest) (*GetBarResponse, error)
	DeleteBar(context.Context, *DeleteBarRequest) (*DeleteBarResponse, error)
	GetFoo(context.Context, *GetFooRequest) (*GetFooResponse, error)
	UpdateFoo(context.Context, *UpdateFooRequest) (*UpdateFooResponse, error)
}

// UnimplementedAServer can be embedded to have forward compatible implementations.
type UnimplementedAServer struct {
}

func (*UnimplementedAServer) GetBar(ctx context.Context, req *GetBarRequest) (*GetBarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBar not implemented")
}
func (*UnimplementedAServer) DeleteBar(ctx context.Context, req *DeleteBarRequest) (*DeleteBarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBar not implemented")
}
func (*UnimplementedAServer) GetFoo(ctx context.Context, req *GetFooRequest) (*GetFooResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoo not implemented")
}
func (*UnimplementedAServer) UpdateFoo(ctx context.Context, req *UpdateFooRequest) (*UpdateFooResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFoo not implemented")
}

func RegisterAServer(s *grpc.Server, srv AServer) {
	s.RegisterService(&_A_serviceDesc, srv)
}

func _A_GetBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AServer).GetBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customname.A/GetBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AServer).GetBar(ctx, req.(*GetBarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _A_DeleteBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AServer).DeleteBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customname.A/DeleteBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AServer).DeleteBar(ctx, req.(*DeleteBarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _A_GetFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AServer).GetFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customname.A/GetFoo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AServer).GetFoo(ctx, req.(*GetFooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _A_UpdateFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AServer).UpdateFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customname.A/UpdateFoo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AServer).UpdateFoo(ctx, req.(*UpdateFooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _A_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customname.A",
	HandlerType: (*AServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBar",
			Handler:    _A_GetBar_Handler,
		},
		{
			MethodName: "DeleteBar",
			Handler:    _A_DeleteBar_Handler,
		},
		{
			MethodName: "GetFoo",
			Handler:    _A_GetFoo_Handler,
		},
		{
			MethodName: "UpdateFoo",
			Handler:    _A_UpdateFoo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}

func (m *Bar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Foo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Foo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GetBarRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBarRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IDBartender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.IDBartender)))
		i += copy(dAtA[i:], m.IDBartender)
	}
	return i, nil
}

func (m *GetBarResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBarResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Bar != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Bar.Size()))
		n1, err1 := m.Bar.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *DeleteBarRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBarRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IDBartenderToDelete) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.IDBartenderToDelete)))
		i += copy(dAtA[i:], m.IDBartenderToDelete)
	}
	return i, nil
}

func (m *DeleteBarResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBarResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetFooRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFooRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IDFoofighter) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.IDFoofighter)))
		i += copy(dAtA[i:], m.IDFoofighter)
	}
	return i, nil
}

func (m *GetFooResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFooResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Foo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Foo.Size()))
		n2, err2 := m.Foo.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func (m *UpdateFooRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFooRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Foo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Foo.Size()))
		n3, err3 := m.Foo.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}

func (m *UpdateFooResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFooResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Foo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Foo.Size()))
		n4, err4 := m.Foo.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	return i, nil
}

func encodeVarintExample(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Bar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *Foo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *GetBarRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IDBartender)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *GetBarResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bar != nil {
		l = m.Bar.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *DeleteBarRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IDBartenderToDelete)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *DeleteBarResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetFooRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IDFoofighter)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *GetFooResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Foo != nil {
		l = m.Foo.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *UpdateFooRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Foo != nil {
		l = m.Foo.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *UpdateFooResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Foo != nil {
		l = m.Foo.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func sovExample(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExample(x uint64) (n int) {
	return sovExample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Bar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bar{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Foo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Foo{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBarRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBarRequest{`,
		`IDBartender:` + fmt.Sprintf("%v", this.IDBartender) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBarResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBarResponse{`,
		`Bar:` + strings.Replace(this.Bar.String(), "Bar", "Bar", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteBarRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteBarRequest{`,
		`IDBartenderToDelete:` + fmt.Sprintf("%v", this.IDBartenderToDelete) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteBarResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteBarResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetFooRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFooRequest{`,
		`IDFoofighter:` + fmt.Sprintf("%v", this.IDFoofighter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFooResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFooResponse{`,
		`Foo:` + strings.Replace(this.Foo.String(), "Foo", "Foo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateFooRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateFooRequest{`,
		`Foo:` + strings.Replace(this.Foo.String(), "Foo", "Foo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateFooResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateFooResponse{`,
		`Foo:` + strings.Replace(this.Foo.String(), "Foo", "Foo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringExample(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Bar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Foo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Foo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Foo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBarRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBarRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBarRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDBartender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDBartender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBarResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBarResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBarResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bar == nil {
				m.Bar = &Bar{}
			}
			if err := m.Bar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBarRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBarRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBarRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDBartenderToDelete", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDBartenderToDelete = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBarResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBarResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBarResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFooRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFooRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFooRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDFoofighter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDFoofighter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFooResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFooResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFooResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Foo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Foo == nil {
				m.Foo = &Foo{}
			}
			if err := m.Foo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFooRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFooRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFooRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Foo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Foo == nil {
				m.Foo = &Foo{}
			}
			if err := m.Foo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFooResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFooResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFooResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Foo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Foo == nil {
				m.Foo = &Foo{}
			}
			if err := m.Foo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExample
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthExample
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExample
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExample(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthExample
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExample = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExample   = fmt.Errorf("proto: integer overflow")
)
