// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: combos/unmarshaler/one.proto

package one

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	github_com_gogo_protobuf_test_casttype "github.com/gogo/protobuf/test/casttype"
	github_com_gogo_protobuf_test_custom "github.com/gogo/protobuf/test/custom"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Subby struct {
	Sub                  *string  `protobuf:"bytes,1,opt,name=sub" json:"sub,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subby) Reset()      { *m = Subby{} }
func (*Subby) ProtoMessage() {}
func (*Subby) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eef12518f7c4f58, []int{0}
}
func (m *Subby) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subby.Marshal(b, m, deterministic)
}
func (m *Subby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subby.Merge(m, src)
}
func (m *Subby) XXX_Size() int {
	return xxx_messageInfo_Subby.Size(m)
}
func (m *Subby) XXX_DiscardUnknown() {
	xxx_messageInfo_Subby.DiscardUnknown(m)
}

var xxx_messageInfo_Subby proto.InternalMessageInfo

type AllTypesOneOf struct {
	// Types that are valid to be assigned to TestOneof:
	//	*AllTypesOneOf_Field1
	//	*AllTypesOneOf_Field2
	//	*AllTypesOneOf_Field3
	//	*AllTypesOneOf_Field4
	//	*AllTypesOneOf_Field5
	//	*AllTypesOneOf_Field6
	//	*AllTypesOneOf_Field7
	//	*AllTypesOneOf_Field8
	//	*AllTypesOneOf_Field9
	//	*AllTypesOneOf_Field10
	//	*AllTypesOneOf_Field11
	//	*AllTypesOneOf_Field12
	//	*AllTypesOneOf_Field13
	//	*AllTypesOneOf_Field14
	//	*AllTypesOneOf_Field15
	//	*AllTypesOneOf_SubMessage
	TestOneof            isAllTypesOneOf_TestOneof `protobuf_oneof:"test_oneof"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *AllTypesOneOf) Reset()      { *m = AllTypesOneOf{} }
func (*AllTypesOneOf) ProtoMessage() {}
func (*AllTypesOneOf) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eef12518f7c4f58, []int{1}
}
func (m *AllTypesOneOf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllTypesOneOf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllTypesOneOf.Marshal(b, m, deterministic)
}
func (m *AllTypesOneOf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllTypesOneOf.Merge(m, src)
}
func (m *AllTypesOneOf) XXX_Size() int {
	return xxx_messageInfo_AllTypesOneOf.Size(m)
}
func (m *AllTypesOneOf) XXX_DiscardUnknown() {
	xxx_messageInfo_AllTypesOneOf.DiscardUnknown(m)
}

var xxx_messageInfo_AllTypesOneOf proto.InternalMessageInfo

type isAllTypesOneOf_TestOneof interface {
	isAllTypesOneOf_TestOneof()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	Size() int
	Compare(interface{}) int
}

type AllTypesOneOf_Field1 struct {
	Field1 float64 `protobuf:"fixed64,1,opt,name=Field1,oneof" json:"Field1,omitempty"`
}
type AllTypesOneOf_Field2 struct {
	Field2 float32 `protobuf:"fixed32,2,opt,name=Field2,oneof" json:"Field2,omitempty"`
}
type AllTypesOneOf_Field3 struct {
	Field3 int32 `protobuf:"varint,3,opt,name=Field3,oneof" json:"Field3,omitempty"`
}
type AllTypesOneOf_Field4 struct {
	Field4 int64 `protobuf:"varint,4,opt,name=Field4,oneof" json:"Field4,omitempty"`
}
type AllTypesOneOf_Field5 struct {
	Field5 uint32 `protobuf:"varint,5,opt,name=Field5,oneof" json:"Field5,omitempty"`
}
type AllTypesOneOf_Field6 struct {
	Field6 uint64 `protobuf:"varint,6,opt,name=Field6,oneof" json:"Field6,omitempty"`
}
type AllTypesOneOf_Field7 struct {
	Field7 int32 `protobuf:"zigzag32,7,opt,name=Field7,oneof" json:"Field7,omitempty"`
}
type AllTypesOneOf_Field8 struct {
	Field8 int64 `protobuf:"zigzag64,8,opt,name=Field8,oneof" json:"Field8,omitempty"`
}
type AllTypesOneOf_Field9 struct {
	Field9 uint32 `protobuf:"fixed32,9,opt,name=Field9,oneof" json:"Field9,omitempty"`
}
type AllTypesOneOf_Field10 struct {
	Field10 int32 `protobuf:"fixed32,10,opt,name=Field10,oneof" json:"Field10,omitempty"`
}
type AllTypesOneOf_Field11 struct {
	Field11 uint64 `protobuf:"fixed64,11,opt,name=Field11,oneof" json:"Field11,omitempty"`
}
type AllTypesOneOf_Field12 struct {
	Field12 int64 `protobuf:"fixed64,12,opt,name=Field12,oneof" json:"Field12,omitempty"`
}
type AllTypesOneOf_Field13 struct {
	Field13 bool `protobuf:"varint,13,opt,name=Field13,oneof" json:"Field13,omitempty"`
}
type AllTypesOneOf_Field14 struct {
	Field14 string `protobuf:"bytes,14,opt,name=Field14,oneof" json:"Field14,omitempty"`
}
type AllTypesOneOf_Field15 struct {
	Field15 []byte `protobuf:"bytes,15,opt,name=Field15,oneof" json:"Field15,omitempty"`
}
type AllTypesOneOf_SubMessage struct {
	SubMessage *Subby `protobuf:"bytes,16,opt,name=sub_message,json=subMessage,oneof" json:"sub_message,omitempty"`
}

func (*AllTypesOneOf_Field1) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field2) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field3) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field4) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field5) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field6) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field7) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field8) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field9) isAllTypesOneOf_TestOneof()     {}
func (*AllTypesOneOf_Field10) isAllTypesOneOf_TestOneof()    {}
func (*AllTypesOneOf_Field11) isAllTypesOneOf_TestOneof()    {}
func (*AllTypesOneOf_Field12) isAllTypesOneOf_TestOneof()    {}
func (*AllTypesOneOf_Field13) isAllTypesOneOf_TestOneof()    {}
func (*AllTypesOneOf_Field14) isAllTypesOneOf_TestOneof()    {}
func (*AllTypesOneOf_Field15) isAllTypesOneOf_TestOneof()    {}
func (*AllTypesOneOf_SubMessage) isAllTypesOneOf_TestOneof() {}

func (m *AllTypesOneOf) GetTestOneof() isAllTypesOneOf_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (m *AllTypesOneOf) GetField1() float64 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field1); ok {
		return x.Field1
	}
	return 0
}

func (m *AllTypesOneOf) GetField2() float32 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field2); ok {
		return x.Field2
	}
	return 0
}

func (m *AllTypesOneOf) GetField3() int32 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field3); ok {
		return x.Field3
	}
	return 0
}

func (m *AllTypesOneOf) GetField4() int64 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field4); ok {
		return x.Field4
	}
	return 0
}

func (m *AllTypesOneOf) GetField5() uint32 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field5); ok {
		return x.Field5
	}
	return 0
}

func (m *AllTypesOneOf) GetField6() uint64 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field6); ok {
		return x.Field6
	}
	return 0
}

func (m *AllTypesOneOf) GetField7() int32 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field7); ok {
		return x.Field7
	}
	return 0
}

func (m *AllTypesOneOf) GetField8() int64 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field8); ok {
		return x.Field8
	}
	return 0
}

func (m *AllTypesOneOf) GetField9() uint32 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field9); ok {
		return x.Field9
	}
	return 0
}

func (m *AllTypesOneOf) GetField10() int32 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field10); ok {
		return x.Field10
	}
	return 0
}

func (m *AllTypesOneOf) GetField11() uint64 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field11); ok {
		return x.Field11
	}
	return 0
}

func (m *AllTypesOneOf) GetField12() int64 {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field12); ok {
		return x.Field12
	}
	return 0
}

func (m *AllTypesOneOf) GetField13() bool {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field13); ok {
		return x.Field13
	}
	return false
}

func (m *AllTypesOneOf) GetField14() string {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field14); ok {
		return x.Field14
	}
	return ""
}

func (m *AllTypesOneOf) GetField15() []byte {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_Field15); ok {
		return x.Field15
	}
	return nil
}

func (m *AllTypesOneOf) GetSubMessage() *Subby {
	if x, ok := m.GetTestOneof().(*AllTypesOneOf_SubMessage); ok {
		return x.SubMessage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AllTypesOneOf) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AllTypesOneOf_Field1)(nil),
		(*AllTypesOneOf_Field2)(nil),
		(*AllTypesOneOf_Field3)(nil),
		(*AllTypesOneOf_Field4)(nil),
		(*AllTypesOneOf_Field5)(nil),
		(*AllTypesOneOf_Field6)(nil),
		(*AllTypesOneOf_Field7)(nil),
		(*AllTypesOneOf_Field8)(nil),
		(*AllTypesOneOf_Field9)(nil),
		(*AllTypesOneOf_Field10)(nil),
		(*AllTypesOneOf_Field11)(nil),
		(*AllTypesOneOf_Field12)(nil),
		(*AllTypesOneOf_Field13)(nil),
		(*AllTypesOneOf_Field14)(nil),
		(*AllTypesOneOf_Field15)(nil),
		(*AllTypesOneOf_SubMessage)(nil),
	}
}

type TwoOneofs struct {
	// Types that are valid to be assigned to One:
	//	*TwoOneofs_Field1
	//	*TwoOneofs_Field2
	//	*TwoOneofs_Field3
	One isTwoOneofs_One `protobuf_oneof:"one"`
	// Types that are valid to be assigned to Two:
	//	*TwoOneofs_Field34
	//	*TwoOneofs_Field35
	//	*TwoOneofs_SubMessage2
	Two                  isTwoOneofs_Two `protobuf_oneof:"two"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TwoOneofs) Reset()      { *m = TwoOneofs{} }
func (*TwoOneofs) ProtoMessage() {}
func (*TwoOneofs) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eef12518f7c4f58, []int{2}
}
func (m *TwoOneofs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwoOneofs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TwoOneofs.Marshal(b, m, deterministic)
}
func (m *TwoOneofs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwoOneofs.Merge(m, src)
}
func (m *TwoOneofs) XXX_Size() int {
	return xxx_messageInfo_TwoOneofs.Size(m)
}
func (m *TwoOneofs) XXX_DiscardUnknown() {
	xxx_messageInfo_TwoOneofs.DiscardUnknown(m)
}

var xxx_messageInfo_TwoOneofs proto.InternalMessageInfo

type isTwoOneofs_One interface {
	isTwoOneofs_One()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	Size() int
	Compare(interface{}) int
}
type isTwoOneofs_Two interface {
	isTwoOneofs_Two()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	Size() int
	Compare(interface{}) int
}

type TwoOneofs_Field1 struct {
	Field1 float64 `protobuf:"fixed64,1,opt,name=Field1,oneof" json:"Field1,omitempty"`
}
type TwoOneofs_Field2 struct {
	Field2 float32 `protobuf:"fixed32,2,opt,name=Field2,oneof" json:"Field2,omitempty"`
}
type TwoOneofs_Field3 struct {
	Field3 int32 `protobuf:"varint,3,opt,name=Field3,oneof" json:"Field3,omitempty"`
}
type TwoOneofs_Field34 struct {
	Field34 string `protobuf:"bytes,34,opt,name=Field34,oneof" json:"Field34,omitempty"`
}
type TwoOneofs_Field35 struct {
	Field35 []byte `protobuf:"bytes,35,opt,name=Field35,oneof" json:"Field35,omitempty"`
}
type TwoOneofs_SubMessage2 struct {
	SubMessage2 *Subby `protobuf:"bytes,36,opt,name=sub_message2,json=subMessage2,oneof" json:"sub_message2,omitempty"`
}

func (*TwoOneofs_Field1) isTwoOneofs_One()      {}
func (*TwoOneofs_Field2) isTwoOneofs_One()      {}
func (*TwoOneofs_Field3) isTwoOneofs_One()      {}
func (*TwoOneofs_Field34) isTwoOneofs_Two()     {}
func (*TwoOneofs_Field35) isTwoOneofs_Two()     {}
func (*TwoOneofs_SubMessage2) isTwoOneofs_Two() {}

func (m *TwoOneofs) GetOne() isTwoOneofs_One {
	if m != nil {
		return m.One
	}
	return nil
}
func (m *TwoOneofs) GetTwo() isTwoOneofs_Two {
	if m != nil {
		return m.Two
	}
	return nil
}

func (m *TwoOneofs) GetField1() float64 {
	if x, ok := m.GetOne().(*TwoOneofs_Field1); ok {
		return x.Field1
	}
	return 0
}

func (m *TwoOneofs) GetField2() float32 {
	if x, ok := m.GetOne().(*TwoOneofs_Field2); ok {
		return x.Field2
	}
	return 0
}

func (m *TwoOneofs) GetField3() int32 {
	if x, ok := m.GetOne().(*TwoOneofs_Field3); ok {
		return x.Field3
	}
	return 0
}

func (m *TwoOneofs) GetField34() string {
	if x, ok := m.GetTwo().(*TwoOneofs_Field34); ok {
		return x.Field34
	}
	return ""
}

func (m *TwoOneofs) GetField35() []byte {
	if x, ok := m.GetTwo().(*TwoOneofs_Field35); ok {
		return x.Field35
	}
	return nil
}

func (m *TwoOneofs) GetSubMessage2() *Subby {
	if x, ok := m.GetTwo().(*TwoOneofs_SubMessage2); ok {
		return x.SubMessage2
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TwoOneofs) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TwoOneofs_Field1)(nil),
		(*TwoOneofs_Field2)(nil),
		(*TwoOneofs_Field3)(nil),
		(*TwoOneofs_Field34)(nil),
		(*TwoOneofs_Field35)(nil),
		(*TwoOneofs_SubMessage2)(nil),
	}
}

type CustomOneof struct {
	// Types that are valid to be assigned to Custom:
	//	*CustomOneof_Stringy
	//	*CustomOneof_CustomType
	//	*CustomOneof_CastType
	//	*CustomOneof_MyCustomName
	Custom               isCustomOneof_Custom `protobuf_oneof:"custom"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CustomOneof) Reset()      { *m = CustomOneof{} }
func (*CustomOneof) ProtoMessage() {}
func (*CustomOneof) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eef12518f7c4f58, []int{3}
}
func (m *CustomOneof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomOneof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomOneof.Marshal(b, m, deterministic)
}
func (m *CustomOneof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomOneof.Merge(m, src)
}
func (m *CustomOneof) XXX_Size() int {
	return xxx_messageInfo_CustomOneof.Size(m)
}
func (m *CustomOneof) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomOneof.DiscardUnknown(m)
}

var xxx_messageInfo_CustomOneof proto.InternalMessageInfo

type isCustomOneof_Custom interface {
	isCustomOneof_Custom()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	Size() int
	Compare(interface{}) int
}

type CustomOneof_Stringy struct {
	Stringy string `protobuf:"bytes,34,opt,name=Stringy,oneof" json:"Stringy,omitempty"`
}
type CustomOneof_CustomType struct {
	CustomType github_com_gogo_protobuf_test_custom.Uint128 `protobuf:"bytes,35,opt,name=CustomType,oneof,customtype=github.com/gogo/protobuf/test/custom.Uint128" json:"CustomType,omitempty"`
}
type CustomOneof_CastType struct {
	CastType github_com_gogo_protobuf_test_casttype.MyUint64Type `protobuf:"varint,36,opt,name=CastType,oneof,casttype=github.com/gogo/protobuf/test/casttype.MyUint64Type" json:"CastType,omitempty"`
}
type CustomOneof_MyCustomName struct {
	MyCustomName int64 `protobuf:"varint,37,opt,name=CustomName,oneof" json:"CustomName,omitempty"`
}

func (*CustomOneof_Stringy) isCustomOneof_Custom()      {}
func (*CustomOneof_CustomType) isCustomOneof_Custom()   {}
func (*CustomOneof_CastType) isCustomOneof_Custom()     {}
func (*CustomOneof_MyCustomName) isCustomOneof_Custom() {}

func (m *CustomOneof) GetCustom() isCustomOneof_Custom {
	if m != nil {
		return m.Custom
	}
	return nil
}

func (m *CustomOneof) GetStringy() string {
	if x, ok := m.GetCustom().(*CustomOneof_Stringy); ok {
		return x.Stringy
	}
	return ""
}

func (m *CustomOneof) GetCastType() github_com_gogo_protobuf_test_casttype.MyUint64Type {
	if x, ok := m.GetCustom().(*CustomOneof_CastType); ok {
		return x.CastType
	}
	return 0
}

func (m *CustomOneof) GetMyCustomName() int64 {
	if x, ok := m.GetCustom().(*CustomOneof_MyCustomName); ok {
		return x.MyCustomName
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CustomOneof) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CustomOneof_Stringy)(nil),
		(*CustomOneof_CustomType)(nil),
		(*CustomOneof_CastType)(nil),
		(*CustomOneof_MyCustomName)(nil),
	}
}

func init() {
	proto.RegisterType((*Subby)(nil), "one.Subby")
	proto.RegisterType((*AllTypesOneOf)(nil), "one.AllTypesOneOf")
	proto.RegisterType((*TwoOneofs)(nil), "one.TwoOneofs")
	proto.RegisterType((*CustomOneof)(nil), "one.CustomOneof")
}

func init() { proto.RegisterFile("combos/unmarshaler/one.proto", fileDescriptor_9eef12518f7c4f58) }

var fileDescriptor_9eef12518f7c4f58 = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd3, 0xbf, 0x4f, 0x1b, 0x3f,
	0x14, 0x00, 0x70, 0x3f, 0x42, 0x42, 0x70, 0xc2, 0x97, 0x7c, 0x6f, 0x72, 0x51, 0x65, 0xac, 0xb4,
	0x95, 0x3c, 0x94, 0x84, 0x5c, 0x12, 0x7e, 0x8c, 0x3d, 0xa4, 0x2a, 0x0b, 0x45, 0x3a, 0x60, 0x46,
	0x39, 0x6a, 0x42, 0xa4, 0xe4, 0x8c, 0xe2, 0x3b, 0xa1, 0x6c, 0xfc, 0x0d, 0xfd, 0x2b, 0x18, 0x3b,
	0xf6, 0x4f, 0x60, 0xcc, 0x58, 0x75, 0x88, 0xb8, 0x63, 0xe9, 0xc8, 0x88, 0x3a, 0x55, 0xbe, 0x23,
	0x76, 0xa5, 0xaa, 0xea, 0xd2, 0x29, 0xf7, 0xde, 0xe7, 0xfc, 0xf2, 0xde, 0xd9, 0xc6, 0x2f, 0xcf,
	0xe5, 0x38, 0x90, 0xaa, 0x19, 0x87, 0xe3, 0xfe, 0x44, 0x5d, 0xf6, 0x47, 0x62, 0xd2, 0x94, 0xa1,
	0x68, 0x5c, 0x4d, 0x64, 0x24, 0x9d, 0x82, 0x0c, 0xc5, 0xc6, 0xd6, 0x60, 0x18, 0x5d, 0xc6, 0x41,
	0xe3, 0x5c, 0x8e, 0x9b, 0x03, 0x39, 0x90, 0xcd, 0xcc, 0x82, 0xf8, 0x22, 0x8b, 0xb2, 0x20, 0x7b,
	0xca, 0xd7, 0xd4, 0x5f, 0xe0, 0xe2, 0x71, 0x1c, 0x04, 0x53, 0xa7, 0x86, 0x0b, 0x2a, 0x0e, 0x08,
	0x30, 0xe0, 0xab, 0xbe, 0x7e, 0xac, 0xcf, 0x0b, 0x78, 0xed, 0xdd, 0x68, 0x74, 0x32, 0xbd, 0x12,
	0xea, 0x28, 0x14, 0x47, 0x17, 0x0e, 0xc1, 0xa5, 0xf7, 0x43, 0x31, 0xfa, 0xd8, 0xca, 0x5e, 0x83,
	0x1e, 0xf2, 0x9f, 0x63, 0x23, 0x2e, 0x59, 0x62, 0xc0, 0x97, 0x8c, 0xb8, 0x46, 0xda, 0xa4, 0xc0,
	0x80, 0x17, 0x8d, 0xb4, 0x8d, 0x74, 0xc8, 0x32, 0x03, 0x5e, 0x30, 0xd2, 0x31, 0xd2, 0x25, 0x45,
	0x06, 0x7c, 0xcd, 0x48, 0xd7, 0xc8, 0x0e, 0x29, 0x31, 0xe0, 0xcb, 0x46, 0x76, 0x8c, 0xec, 0x92,
	0x15, 0x06, 0xfc, 0x7f, 0x23, 0xbb, 0x46, 0xf6, 0x48, 0x99, 0x01, 0x77, 0x8c, 0xec, 0x19, 0xd9,
	0x27, 0xab, 0x0c, 0xf8, 0x8a, 0x91, 0x7d, 0x67, 0x03, 0xaf, 0xe4, 0x93, 0x6d, 0x13, 0xcc, 0x80,
	0xaf, 0xf7, 0x90, 0xbf, 0x48, 0x58, 0x6b, 0x91, 0x0a, 0x03, 0x5e, 0xb2, 0xd6, 0xb2, 0xe6, 0x92,
	0x2a, 0x03, 0x5e, 0xb3, 0xe6, 0x5a, 0x6b, 0x93, 0x35, 0x06, 0xbc, 0x6c, 0xad, 0x6d, 0xad, 0x43,
	0xfe, 0xd3, 0x3b, 0x60, 0xad, 0x63, 0xad, 0x4b, 0xd6, 0x19, 0xf0, 0xaa, 0xb5, 0xae, 0xb3, 0x85,
	0x2b, 0x2a, 0x0e, 0xce, 0xc6, 0x42, 0xa9, 0xfe, 0x40, 0x90, 0x1a, 0x03, 0x5e, 0x71, 0x71, 0x43,
	0x9f, 0x89, 0x6c, 0x5b, 0x7b, 0xc8, 0xc7, 0x2a, 0x0e, 0x0e, 0x73, 0xf7, 0xaa, 0x18, 0x47, 0x42,
	0x45, 0x67, 0x32, 0x14, 0xf2, 0xa2, 0x3e, 0x03, 0xbc, 0x7a, 0x72, 0x2d, 0x8f, 0x74, 0xa0, 0xfe,
	0xf1, 0xe6, 0x2e, 0x9a, 0x6e, 0x77, 0x48, 0x3d, 0x1b, 0x08, 0xfc, 0x45, 0xc2, 0x5a, 0x97, 0xbc,
	0xca, 0x06, 0x32, 0xd6, 0x75, 0x9a, 0xb8, 0xfa, 0xcb, 0x40, 0x2e, 0x79, 0xfd, 0xdb, 0x44, 0xe0,
	0x57, 0xec, 0x44, 0xae, 0x57, 0xc4, 0xfa, 0xd8, 0xeb, 0x9f, 0xe8, 0x5a, 0xd6, 0x3f, 0x2d, 0xe1,
	0xca, 0x41, 0xac, 0x22, 0x39, 0xce, 0xa6, 0xd2, 0x7f, 0x75, 0x1c, 0x4d, 0x86, 0xe1, 0x60, 0xfa,
	0xdc, 0x06, 0xf2, 0x17, 0x09, 0xc7, 0xc7, 0x38, 0x7f, 0x55, 0x9f, 0xf0, 0xbc, 0x13, 0x6f, 0xfb,
	0xdb, 0x7c, 0xf3, 0xed, 0x1f, 0x6f, 0x90, 0xfe, 0x76, 0xcd, 0xf3, 0x6c, 0x4d, 0xe3, 0x74, 0x18,
	0x46, 0x2d, 0x77, 0x4f, 0x7f, 0x60, 0x5b, 0xc5, 0x39, 0xc5, 0xe5, 0x83, 0xbe, 0x8a, 0xb2, 0x8a,
	0xba, 0xf5, 0x65, 0x6f, 0xf7, 0xc7, 0x7c, 0xb3, 0xfd, 0x97, 0x8a, 0x7d, 0x15, 0x45, 0xd3, 0x2b,
	0xd1, 0x38, 0x9c, 0xea, 0xaa, 0x3b, 0x1d, 0xbd, 0xbc, 0x87, 0x7c, 0x53, 0xca, 0x71, 0x17, 0xad,
	0x7e, 0xe8, 0x8f, 0x05, 0x79, 0xa3, 0xaf, 0x8b, 0x57, 0x4b, 0xe7, 0x9b, 0xd5, 0xc3, 0xa9, 0xcd,
	0xdb, 0x56, 0x74, 0xe4, 0x95, 0x71, 0x29, 0x6f, 0xd5, 0xeb, 0xdd, 0x25, 0x14, 0xcd, 0x12, 0x8a,
	0xbe, 0x26, 0x14, 0xdd, 0x27, 0x14, 0x1e, 0x13, 0x0a, 0x4f, 0x09, 0x85, 0x9b, 0x94, 0xc2, 0x6d,
	0x4a, 0xe1, 0x73, 0x4a, 0xe1, 0x4b, 0x4a, 0xe1, 0x2e, 0xa5, 0x68, 0x96, 0x52, 0xb8, 0x4f, 0x29,
	0x7c, 0x4f, 0x29, 0x7a, 0x4c, 0x29, 0x3c, 0xa5, 0x14, 0xdd, 0x3c, 0x50, 0x74, 0xfb, 0x40, 0xe1,
	0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xcb, 0x68, 0xec, 0x80, 0x04, 0x00, 0x00,
}

func (this *Subby) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*Subby)
	if !ok {
		that2, ok := that.(Subby)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Sub != nil && that1.Sub != nil {
		if *this.Sub != *that1.Sub {
			if *this.Sub < *that1.Sub {
				return -1
			}
			return 1
		}
	} else if this.Sub != nil {
		return 1
	} else if that1.Sub != nil {
		return -1
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *AllTypesOneOf) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf)
	if !ok {
		that2, ok := that.(AllTypesOneOf)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if that1.TestOneof == nil {
		if this.TestOneof != nil {
			return 1
		}
	} else if this.TestOneof == nil {
		return -1
	} else {
		thisType := -1
		switch this.TestOneof.(type) {
		case *AllTypesOneOf_Field1:
			thisType = 0
		case *AllTypesOneOf_Field2:
			thisType = 1
		case *AllTypesOneOf_Field3:
			thisType = 2
		case *AllTypesOneOf_Field4:
			thisType = 3
		case *AllTypesOneOf_Field5:
			thisType = 4
		case *AllTypesOneOf_Field6:
			thisType = 5
		case *AllTypesOneOf_Field7:
			thisType = 6
		case *AllTypesOneOf_Field8:
			thisType = 7
		case *AllTypesOneOf_Field9:
			thisType = 8
		case *AllTypesOneOf_Field10:
			thisType = 9
		case *AllTypesOneOf_Field11:
			thisType = 10
		case *AllTypesOneOf_Field12:
			thisType = 11
		case *AllTypesOneOf_Field13:
			thisType = 12
		case *AllTypesOneOf_Field14:
			thisType = 13
		case *AllTypesOneOf_Field15:
			thisType = 14
		case *AllTypesOneOf_SubMessage:
			thisType = 15
		default:
			panic(fmt.Sprintf("compare: unexpected type %T in oneof", this.TestOneof))
		}
		that1Type := -1
		switch that1.TestOneof.(type) {
		case *AllTypesOneOf_Field1:
			that1Type = 0
		case *AllTypesOneOf_Field2:
			that1Type = 1
		case *AllTypesOneOf_Field3:
			that1Type = 2
		case *AllTypesOneOf_Field4:
			that1Type = 3
		case *AllTypesOneOf_Field5:
			that1Type = 4
		case *AllTypesOneOf_Field6:
			that1Type = 5
		case *AllTypesOneOf_Field7:
			that1Type = 6
		case *AllTypesOneOf_Field8:
			that1Type = 7
		case *AllTypesOneOf_Field9:
			that1Type = 8
		case *AllTypesOneOf_Field10:
			that1Type = 9
		case *AllTypesOneOf_Field11:
			that1Type = 10
		case *AllTypesOneOf_Field12:
			that1Type = 11
		case *AllTypesOneOf_Field13:
			that1Type = 12
		case *AllTypesOneOf_Field14:
			that1Type = 13
		case *AllTypesOneOf_Field15:
			that1Type = 14
		case *AllTypesOneOf_SubMessage:
			that1Type = 15
		default:
			panic(fmt.Sprintf("compare: unexpected type %T in oneof", that1.TestOneof))
		}
		if thisType == that1Type {
			if c := this.TestOneof.Compare(that1.TestOneof); c != 0 {
				return c
			}
		} else if thisType < that1Type {
			return -1
		} else if thisType > that1Type {
			return 1
		}
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *AllTypesOneOf_Field1) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field1)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field1)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field1 != that1.Field1 {
		if this.Field1 < that1.Field1 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field2) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field2)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field2)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field2 != that1.Field2 {
		if this.Field2 < that1.Field2 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field3) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field3)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field3)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field3 != that1.Field3 {
		if this.Field3 < that1.Field3 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field4) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field4)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field4)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field4 != that1.Field4 {
		if this.Field4 < that1.Field4 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field5) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field5)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field5)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field5 != that1.Field5 {
		if this.Field5 < that1.Field5 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field6) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field6)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field6)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field6 != that1.Field6 {
		if this.Field6 < that1.Field6 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field7) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field7)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field7)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field7 != that1.Field7 {
		if this.Field7 < that1.Field7 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field8) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field8)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field8)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field8 != that1.Field8 {
		if this.Field8 < that1.Field8 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field9) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field9)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field9)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field9 != that1.Field9 {
		if this.Field9 < that1.Field9 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field10) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field10)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field10)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field10 != that1.Field10 {
		if this.Field10 < that1.Field10 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field11) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field11)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field11)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field11 != that1.Field11 {
		if this.Field11 < that1.Field11 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field12) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field12)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field12)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field12 != that1.Field12 {
		if this.Field12 < that1.Field12 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field13) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field13)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field13)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field13 != that1.Field13 {
		if !this.Field13 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field14) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field14)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field14)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field14 != that1.Field14 {
		if this.Field14 < that1.Field14 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AllTypesOneOf_Field15) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_Field15)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field15)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Field15, that1.Field15); c != 0 {
		return c
	}
	return 0
}
func (this *AllTypesOneOf_SubMessage) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AllTypesOneOf_SubMessage)
	if !ok {
		that2, ok := that.(AllTypesOneOf_SubMessage)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.SubMessage.Compare(that1.SubMessage); c != 0 {
		return c
	}
	return 0
}
func (this *TwoOneofs) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*TwoOneofs)
	if !ok {
		that2, ok := that.(TwoOneofs)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if that1.One == nil {
		if this.One != nil {
			return 1
		}
	} else if this.One == nil {
		return -1
	} else {
		thisType := -1
		switch this.One.(type) {
		case *TwoOneofs_Field1:
			thisType = 0
		case *TwoOneofs_Field2:
			thisType = 1
		case *TwoOneofs_Field3:
			thisType = 2
		default:
			panic(fmt.Sprintf("compare: unexpected type %T in oneof", this.One))
		}
		that1Type := -1
		switch that1.One.(type) {
		case *TwoOneofs_Field1:
			that1Type = 0
		case *TwoOneofs_Field2:
			that1Type = 1
		case *TwoOneofs_Field3:
			that1Type = 2
		default:
			panic(fmt.Sprintf("compare: unexpected type %T in oneof", that1.One))
		}
		if thisType == that1Type {
			if c := this.One.Compare(that1.One); c != 0 {
				return c
			}
		} else if thisType < that1Type {
			return -1
		} else if thisType > that1Type {
			return 1
		}
	}
	if that1.Two == nil {
		if this.Two != nil {
			return 1
		}
	} else if this.Two == nil {
		return -1
	} else {
		thisType := -1
		switch this.Two.(type) {
		case *TwoOneofs_Field34:
			thisType = 3
		case *TwoOneofs_Field35:
			thisType = 4
		case *TwoOneofs_SubMessage2:
			thisType = 5
		default:
			panic(fmt.Sprintf("compare: unexpected type %T in oneof", this.Two))
		}
		that1Type := -1
		switch that1.Two.(type) {
		case *TwoOneofs_Field34:
			that1Type = 3
		case *TwoOneofs_Field35:
			that1Type = 4
		case *TwoOneofs_SubMessage2:
			that1Type = 5
		default:
			panic(fmt.Sprintf("compare: unexpected type %T in oneof", that1.Two))
		}
		if thisType == that1Type {
			if c := this.Two.Compare(that1.Two); c != 0 {
				return c
			}
		} else if thisType < that1Type {
			return -1
		} else if thisType > that1Type {
			return 1
		}
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *TwoOneofs_Field1) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*TwoOneofs_Field1)
	if !ok {
		that2, ok := that.(TwoOneofs_Field1)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field1 != that1.Field1 {
		if this.Field1 < that1.Field1 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *TwoOneofs_Field2) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*TwoOneofs_Field2)
	if !ok {
		that2, ok := that.(TwoOneofs_Field2)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field2 != that1.Field2 {
		if this.Field2 < that1.Field2 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *TwoOneofs_Field3) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*TwoOneofs_Field3)
	if !ok {
		that2, ok := that.(TwoOneofs_Field3)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field3 != that1.Field3 {
		if this.Field3 < that1.Field3 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *TwoOneofs_Field34) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*TwoOneofs_Field34)
	if !ok {
		that2, ok := that.(TwoOneofs_Field34)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Field34 != that1.Field34 {
		if this.Field34 < that1.Field34 {
			return -1
		}
		return 1
	}
	return 0
}
func (this *TwoOneofs_Field35) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*TwoOneofs_Field35)
	if !ok {
		that2, ok := that.(TwoOneofs_Field35)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Field35, that1.Field35); c != 0 {
		return c
	}
	return 0
}
func (this *TwoOneofs_SubMessage2) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*TwoOneofs_SubMessage2)
	if !ok {
		that2, ok := that.(TwoOneofs_SubMessage2)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.SubMessage2.Compare(that1.SubMessage2); c != 0 {
		return c
	}
	return 0
}
func (this *CustomOneof) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*CustomOneof)
	if !ok {
		that2, ok := that.(CustomOneof)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if that1.Custom == nil {
		if this.Custom != nil {
			return 1
		}
	} else if this.Custom == nil {
		return -1
	} else {
		thisType := -1
		switch this.Custom.(type) {
		case *CustomOneof_Stringy:
			thisType = 0
		case *CustomOneof_CustomType:
			thisType = 1
		case *CustomOneof_CastType:
			thisType = 2
		case *CustomOneof_MyCustomName:
			thisType = 3
		default:
			panic(fmt.Sprintf("compare: unexpected type %T in oneof", this.Custom))
		}
		that1Type := -1
		switch that1.Custom.(type) {
		case *CustomOneof_Stringy:
			that1Type = 0
		case *CustomOneof_CustomType:
			that1Type = 1
		case *CustomOneof_CastType:
			that1Type = 2
		case *CustomOneof_MyCustomName:
			that1Type = 3
		default:
			panic(fmt.Sprintf("compare: unexpected type %T in oneof", that1.Custom))
		}
		if thisType == that1Type {
			if c := this.Custom.Compare(that1.Custom); c != 0 {
				return c
			}
		} else if thisType < that1Type {
			return -1
		} else if thisType > that1Type {
			return 1
		}
	}
	if c := bytes.Compare(this.XXX_unrecognized, that1.XXX_unrecognized); c != 0 {
		return c
	}
	return 0
}
func (this *CustomOneof_Stringy) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*CustomOneof_Stringy)
	if !ok {
		that2, ok := that.(CustomOneof_Stringy)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Stringy != that1.Stringy {
		if this.Stringy < that1.Stringy {
			return -1
		}
		return 1
	}
	return 0
}
func (this *CustomOneof_CustomType) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*CustomOneof_CustomType)
	if !ok {
		that2, ok := that.(CustomOneof_CustomType)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.CustomType.Compare(that1.CustomType); c != 0 {
		return c
	}
	return 0
}
func (this *CustomOneof_CastType) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*CustomOneof_CastType)
	if !ok {
		that2, ok := that.(CustomOneof_CastType)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.CastType != that1.CastType {
		if this.CastType < that1.CastType {
			return -1
		}
		return 1
	}
	return 0
}
func (this *CustomOneof_MyCustomName) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*CustomOneof_MyCustomName)
	if !ok {
		that2, ok := that.(CustomOneof_MyCustomName)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.MyCustomName != that1.MyCustomName {
		if this.MyCustomName < that1.MyCustomName {
			return -1
		}
		return 1
	}
	return 0
}
func (this *Subby) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OneDescription()
}
func (this *AllTypesOneOf) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OneDescription()
}
func (this *TwoOneofs) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OneDescription()
}
func (this *CustomOneof) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OneDescription()
}
func OneDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4335 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x7b, 0x6b, 0x70, 0x1b, 0xd7,
		0x75, 0x3f, 0x17, 0x0f, 0x12, 0x38, 0x00, 0xc1, 0xe5, 0x92, 0x96, 0x20, 0xda, 0x86, 0x24, 0xda,
		0x8e, 0xe9, 0x17, 0x69, 0x53, 0xa4, 0x1e, 0xd0, 0x3f, 0xf1, 0x1f, 0x24, 0x21, 0x8a, 0x2e, 0x49,
		0x30, 0x0b, 0x32, 0x7e, 0x64, 0x3a, 0x3b, 0xcb, 0xc5, 0x25, 0xb8, 0xd2, 0x62, 0x77, 0xb3, 0xbb,
		0x90, 0x04, 0x4d, 0x3f, 0xa8, 0xe3, 0x3e, 0x26, 0xd3, 0x77, 0xda, 0x99, 0x26, 0xae, 0xe3, 0x36,
		0xe9, 0xc3, 0x6e, 0xfa, 0x4a, 0xfa, 0x48, 0x93, 0xb4, 0x1f, 0x3a, 0x9d, 0x49, 0xeb, 0x4f, 0x1d,
		0xe7, 0x5b, 0xa7, 0xd3, 0xf1, 0x58, 0xb4, 0x67, 0x9a, 0xb6, 0x6a, 0xeb, 0xb6, 0xfa, 0xe0, 0xa9,
		0xbf, 0x74, 0xee, 0x6b, 0x1f, 0x00, 0xa8, 0x05, 0x33, 0xb5, 0xf3, 0x49, 0xdc, 0x73, 0xce, 0xef,
		0xb7, 0xe7, 0x9e, 0x7b, 0xee, 0x3d, 0xe7, 0xde, 0x85, 0xe0, 0xcd, 0x32, 0x9c, 0x6a, 0x5a, 0x56,
		0xd3, 0x40, 0x73, 0xb6, 0x63, 0x79, 0xd6, 0x6e, 0x7b, 0x6f, 0xae, 0x81, 0x5c, 0xcd, 0xd1, 0x6d,
		0xcf, 0x72, 0x66, 0x89, 0x4c, 0x1a, 0xa3, 0x16, 0xb3, 0xdc, 0x62, 0x7a, 0x03, 0xc6, 0x2f, 0xe9,
		0x06, 0x5a, 0xf1, 0x0d, 0xeb, 0xc8, 0x93, 0xce, 0x43, 0x6a, 0x4f, 0x37, 0x50, 0x51, 0x38, 0x95,
		0x9c, 0xc9, 0xcd, 0x3f, 0x3c, 0xdb, 0x05, 0x9a, 0x8d, 0x22, 0xb6, 0xb0, 0x58, 0x26, 0x88, 0xe9,
		0xf7, 0x52, 0x30, 0xd1, 0x47, 0x2b, 0x49, 0x90, 0x32, 0xd5, 0x16, 0x66, 0x14, 0x66, 0xb2, 0x32,
		0xf9, 0x5b, 0x2a, 0xc2, 0x88, 0xad, 0x6a, 0x57, 0xd5, 0x26, 0x2a, 0x26, 0x88, 0x98, 0x3f, 0x4a,
		0x25, 0x80, 0x06, 0xb2, 0x91, 0xd9, 0x40, 0xa6, 0xd6, 0x29, 0x26, 0x4f, 0x25, 0x67, 0xb2, 0x72,
		0x48, 0x22, 0x3d, 0x01, 0xe3, 0x76, 0x7b, 0xd7, 0xd0, 0x35, 0x25, 0x64, 0x06, 0xa7, 0x92, 0x33,
		0x69, 0x59, 0xa4, 0x8a, 0x95, 0xc0, 0xf8, 0x51, 0x18, 0xbb, 0x8e, 0xd4, 0xab, 0x61, 0xd3, 0x1c,
		0x31, 0x2d, 0x60, 0x71, 0xc8, 0x70, 0x19, 0xf2, 0x2d, 0xe4, 0xba, 0x6a, 0x13, 0x29, 0x5e, 0xc7,
		0x46, 0xc5, 0x14, 0x19, 0xfd, 0xa9, 0x9e, 0xd1, 0x77, 0x8f, 0x3c, 0xc7, 0x50, 0xdb, 0x1d, 0x1b,
		0x49, 0x15, 0xc8, 0x22, 0xb3, 0xdd, 0xa2, 0x0c, 0xe9, 0x43, 0xe2, 0x57, 0x35, 0xdb, 0xad, 0x6e,
		0x96, 0x0c, 0x86, 0x31, 0x8a, 0x11, 0x17, 0x39, 0xd7, 0x74, 0x0d, 0x15, 0x87, 0x09, 0xc1, 0xa3,
		0x3d, 0x04, 0x75, 0xaa, 0xef, 0xe6, 0xe0, 0x38, 0x69, 0x19, 0xb2, 0xe8, 0x86, 0x87, 0x4c, 0x57,
		0xb7, 0xcc, 0xe2, 0x08, 0x21, 0x79, 0xa4, 0xcf, 0x2c, 0x22, 0xa3, 0xd1, 0x4d, 0x11, 0xe0, 0xa4,
		0xb3, 0x30, 0x62, 0xd9, 0x9e, 0x6e, 0x99, 0x6e, 0x31, 0x73, 0x4a, 0x98, 0xc9, 0xcd, 0x3f, 0xd0,
		0x37, 0x11, 0x6a, 0xd4, 0x46, 0xe6, 0xc6, 0xd2, 0x1a, 0x88, 0xae, 0xd5, 0x76, 0x34, 0xa4, 0x68,
		0x56, 0x03, 0x29, 0xba, 0xb9, 0x67, 0x15, 0xb3, 0x84, 0xe0, 0x64, 0xef, 0x40, 0x88, 0xe1, 0xb2,
		0xd5, 0x40, 0x6b, 0xe6, 0x9e, 0x25, 0x17, 0xdc, 0xc8, 0xb3, 0x74, 0x0c, 0x86, 0xdd, 0x8e, 0xe9,
		0xa9, 0x37, 0x8a, 0x79, 0x92, 0x21, 0xec, 0x69, 0xfa, 0xdb, 0xc3, 0x30, 0x36, 0x48, 0x8a, 0x5d,
		0x84, 0xf4, 0x1e, 0x1e, 0x65, 0x31, 0x71, 0x94, 0x18, 0x50, 0x4c, 0x34, 0x88, 0xc3, 0x3f, 0x60,
		0x10, 0x2b, 0x90, 0x33, 0x91, 0xeb, 0xa1, 0x06, 0xcd, 0x88, 0xe4, 0x80, 0x39, 0x05, 0x14, 0xd4,
		0x9b, 0x52, 0xa9, 0x1f, 0x28, 0xa5, 0x5e, 0x80, 0x31, 0xdf, 0x25, 0xc5, 0x51, 0xcd, 0x26, 0xcf,
		0xcd, 0xb9, 0x38, 0x4f, 0x66, 0xab, 0x1c, 0x27, 0x63, 0x98, 0x5c, 0x40, 0x91, 0x67, 0x69, 0x05,
		0xc0, 0x32, 0x91, 0xb5, 0xa7, 0x34, 0x90, 0x66, 0x14, 0x33, 0x87, 0x44, 0xa9, 0x86, 0x4d, 0x7a,
		0xa2, 0x64, 0x51, 0xa9, 0x66, 0x48, 0x17, 0x82, 0x54, 0x1b, 0x39, 0x24, 0x53, 0x36, 0xe8, 0x22,
		0xeb, 0xc9, 0xb6, 0x1d, 0x28, 0x38, 0x08, 0xe7, 0x3d, 0x6a, 0xb0, 0x91, 0x65, 0x89, 0x13, 0xb3,
		0xb1, 0x23, 0x93, 0x19, 0x8c, 0x0e, 0x6c, 0xd4, 0x09, 0x3f, 0x4a, 0x0f, 0x81, 0x2f, 0x50, 0x48,
		0x5a, 0x01, 0xd9, 0x85, 0xf2, 0x5c, 0xb8, 0xa9, 0xb6, 0xd0, 0xd4, 0x4d, 0x28, 0x44, 0xc3, 0x23,
		0x4d, 0x42, 0xda, 0xf5, 0x54, 0xc7, 0x23, 0x59, 0x98, 0x96, 0xe9, 0x83, 0x24, 0x42, 0x12, 0x99,
		0x0d, 0xb2, 0xcb, 0xa5, 0x65, 0xfc, 0xa7, 0xf4, 0xff, 0x83, 0x01, 0x27, 0xc9, 0x80, 0x3f, 0xd1,
		0x3b, 0xa3, 0x11, 0xe6, 0xee, 0x71, 0x4f, 0x9d, 0x83, 0xd1, 0xc8, 0x00, 0x06, 0x7d, 0xf5, 0xf4,
		0x8f, 0xc1, 0x7d, 0x7d, 0xa9, 0xa5, 0x17, 0x60, 0xb2, 0x6d, 0xea, 0xa6, 0x87, 0x1c, 0xdb, 0x41,
		0x38, 0x63, 0xe9, 0xab, 0x8a, 0xff, 0x34, 0x72, 0x48, 0xce, 0xed, 0x84, 0xad, 0x29, 0x8b, 0x3c,
		0xd1, 0xee, 0x15, 0x3e, 0x9e, 0xcd, 0x7c, 0x7f, 0x44, 0xbc, 0x75, 0xeb, 0xd6, 0xad, 0xc4, 0xf4,
		0x17, 0x87, 0x61, 0xb2, 0xdf, 0x9a, 0xe9, 0xbb, 0x7c, 0x8f, 0xc1, 0xb0, 0xd9, 0x6e, 0xed, 0x22,
		0x87, 0x04, 0x29, 0x2d, 0xb3, 0x27, 0xa9, 0x02, 0x69, 0x43, 0xdd, 0x45, 0x46, 0x31, 0x75, 0x4a,
		0x98, 0x29, 0xcc, 0x3f, 0x31, 0xd0, 0xaa, 0x9c, 0x5d, 0xc7, 0x10, 0x99, 0x22, 0xa5, 0x4f, 0x41,
		0x8a, 0x6d, 0xd1, 0x98, 0xe1, 0xf1, 0xc1, 0x18, 0xf0, 0x5a, 0x92, 0x09, 0x4e, 0xba, 0x1f, 0xb2,
		0xf8, 0x5f, 0x9a, 0x1b, 0xc3, 0xc4, 0xe7, 0x0c, 0x16, 0xe0, 0xbc, 0x90, 0xa6, 0x20, 0x43, 0x96,
		0x49, 0x03, 0xf1, 0xd2, 0xe6, 0x3f, 0xe3, 0xc4, 0x6a, 0xa0, 0x3d, 0xb5, 0x6d, 0x78, 0xca, 0x35,
		0xd5, 0x68, 0x23, 0x92, 0xf0, 0x59, 0x39, 0xcf, 0x84, 0x9f, 0xc1, 0x32, 0xe9, 0x24, 0xe4, 0xe8,
		0xaa, 0xd2, 0xcd, 0x06, 0xba, 0x41, 0x76, 0xcf, 0xb4, 0x4c, 0x17, 0xda, 0x1a, 0x96, 0xe0, 0xd7,
		0x5f, 0x71, 0x2d, 0x93, 0xa7, 0x26, 0x79, 0x05, 0x16, 0x90, 0xd7, 0x9f, 0xeb, 0xde, 0xb8, 0x1f,
		0xec, 0x3f, 0xbc, 0xee, 0x9c, 0x9a, 0xfe, 0x66, 0x02, 0x52, 0x64, 0xbf, 0x18, 0x83, 0xdc, 0xf6,
		0x8b, 0x5b, 0x55, 0x65, 0xa5, 0xb6, 0xb3, 0xb4, 0x5e, 0x15, 0x05, 0xa9, 0x00, 0x40, 0x04, 0x97,
		0xd6, 0x6b, 0x95, 0x6d, 0x31, 0xe1, 0x3f, 0xaf, 0x6d, 0x6e, 0x9f, 0x5d, 0x10, 0x93, 0x3e, 0x60,
		0x87, 0x0a, 0x52, 0x61, 0x83, 0x33, 0xf3, 0x62, 0x5a, 0x12, 0x21, 0x4f, 0x09, 0xd6, 0x5e, 0xa8,
		0xae, 0x9c, 0x5d, 0x10, 0x87, 0xa3, 0x92, 0x33, 0xf3, 0xe2, 0x88, 0x34, 0x0a, 0x59, 0x22, 0x59,
		0xaa, 0xd5, 0xd6, 0xc5, 0x8c, 0xcf, 0x59, 0xdf, 0x96, 0xd7, 0x36, 0x57, 0xc5, 0xac, 0xcf, 0xb9,
		0x2a, 0xd7, 0x76, 0xb6, 0x44, 0xf0, 0x19, 0x36, 0xaa, 0xf5, 0x7a, 0x65, 0xb5, 0x2a, 0xe6, 0x7c,
		0x8b, 0xa5, 0x17, 0xb7, 0xab, 0x75, 0x31, 0x1f, 0x71, 0xeb, 0xcc, 0xbc, 0x38, 0xea, 0xbf, 0xa2,
		0xba, 0xb9, 0xb3, 0x21, 0x16, 0xa4, 0x71, 0x18, 0xa5, 0xaf, 0xe0, 0x4e, 0x8c, 0x75, 0x89, 0xce,
		0x2e, 0x88, 0x62, 0xe0, 0x08, 0x65, 0x19, 0x8f, 0x08, 0xce, 0x2e, 0x88, 0xd2, 0xf4, 0x32, 0xa4,
		0x49, 0x76, 0x49, 0x12, 0x14, 0xd6, 0x2b, 0x4b, 0xd5, 0x75, 0xa5, 0xb6, 0xb5, 0xbd, 0x56, 0xdb,
		0xac, 0xac, 0x8b, 0x42, 0x20, 0x93, 0xab, 0x9f, 0xde, 0x59, 0x93, 0xab, 0x2b, 0x62, 0x22, 0x2c,
		0xdb, 0xaa, 0x56, 0xb6, 0xab, 0x2b, 0x62, 0x72, 0x5a, 0x83, 0xc9, 0x7e, 0xfb, 0x64, 0xdf, 0x95,
		0x11, 0x9a, 0xe2, 0xc4, 0x21, 0x53, 0x4c, 0xb8, 0x7a, 0xa6, 0xf8, 0xdd, 0x04, 0x4c, 0xf4, 0xa9,
		0x15, 0x7d, 0x5f, 0xf2, 0x2c, 0xa4, 0x69, 0x8a, 0xd2, 0xea, 0xf9, 0x58, 0xdf, 0xa2, 0x43, 0x12,
		0xb6, 0xa7, 0x82, 0x12, 0x5c, 0xb8, 0x83, 0x48, 0x1e, 0xd2, 0x41, 0x60, 0x8a, 0x9e, 0x3d, 0xfd,
		0x47, 0x7b, 0xf6, 0x74, 0x5a, 0xf6, 0xce, 0x0e, 0x52, 0xf6, 0x88, 0xec, 0x68, 0x7b, 0x7b, 0xba,
		0xcf, 0xde, 0x7e, 0x11, 0xc6, 0x7b, 0x88, 0x06, 0xde, 0x63, 0x5f, 0x16, 0xa0, 0x78, 0x58, 0x70,
		0x62, 0x76, 0xba, 0x44, 0x64, 0xa7, 0xbb, 0xd8, 0x1d, 0xc1, 0xd3, 0x87, 0x4f, 0x42, 0xcf, 0x5c,
		0xbf, 0x2e, 0xc0, 0xb1, 0xfe, 0x9d, 0x62, 0x5f, 0x1f, 0x3e, 0x05, 0xc3, 0x2d, 0xe4, 0xed, 0x5b,
		0xbc, 0x5b, 0xfa, 0x44, 0x9f, 0x1a, 0x8c, 0xd5, 0xdd, 0x93, 0xcd, 0x50, 0xe1, 0x22, 0x9e, 0x3c,
		0xac, 0xdd, 0xa3, 0xde, 0xf4, 0x78, 0xfa, 0xf9, 0x04, 0xdc, 0xd7, 0x97, 0xbc, 0xaf, 0xa3, 0x0f,
		0x02, 0xe8, 0xa6, 0xdd, 0xf6, 0x68, 0x47, 0x44, 0x37, 0xd8, 0x2c, 0x91, 0x90, 0xcd, 0x0b, 0x6f,
		0x9e, 0x6d, 0xcf, 0xd7, 0x27, 0x89, 0x1e, 0xa8, 0x88, 0x18, 0x9c, 0x0f, 0x1c, 0x4d, 0x11, 0x47,
		0x4b, 0x87, 0x8c, 0xb4, 0x27, 0x31, 0x9f, 0x06, 0x51, 0x33, 0x74, 0x64, 0x7a, 0x8a, 0xeb, 0x39,
		0x48, 0x6d, 0xe9, 0x66, 0x93, 0x54, 0x90, 0x4c, 0x39, 0xbd, 0xa7, 0x1a, 0x2e, 0x92, 0xc7, 0xa8,
		0xba, 0xce, 0xb5, 0x18, 0x41, 0x12, 0xc8, 0x09, 0x21, 0x86, 0x23, 0x08, 0xaa, 0xf6, 0x11, 0xd3,
		0x3f, 0x9b, 0x85, 0x5c, 0xa8, 0xaf, 0x96, 0x4e, 0x43, 0xfe, 0x8a, 0x7a, 0x4d, 0x55, 0xf8, 0x59,
		0x89, 0x46, 0x22, 0x87, 0x65, 0x5b, 0xec, 0xbc, 0xf4, 0x34, 0x4c, 0x12, 0x13, 0xab, 0xed, 0x21,
		0x47, 0xd1, 0x0c, 0xd5, 0x75, 0x49, 0xd0, 0x32, 0xc4, 0x54, 0xc2, 0xba, 0x1a, 0x56, 0x2d, 0x73,
		0x8d, 0xb4, 0x08, 0x13, 0x04, 0xd1, 0x6a, 0x1b, 0x9e, 0x6e, 0x1b, 0x48, 0xc1, 0xa7, 0x37, 0x97,
		0x54, 0x12, 0xdf, 0xb3, 0x71, 0x6c, 0xb1, 0xc1, 0x0c, 0xb0, 0x47, 0xae, 0xb4, 0x02, 0x0f, 0x12,
		0x58, 0x13, 0x99, 0xc8, 0x51, 0x3d, 0xa4, 0xa0, 0xcf, 0xb5, 0x55, 0xc3, 0x55, 0x54, 0xb3, 0xa1,
		0xec, 0xab, 0xee, 0x7e, 0x71, 0x12, 0x13, 0x2c, 0x25, 0x8a, 0x82, 0x7c, 0x02, 0x1b, 0xae, 0x32,
		0xbb, 0x2a, 0x31, 0xab, 0x98, 0x8d, 0xcb, 0xaa, 0xbb, 0x2f, 0x95, 0xe1, 0x18, 0x61, 0x71, 0x3d,
		0x47, 0x37, 0x9b, 0x8a, 0xb6, 0x8f, 0xb4, 0xab, 0x4a, 0xdb, 0xdb, 0x3b, 0x5f, 0xbc, 0x3f, 0xfc,
		0x7e, 0xe2, 0x61, 0x9d, 0xd8, 0x2c, 0x63, 0x93, 0x1d, 0x6f, 0xef, 0xbc, 0x54, 0x87, 0x3c, 0x9e,
		0x8c, 0x96, 0x7e, 0x13, 0x29, 0x7b, 0x96, 0x43, 0x4a, 0x63, 0xa1, 0xcf, 0xd6, 0x14, 0x8a, 0xe0,
		0x6c, 0x8d, 0x01, 0x36, 0xac, 0x06, 0x2a, 0xa7, 0xeb, 0x5b, 0xd5, 0xea, 0x8a, 0x9c, 0xe3, 0x2c,
		0x97, 0x2c, 0x07, 0x27, 0x54, 0xd3, 0xf2, 0x03, 0x9c, 0xa3, 0x09, 0xd5, 0xb4, 0x78, 0x78, 0x17,
		0x61, 0x42, 0xd3, 0xe8, 0x98, 0x75, 0x4d, 0x61, 0x67, 0x2c, 0xb7, 0x28, 0x46, 0x82, 0xa5, 0x69,
		0xab, 0xd4, 0x80, 0xe5, 0xb8, 0x2b, 0x5d, 0x80, 0xfb, 0x82, 0x60, 0x85, 0x81, 0xe3, 0x3d, 0xa3,
		0xec, 0x86, 0x2e, 0xc2, 0x84, 0xdd, 0xe9, 0x05, 0x4a, 0x91, 0x37, 0xda, 0x9d, 0x6e, 0xd8, 0x39,
		0x98, 0xb4, 0xf7, 0xed, 0x5e, 0xdc, 0xe3, 0x61, 0x9c, 0x64, 0xef, 0xdb, 0xdd, 0xc0, 0x47, 0xc8,
		0x81, 0xdb, 0x41, 0x9a, 0xea, 0xa1, 0x46, 0xf1, 0x78, 0xd8, 0x3c, 0xa4, 0x90, 0xe6, 0x40, 0xd4,
		0x34, 0x05, 0x99, 0xea, 0xae, 0x81, 0x14, 0xd5, 0x41, 0xa6, 0xea, 0x16, 0x4f, 0x86, 0x8d, 0x0b,
		0x9a, 0x56, 0x25, 0xda, 0x0a, 0x51, 0x4a, 0x8f, 0xc3, 0xb8, 0xb5, 0x7b, 0x45, 0xa3, 0x29, 0xa9,
		0xd8, 0x0e, 0xda, 0xd3, 0x6f, 0x14, 0x1f, 0x26, 0xf1, 0x1d, 0xc3, 0x0a, 0x92, 0x90, 0x5b, 0x44,
		0x2c, 0x3d, 0x06, 0xa2, 0xe6, 0xee, 0xab, 0x8e, 0x4d, 0xf6, 0x64, 0xd7, 0x56, 0x35, 0x54, 0x7c,
		0x84, 0x9a, 0x52, 0xf9, 0x26, 0x17, 0xe3, 0x25, 0xe1, 0x5e, 0xd7, 0xf7, 0x3c, 0xce, 0xf8, 0x28,
		0x5d, 0x12, 0x44, 0xc6, 0xd8, 0x66, 0x40, 0xc4, 0xa1, 0x88, 0xbc, 0x78, 0x86, 0x98, 0x15, 0xec,
		0x7d, 0x3b, 0xfc, 0xde, 0x87, 0x60, 0x14, 0x5b, 0x06, 0x2f, 0x7d, 0x8c, 0x36, 0x64, 0xf6, 0x7e,
		0xe8, 0x8d, 0x0b, 0x70, 0x0c, 0x1b, 0xb5, 0x90, 0xa7, 0x36, 0x54, 0x4f, 0x0d, 0x59, 0x3f, 0x49,
		0xac, 0x71, 0xdc, 0x37, 0x98, 0x32, 0xe2, 0xa7, 0xd3, 0xde, 0xed, 0xf8, 0x99, 0xf5, 0x14, 0xf5,
		0x13, 0xcb, 0x78, 0x6e, 0x7d, 0x64, 0x4d, 0xf7, 0x74, 0x19, 0xf2, 0xe1, 0xc4, 0x97, 0xb2, 0x40,
		0x53, 0x5f, 0x14, 0x70, 0x17, 0xb4, 0x5c, 0x5b, 0xc1, 0xfd, 0xcb, 0x4b, 0x55, 0x31, 0x81, 0xfb,
		0xa8, 0xf5, 0xb5, 0xed, 0xaa, 0x22, 0xef, 0x6c, 0x6e, 0xaf, 0x6d, 0x54, 0xc5, 0x64, 0xb8, 0x61,
		0xff, 0x6e, 0x02, 0x0a, 0xd1, 0xb3, 0x97, 0xf4, 0xff, 0xe0, 0x38, 0xbf, 0x28, 0x71, 0x91, 0xa7,
		0x5c, 0xd7, 0x1d, 0xb2, 0x16, 0x5b, 0x2a, 0xad, 0x8b, 0x7e, 0x36, 0x4c, 0x32, 0xab, 0x3a, 0xf2,
		0x9e, 0xd7, 0x1d, 0xbc, 0xd2, 0x5a, 0xaa, 0x27, 0xad, 0xc3, 0x49, 0xd3, 0x52, 0x5c, 0x4f, 0x35,
		0x1b, 0xaa, 0xd3, 0x50, 0x82, 0x2b, 0x2a, 0x45, 0xd5, 0x34, 0xe4, 0xba, 0x16, 0xad, 0x81, 0x3e,
		0xcb, 0x03, 0xa6, 0x55, 0x67, 0xc6, 0x41, 0x71, 0xa8, 0x30, 0xd3, 0xae, 0xcc, 0x4d, 0x1e, 0x96,
		0xb9, 0xf7, 0x43, 0xb6, 0xa5, 0xda, 0x0a, 0x32, 0x3d, 0xa7, 0x43, 0x3a, 0xee, 0x8c, 0x9c, 0x69,
		0xa9, 0x76, 0x15, 0x3f, 0x7f, 0x3c, 0x07, 0x9f, 0x7f, 0x4c, 0x42, 0x3e, 0xdc, 0x75, 0xe3, 0x43,
		0x8c, 0x46, 0x0a, 0x94, 0x40, 0xb6, 0xb0, 0x87, 0xee, 0xd9, 0xa3, 0xcf, 0x2e, 0xe3, 0xca, 0x55,
		0x1e, 0xa6, 0xbd, 0xb0, 0x4c, 0x91, 0xb8, 0x6b, 0xc0, 0xa9, 0x85, 0x68, 0xef, 0x91, 0x91, 0xd9,
		0x93, 0xb4, 0x0a, 0xc3, 0x57, 0x5c, 0xc2, 0x3d, 0x4c, 0xb8, 0x1f, 0xbe, 0x37, 0xf7, 0x73, 0x75,
		0x42, 0x9e, 0x7d, 0xae, 0xae, 0x6c, 0xd6, 0xe4, 0x8d, 0xca, 0xba, 0xcc, 0xe0, 0xd2, 0x09, 0x48,
		0x19, 0xea, 0xcd, 0x4e, 0xb4, 0xc6, 0x11, 0xd1, 0xa0, 0x81, 0x3f, 0x01, 0xa9, 0xeb, 0x48, 0xbd,
		0x1a, 0xad, 0x2c, 0x44, 0xf4, 0x11, 0xa6, 0xfe, 0x1c, 0xa4, 0x49, 0xbc, 0x24, 0x00, 0x16, 0x31,
		0x71, 0x48, 0xca, 0x40, 0x6a, 0xb9, 0x26, 0xe3, 0xf4, 0x17, 0x21, 0x4f, 0xa5, 0xca, 0xd6, 0x5a,
		0x75, 0xb9, 0x2a, 0x26, 0xa6, 0x17, 0x61, 0x98, 0x06, 0x01, 0x2f, 0x0d, 0x3f, 0x0c, 0xe2, 0x10,
		0x7b, 0x64, 0x1c, 0x02, 0xd7, 0xee, 0x6c, 0x2c, 0x55, 0x65, 0x31, 0x11, 0x9e, 0x5e, 0x17, 0xf2,
		0xe1, 0x86, 0xfb, 0xe3, 0xc9, 0xa9, 0xef, 0x08, 0x90, 0x0b, 0x35, 0xd0, 0xb8, 0xf3, 0x51, 0x0d,
		0xc3, 0xba, 0xae, 0xa8, 0x86, 0xae, 0xba, 0x2c, 0x29, 0x80, 0x88, 0x2a, 0x58, 0x32, 0xe8, 0xa4,
		0x7d, 0x2c, 0xce, 0xbf, 0x26, 0x80, 0xd8, 0xdd, 0xbb, 0x76, 0x39, 0x28, 0xfc, 0x50, 0x1d, 0x7c,
		0x55, 0x80, 0x42, 0xb4, 0x61, 0xed, 0x72, 0xef, 0xf4, 0x0f, 0xd5, 0xbd, 0x77, 0x12, 0x30, 0x1a,
		0x69, 0x53, 0x07, 0xf5, 0xee, 0x73, 0x30, 0xae, 0x37, 0x50, 0xcb, 0xb6, 0x3c, 0x64, 0x6a, 0x1d,
		0xc5, 0x40, 0xd7, 0x90, 0x51, 0x9c, 0x26, 0x1b, 0xc5, 0xdc, 0xbd, 0x1b, 0xe1, 0xd9, 0xb5, 0x00,
		0xb7, 0x8e, 0x61, 0xe5, 0x89, 0xb5, 0x95, 0xea, 0xc6, 0x56, 0x6d, 0xbb, 0xba, 0xb9, 0xfc, 0xa2,
		0xb2, 0xb3, 0xf9, 0x23, 0x9b, 0xb5, 0xe7, 0x37, 0x65, 0x51, 0xef, 0x32, 0xfb, 0x08, 0x97, 0xfa,
		0x16, 0x88, 0xdd, 0x4e, 0x49, 0xc7, 0xa1, 0x9f, 0x5b, 0xe2, 0x90, 0x34, 0x01, 0x63, 0x9b, 0x35,
		0xa5, 0xbe, 0xb6, 0x52, 0x55, 0xaa, 0x97, 0x2e, 0x55, 0x97, 0xb7, 0xeb, 0xf4, 0x6a, 0xc3, 0xb7,
		0xde, 0x8e, 0x2e, 0xea, 0x57, 0x92, 0x30, 0xd1, 0xc7, 0x13, 0xa9, 0xc2, 0x0e, 0x25, 0xf4, 0x9c,
		0xf4, 0xd4, 0x20, 0xde, 0xcf, 0xe2, 0xae, 0x60, 0x4b, 0x75, 0x3c, 0x76, 0x86, 0x79, 0x0c, 0x70,
		0x94, 0x4c, 0x4f, 0xdf, 0xd3, 0x91, 0xc3, 0x6e, 0x82, 0xe8, 0x49, 0x65, 0x2c, 0x90, 0xd3, 0xcb,
		0xa0, 0x27, 0x41, 0xb2, 0x2d, 0x57, 0xf7, 0xf4, 0x6b, 0x48, 0xd1, 0x4d, 0x7e, 0x6d, 0x84, 0x4f,
		0x2e, 0x29, 0x59, 0xe4, 0x9a, 0x35, 0xd3, 0xf3, 0xad, 0x4d, 0xd4, 0x54, 0xbb, 0xac, 0xf1, 0x06,
		0x9e, 0x94, 0x45, 0xae, 0xf1, 0xad, 0x4f, 0x43, 0xbe, 0x61, 0xb5, 0x71, 0x3b, 0x47, 0xed, 0x70,
		0xbd, 0x10, 0xe4, 0x1c, 0x95, 0xf9, 0x26, 0xac, 0x51, 0x0f, 0xee, 0xab, 0xf2, 0x72, 0x8e, 0xca,
		0xa8, 0xc9, 0xa3, 0x30, 0xa6, 0x36, 0x9b, 0x0e, 0x26, 0xe7, 0x44, 0xf4, 0xe8, 0x51, 0xf0, 0xc5,
		0xc4, 0x70, 0xea, 0x39, 0xc8, 0xf0, 0x38, 0xe0, 0x92, 0x8c, 0x23, 0xa1, 0xd8, 0xf4, 0x3c, 0x9d,
		0x98, 0xc9, 0xca, 0x19, 0x93, 0x2b, 0x4f, 0x43, 0x5e, 0x77, 0x95, 0xe0, 0xfa, 0x3d, 0x71, 0x2a,
		0x31, 0x93, 0x91, 0x73, 0xba, 0xeb, 0x5f, 0x5d, 0x4e, 0xbf, 0x9e, 0x80, 0x42, 0xf4, 0xf3, 0x81,
		0xb4, 0x02, 0x19, 0xc3, 0xd2, 0x54, 0x92, 0x5a, 0xf4, 0xdb, 0xd5, 0x4c, 0xcc, 0x17, 0x87, 0xd9,
		0x75, 0x66, 0x2f, 0xfb, 0xc8, 0xa9, 0xbf, 0x13, 0x20, 0xc3, 0xc5, 0xd2, 0x31, 0x48, 0xd9, 0xaa,
		0xb7, 0x4f, 0xe8, 0xd2, 0x4b, 0x09, 0x51, 0x90, 0xc9, 0x33, 0x96, 0xbb, 0xb6, 0x6a, 0x92, 0x14,
		0x60, 0x72, 0xfc, 0x8c, 0xe7, 0xd5, 0x40, 0x6a, 0x83, 0x9c, 0x6b, 0xac, 0x56, 0x0b, 0x99, 0x9e,
		0xcb, 0xe7, 0x95, 0xc9, 0x97, 0x99, 0x58, 0x7a, 0x02, 0xc6, 0x3d, 0x47, 0xd5, 0x8d, 0x88, 0x6d,
		0x8a, 0xd8, 0x8a, 0x5c, 0xe1, 0x1b, 0x97, 0xe1, 0x04, 0xe7, 0x6d, 0x20, 0x4f, 0xd5, 0xf6, 0x51,
		0x23, 0x00, 0x0d, 0x93, 0xfb, 0x8b, 0xe3, 0xcc, 0x60, 0x85, 0xe9, 0x39, 0x76, 0xfa, 0x7b, 0x02,
		0x8c, 0xf3, 0x93, 0x58, 0xc3, 0x0f, 0xd6, 0x06, 0x80, 0x6a, 0x9a, 0x96, 0x17, 0x0e, 0x57, 0x6f,
		0x2a, 0xf7, 0xe0, 0x66, 0x2b, 0x3e, 0x48, 0x0e, 0x11, 0x4c, 0xb5, 0x00, 0x02, 0xcd, 0xa1, 0x61,
		0x3b, 0x09, 0x39, 0xf6, 0x6d, 0x88, 0x7c, 0x60, 0xa4, 0x67, 0x77, 0xa0, 0x22, 0x7c, 0x64, 0x93,
		0x26, 0x21, 0xbd, 0x8b, 0x9a, 0xba, 0xc9, 0x6e, 0x7c, 0xe9, 0x03, 0xbf, 0x61, 0x49, 0xf9, 0x37,
		0x2c, 0x4b, 0x9f, 0x85, 0x09, 0xcd, 0x6a, 0x75, 0xbb, 0xbb, 0x24, 0x76, 0xdd, 0x1f, 0xb8, 0x97,
		0x85, 0x97, 0x20, 0x68, 0x31, 0x3f, 0x10, 0x84, 0xaf, 0x26, 0x92, 0xab, 0x5b, 0x4b, 0x5f, 0x4b,
		0x4c, 0xad, 0x52, 0xe8, 0x16, 0x1f, 0xa9, 0x8c, 0xf6, 0x0c, 0xa4, 0x61, 0xef, 0xe1, 0xaf, 0x9f,
		0x84, 0xa7, 0x9a, 0xba, 0xb7, 0xdf, 0xde, 0x9d, 0xd5, 0xac, 0xd6, 0x5c, 0xd3, 0x6a, 0x5a, 0xc1,
		0x37, 0x55, 0xfc, 0x44, 0x1e, 0xc8, 0x5f, 0xec, 0xbb, 0x6a, 0xd6, 0x97, 0x4e, 0xc5, 0x7e, 0x84,
		0x2d, 0x6f, 0xc2, 0x04, 0x33, 0x56, 0xc8, 0x87, 0x1d, 0x7a, 0x3c, 0x91, 0xee, 0x79, 0x39, 0x56,
		0xfc, 0xc6, 0x7b, 0xa4, 0x5c, 0xcb, 0xe3, 0x0c, 0x8a, 0x75, 0xf4, 0x04, 0x53, 0x96, 0xe1, 0xbe,
		0x08, 0x1f, 0x5d, 0x9a, 0xc8, 0x89, 0x61, 0xfc, 0x2e, 0x63, 0x9c, 0x08, 0x31, 0xd6, 0x19, 0xb4,
		0xbc, 0x0c, 0xa3, 0x47, 0xe1, 0xfa, 0x1b, 0xc6, 0x95, 0x47, 0x61, 0x92, 0x55, 0x18, 0x23, 0x24,
		0x5a, 0xdb, 0xf5, 0xac, 0x16, 0xd9, 0xf7, 0xee, 0x4d, 0xf3, 0xb7, 0xef, 0xd1, 0xb5, 0x52, 0xc0,
		0xb0, 0x65, 0x1f, 0x55, 0x2e, 0x03, 0xf9, 0x96, 0xd5, 0x40, 0x9a, 0x11, 0xc3, 0xf0, 0x26, 0x73,
		0xc4, 0xb7, 0x2f, 0x7f, 0x06, 0x26, 0xf1, 0xdf, 0x64, 0x5b, 0x0a, 0x7b, 0x12, 0x7f, 0x93, 0x56,
		0xfc, 0xde, 0xcb, 0x74, 0x39, 0x4e, 0xf8, 0x04, 0x21, 0x9f, 0x42, 0xb3, 0xd8, 0x44, 0x9e, 0x87,
		0x1c, 0x57, 0x51, 0x8d, 0x7e, 0xee, 0x85, 0xae, 0x22, 0x8a, 0x5f, 0xba, 0x13, 0x9d, 0xc5, 0x55,
		0x8a, 0xac, 0x18, 0x46, 0x79, 0x07, 0x8e, 0xf7, 0xc9, 0x8a, 0x01, 0x38, 0x5f, 0x61, 0x9c, 0x93,
		0x3d, 0x99, 0x81, 0x69, 0xb7, 0x80, 0xcb, 0xfd, 0xb9, 0x1c, 0x80, 0xf3, 0xd7, 0x18, 0xa7, 0xc4,
		0xb0, 0x7c, 0x4a, 0x31, 0xe3, 0x73, 0x30, 0x7e, 0x0d, 0x39, 0xbb, 0x96, 0xcb, 0xae, 0x7f, 0x06,
		0xa0, 0x7b, 0x95, 0xd1, 0x8d, 0x31, 0x20, 0xb9, 0x0f, 0xc2, 0x5c, 0x17, 0x20, 0xb3, 0xa7, 0x6a,
		0x68, 0x00, 0x8a, 0x2f, 0x33, 0x8a, 0x11, 0x6c, 0x8f, 0xa1, 0x15, 0xc8, 0x37, 0x2d, 0x56, 0x99,
		0xe2, 0xe1, 0xaf, 0x31, 0x78, 0x8e, 0x63, 0x18, 0x85, 0x6d, 0xd9, 0x6d, 0x03, 0x97, 0xad, 0x78,
		0x8a, 0x5f, 0xe7, 0x14, 0x1c, 0xc3, 0x28, 0x8e, 0x10, 0xd6, 0xdf, 0xe0, 0x14, 0x6e, 0x28, 0x9e,
		0xcf, 0x42, 0xce, 0x32, 0x8d, 0x8e, 0x65, 0x0e, 0xe2, 0xc4, 0x57, 0x18, 0x03, 0x30, 0x08, 0x26,
		0xb8, 0x08, 0xd9, 0x41, 0x27, 0xe2, 0xb7, 0xef, 0xf0, 0xe5, 0xc1, 0x67, 0x60, 0x15, 0xc6, 0xf8,
		0x06, 0xa5, 0x5b, 0xe6, 0x00, 0x14, 0xbf, 0xc3, 0x28, 0x0a, 0x21, 0x18, 0x1b, 0x86, 0x87, 0x5c,
		0xaf, 0x89, 0x06, 0x21, 0x79, 0x9d, 0x0f, 0x83, 0x41, 0x58, 0x28, 0x77, 0x91, 0xa9, 0xed, 0x0f,
		0xc6, 0xf0, 0x06, 0x0f, 0x25, 0xc7, 0x60, 0x8a, 0x65, 0x18, 0x6d, 0xa9, 0x8e, 0xbb, 0xaf, 0x1a,
		0x03, 0x4d, 0xc7, 0xef, 0x32, 0x8e, 0xbc, 0x0f, 0x62, 0x11, 0x69, 0x9b, 0x47, 0xa1, 0xf9, 0x1a,
		0x8f, 0x48, 0x08, 0xc6, 0x96, 0x9e, 0xeb, 0x91, 0xbb, 0xb2, 0xa3, 0xb0, 0xfd, 0x1e, 0x5f, 0x7a,
		0x14, 0xbb, 0x11, 0x66, 0xbc, 0x08, 0x59, 0x57, 0xbf, 0x39, 0x10, 0xcd, 0xef, 0xf3, 0x99, 0x26,
		0x00, 0x0c, 0x7e, 0x11, 0x4e, 0xf4, 0x2d, 0x13, 0x03, 0x90, 0xfd, 0x01, 0x23, 0x3b, 0xd6, 0xa7,
		0x54, 0xb0, 0x2d, 0xe1, 0xa8, 0x94, 0x7f, 0xc8, 0xb7, 0x04, 0xd4, 0xc5, 0xb5, 0x85, 0xcf, 0x0a,
		0xae, 0xba, 0x77, 0xb4, 0xa8, 0xfd, 0x11, 0x8f, 0x1a, 0xc5, 0x46, 0xa2, 0xb6, 0x0d, 0xc7, 0x18,
		0xe3, 0xd1, 0xe6, 0xf5, 0xeb, 0x7c, 0x63, 0xa5, 0xe8, 0x9d, 0xe8, 0xec, 0x7e, 0x16, 0xa6, 0xfc,
		0x70, 0xf2, 0xa6, 0xd4, 0x55, 0x5a, 0xaa, 0x3d, 0x00, 0xf3, 0x37, 0x18, 0x33, 0xdf, 0xf1, 0xfd,
		0xae, 0xd6, 0xdd, 0x50, 0x6d, 0x4c, 0xfe, 0x02, 0x14, 0x39, 0x79, 0xdb, 0x74, 0x90, 0x66, 0x35,
		0x4d, 0xfd, 0x26, 0x6a, 0x0c, 0x40, 0xfd, 0xc7, 0x5d, 0x53, 0xb5, 0x13, 0x82, 0x63, 0xe6, 0x35,
		0x10, 0xfd, 0x5e, 0x45, 0xd1, 0x5b, 0xb6, 0xe5, 0x78, 0x31, 0x8c, 0x7f, 0xc2, 0x67, 0xca, 0xc7,
		0xad, 0x11, 0x58, 0xb9, 0x0a, 0x05, 0xf2, 0x38, 0x68, 0x4a, 0xfe, 0x29, 0x23, 0x1a, 0x0d, 0x50,
		0x6c, 0xe3, 0xd0, 0xac, 0x96, 0xad, 0x3a, 0x83, 0xec, 0x7f, 0x7f, 0xc6, 0x37, 0x0e, 0x06, 0x61,
		0x1b, 0x87, 0xd7, 0xb1, 0x11, 0xae, 0xf6, 0x03, 0x30, 0x7c, 0x93, 0x6f, 0x1c, 0x1c, 0xc3, 0x28,
		0x78, 0xc3, 0x30, 0x00, 0xc5, 0x9f, 0x73, 0x0a, 0x8e, 0xc1, 0x14, 0x9f, 0x0e, 0x0a, 0xad, 0x83,
		0x9a, 0xba, 0xeb, 0x39, 0xb4, 0x15, 0xbe, 0x37, 0xd5, 0xb7, 0xee, 0x44, 0x9b, 0x30, 0x39, 0x04,
		0xc5, 0x3b, 0x11, 0xbb, 0x42, 0x25, 0x27, 0xa5, 0x78, 0xc7, 0xbe, 0xcd, 0x77, 0xa2, 0x10, 0x0c,
		0xfb, 0x16, 0xea, 0x10, 0x71, 0xd8, 0x35, 0x7c, 0x3e, 0x18, 0x80, 0xee, 0x3b, 0x5d, 0xce, 0xd5,
		0x39, 0x16, 0x73, 0x86, 0xfa, 0x9f, 0xb6, 0x79, 0x15, 0x75, 0x06, 0xca, 0xce, 0xbf, 0xe8, 0xea,
		0x7f, 0x76, 0x28, 0xb2, 0x8b, 0xaf, 0x65, 0x39, 0xe8, 0xc6, 0x8d, 0x41, 0x7a, 0x9f, 0xbf, 0xbc,
		0x43, 0x1b, 0x46, 0xce, 0xb7, 0x41, 0x91, 0x74, 0x4f, 0x1a, 0xeb, 0xea, 0xcf, 0xa4, 0xb8, 0x5f,
		0x15, 0x15, 0x7f, 0xfc, 0x2e, 0x8b, 0x5f, 0xb4, 0x3d, 0x2b, 0xaf, 0xe3, 0x45, 0x13, 0x6d, 0xa2,
		0xe2, 0xc9, 0x5e, 0xbe, 0xeb, 0xaf, 0x9b, 0x48, 0x0f, 0x55, 0xbe, 0x04, 0xa3, 0x91, 0x06, 0x2a,
		0x9e, 0xea, 0x27, 0x18, 0x55, 0x3e, 0xdc, 0x3f, 0x95, 0x17, 0x21, 0x85, 0x9b, 0xa1, 0x78, 0xf8,
		0x4f, 0x32, 0x38, 0x31, 0x2f, 0x7f, 0x12, 0x32, 0xbc, 0x09, 0x8a, 0x87, 0xfe, 0x14, 0x83, 0xfa,
		0x10, 0x0c, 0xe7, 0x0d, 0x50, 0x3c, 0xfc, 0xa7, 0x39, 0x9c, 0x43, 0x30, 0x7c, 0xf0, 0x10, 0xfe,
		0xd5, 0xcf, 0xa4, 0x58, 0x11, 0xe3, 0xb1, 0xbb, 0x08, 0x23, 0xac, 0xf3, 0x89, 0x47, 0x7f, 0x9e,
		0xbd, 0x9c, 0x23, 0xca, 0xe7, 0x20, 0x3d, 0x60, 0xc0, 0x7f, 0x8e, 0x41, 0xa9, 0x7d, 0x79, 0x19,
		0x72, 0xa1, 0x6e, 0x27, 0x1e, 0xfe, 0xf3, 0x0c, 0x1e, 0x46, 0x61, 0xd7, 0x59, 0xb7, 0x13, 0x4f,
		0xf0, 0x0b, 0xdc, 0x75, 0x86, 0xc0, 0x61, 0xe3, 0x8d, 0x4e, 0x3c, 0xfa, 0x17, 0x79, 0xd4, 0x39,
		0xa4, 0xfc, 0x2c, 0x64, 0xfd, 0xe2, 0x15, 0x8f, 0xff, 0x25, 0x86, 0x0f, 0x30, 0x38, 0x02, 0xa1,
		0xe2, 0x19, 0x4f, 0xf1, 0x05, 0x1e, 0x81, 0x10, 0x0a, 0x2f, 0xa3, 0xee, 0x86, 0x28, 0x9e, 0xe9,
		0x97, 0xf9, 0x32, 0xea, 0xea, 0x87, 0xf0, 0x6c, 0x92, 0x1a, 0x12, 0x4f, 0xf1, 0x2b, 0x7c, 0x36,
		0x89, 0x3d, 0x76, 0xa3, 0xbb, 0xc3, 0x88, 0xe7, 0xf8, 0x55, 0xee, 0x46, 0x57, 0x83, 0x51, 0xde,
		0x02, 0xa9, 0xb7, 0xbb, 0x88, 0xe7, 0xfb, 0x22, 0xe3, 0x1b, 0xef, 0x69, 0x2e, 0xca, 0xcf, 0xc3,
		0xb1, 0xfe, 0x9d, 0x45, 0x3c, 0xeb, 0x97, 0xee, 0x76, 0x9d, 0x05, 0xc3, 0x8d, 0x45, 0x79, 0x3b,
		0x28, 0x51, 0xe1, 0xae, 0x22, 0x9e, 0xf6, 0x95, 0xbb, 0xd1, 0x42, 0x10, 0x6e, 0x2a, 0xca, 0x15,
		0x80, 0xa0, 0xa0, 0xc7, 0x73, 0xbd, 0xca, 0xb8, 0x42, 0x20, 0xbc, 0x34, 0x58, 0x3d, 0x8f, 0xc7,
		0x7f, 0x99, 0x2f, 0x0d, 0x86, 0xc0, 0x4b, 0x83, 0x97, 0xf2, 0x78, 0xf4, 0x6b, 0x7c, 0x69, 0x70,
		0x08, 0xce, 0xec, 0x50, 0xb5, 0x8c, 0x67, 0xf8, 0x0a, 0xcf, 0xec, 0x10, 0xaa, 0xbc, 0x09, 0xe3,
		0x3d, 0x05, 0x36, 0x9e, 0xea, 0xab, 0x8c, 0x4a, 0xec, 0xae, 0xaf, 0xe1, 0xe2, 0xc5, 0x8a, 0x6b,
		0x3c, 0xdb, 0x6f, 0x76, 0x15, 0x2f, 0x56, 0x5b, 0xc3, 0x5c, 0xac, 0xb0, 0xc6, 0x73, 0xfd, 0xd6,
		0x5d, 0x76, 0x11, 0x13, 0xad, 0xab, 0xe5, 0x8b, 0x90, 0x31, 0xdb, 0x86, 0x81, 0x17, 0xa2, 0x74,
		0xef, 0x5f, 0x15, 0x16, 0xff, 0xf9, 0x43, 0x16, 0x69, 0x0e, 0x28, 0x2f, 0x42, 0x1a, 0xb5, 0x76,
		0x51, 0x23, 0x0e, 0xf9, 0x2f, 0x1f, 0xf2, 0xcd, 0x17, 0x5b, 0x97, 0x9f, 0x05, 0xa0, 0xd7, 0x36,
		0xe4, 0x93, 0x64, 0x0c, 0xf6, 0x5f, 0x3f, 0x64, 0xbf, 0xf7, 0x09, 0x20, 0x01, 0x01, 0xfd, 0xf5,
		0xd0, 0xbd, 0x09, 0xee, 0x44, 0x09, 0xc8, 0xec, 0x5e, 0x80, 0x91, 0x2b, 0xae, 0x65, 0x7a, 0x6a,
		0x33, 0x0e, 0xfd, 0x6f, 0x0c, 0xcd, 0xed, 0x71, 0xc0, 0x70, 0xd0, 0x3d, 0xb5, 0xe9, 0xc6, 0x61,
		0xff, 0x9d, 0x61, 0x7d, 0x00, 0x06, 0x6b, 0xaa, 0xeb, 0x0d, 0x32, 0xee, 0xff, 0xe0, 0x60, 0x0e,
		0xc0, 0x4e, 0xe3, 0xbf, 0xaf, 0xa2, 0x4e, 0x1c, 0xf6, 0x7d, 0xee, 0x34, 0xb3, 0x2f, 0x7f, 0x12,
		0xb2, 0xf8, 0x4f, 0xfa, 0x23, 0xbe, 0x18, 0xf0, 0x7f, 0x32, 0x70, 0x80, 0xc0, 0x6f, 0x76, 0xbd,
		0x86, 0xa7, 0xc7, 0x07, 0xfb, 0xbf, 0xd8, 0x4c, 0x73, 0xfb, 0x72, 0x05, 0x72, 0xae, 0xd7, 0x68,
		0xb4, 0x59, 0xef, 0x1c, 0x03, 0xff, 0xef, 0x0f, 0xfd, 0xeb, 0x14, 0x1f, 0x83, 0x67, 0xfb, 0xfa,
		0x55, 0xcf, 0xb6, 0xc8, 0x27, 0x98, 0x38, 0x86, 0xbb, 0x8c, 0x21, 0x04, 0x59, 0xaa, 0xf6, 0xbf,
		0x5a, 0x86, 0x55, 0x6b, 0xd5, 0xa2, 0x97, 0xca, 0x2f, 0x4d, 0xc7, 0xdf, 0x0e, 0xc3, 0xad, 0x2c,
		0x3c, 0xa0, 0x59, 0xad, 0x5d, 0xcb, 0x9d, 0x0b, 0x15, 0x86, 0x39, 0xcb, 0x64, 0x9c, 0x52, 0xd2,
		0x32, 0xd1, 0xd4, 0xd1, 0xee, 0x99, 0xa7, 0x4f, 0x40, 0xba, 0xde, 0xde, 0xdd, 0xed, 0x48, 0x22,
		0x24, 0xdd, 0xf6, 0x2e, 0xfb, 0x31, 0x18, 0xfe, 0x73, 0xfa, 0xed, 0x24, 0x8c, 0x56, 0x0c, 0x63,
		0xbb, 0x63, 0x23, 0xb7, 0x66, 0xa2, 0xda, 0x9e, 0x54, 0x84, 0x61, 0x32, 0xd8, 0x67, 0x88, 0x99,
		0x70, 0x79, 0x48, 0x66, 0xcf, 0xbe, 0x66, 0x9e, 0xdc, 0xc0, 0x27, 0x7c, 0xcd, 0xbc, 0xaf, 0x39,
		0x43, 0x2f, 0xe0, 0x7d, 0xcd, 0x19, 0x5f, 0xb3, 0x40, 0xae, 0xe1, 0x93, 0xbe, 0x66, 0xc1, 0xd7,
		0x2c, 0x92, 0xcf, 0x4c, 0xa3, 0xbe, 0x66, 0xd1, 0xd7, 0x9c, 0x25, 0x1f, 0x96, 0x52, 0xbe, 0xe6,
		0xac, 0xaf, 0x39, 0x47, 0xbe, 0x27, 0x8d, 0xfb, 0x9a, 0x73, 0xbe, 0xe6, 0x3c, 0xf9, 0x86, 0x24,
		0xf9, 0x9a, 0xf3, 0xbe, 0xe6, 0x02, 0xf9, 0xd5, 0xd7, 0x88, 0xaf, 0xb9, 0x20, 0x4d, 0xc1, 0x08,
		0x1d, 0xd9, 0xd3, 0xe4, 0x87, 0x06, 0x63, 0x97, 0x87, 0x64, 0x2e, 0x08, 0x74, 0xcf, 0x90, 0x5f,
		0x76, 0x0d, 0x07, 0xba, 0x67, 0x02, 0xdd, 0x3c, 0xf9, 0x0f, 0x26, 0x62, 0xa0, 0x9b, 0x0f, 0x74,
		0x67, 0x8a, 0xa3, 0x38, 0x47, 0x02, 0xdd, 0x99, 0x40, 0xb7, 0x50, 0x2c, 0xe0, 0x19, 0x08, 0x74,
		0x0b, 0x81, 0x6e, 0xb1, 0x38, 0x76, 0x4a, 0x98, 0xc9, 0x07, 0xba, 0x45, 0xe9, 0x29, 0xc8, 0xb9,
		0xed, 0x5d, 0x85, 0x55, 0x0e, 0xf2, 0x0b, 0xb2, 0xdc, 0x3c, 0xcc, 0xe2, 0x9c, 0x20, 0xd3, 0x7a,
		0x79, 0x48, 0x06, 0xb7, 0xbd, 0xcb, 0x36, 0xe3, 0xa5, 0x3c, 0x90, 0xfb, 0x31, 0x85, 0xfc, 0xf0,
		0x7b, 0xfa, 0x2d, 0x01, 0xb2, 0xdb, 0xd7, 0x2d, 0xf2, 0x33, 0x03, 0xf7, 0xff, 0x78, 0x72, 0xb9,
		0xd3, 0x67, 0x16, 0xc8, 0x97, 0xe0, 0xec, 0x65, 0x41, 0xe6, 0x82, 0x40, 0xb7, 0x58, 0x7c, 0x88,
		0x0c, 0xc8, 0xd7, 0x2d, 0x4a, 0x73, 0x90, 0x0f, 0x0d, 0x68, 0x9e, 0xfc, 0xb6, 0x2b, 0x3a, 0x22,
		0x41, 0xce, 0x05, 0x23, 0x9a, 0x5f, 0x4a, 0x03, 0x4e, 0x7b, 0xfc, 0x8f, 0x77, 0xdd, 0x9a, 0xfe,
		0x42, 0x02, 0x72, 0xf4, 0x4a, 0x9d, 0x8c, 0x0a, 0xbf, 0x8a, 0x9e, 0x92, 0x3a, 0xcc, 0x8d, 0x21,
		0x99, 0x0b, 0x24, 0x19, 0x80, 0x9a, 0xe2, 0x0c, 0xa7, 0x9e, 0x2c, 0x3d, 0xfd, 0x0f, 0x6f, 0x9f,
		0x7c, 0xf2, 0xd0, 0x15, 0x84, 0x63, 0x37, 0x47, 0xb7, 0xf1, 0xd9, 0x1d, 0xdd, 0xf4, 0x9e, 0x99,
		0x3f, 0x8f, 0x03, 0x1c, 0xb0, 0x48, 0x3b, 0x90, 0x59, 0x56, 0x5d, 0xf2, 0xab, 0x50, 0xe2, 0x7a,
		0x6a, 0xe9, 0xdc, 0xff, 0xbc, 0x7d, 0xf2, 0x4c, 0x0c, 0x23, 0xdb, 0x61, 0x67, 0x37, 0x3a, 0x98,
		0xf5, 0xec, 0x02, 0x86, 0x5f, 0x1e, 0x92, 0x7d, 0x2a, 0x69, 0x9e, 0xbb, 0xba, 0xa9, 0xb6, 0xe8,
		0x8f, 0xd8, 0x92, 0x4b, 0xe2, 0xc1, 0xdb, 0x27, 0xf3, 0x1b, 0x9d, 0x40, 0x1e, 0xb8, 0x82, 0x9f,
		0x96, 0x32, 0x30, 0x4c, 0x5d, 0x5d, 0xba, 0xfc, 0xe6, 0xed, 0xd2, 0xd0, 0x5b, 0xb7, 0x4b, 0x43,
		0x7f, 0x7f, 0xbb, 0x34, 0xf4, 0xce, 0xed, 0x92, 0xf0, 0xfe, 0xed, 0x92, 0xf0, 0xc1, 0xed, 0x92,
		0x70, 0xeb, 0xa0, 0x24, 0xbc, 0x71, 0x50, 0x12, 0xbe, 0x7e, 0x50, 0x12, 0xbe, 0x75, 0x50, 0x12,
		0xde, 0x3c, 0x28, 0x0d, 0xbd, 0x75, 0x50, 0x12, 0xde, 0x39, 0x28, 0x09, 0xdf, 0x3f, 0x28, 0x0d,
		0xbd, 0x7f, 0x50, 0x12, 0x3e, 0x38, 0x28, 0x0d, 0xdd, 0x7a, 0xb7, 0x34, 0xf4, 0xc6, 0xbb, 0x25,
		0xe1, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x3d, 0x98, 0xbe, 0x13, 0x38, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Subby) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Subby)
	if !ok {
		that2, ok := that.(Subby)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Subby")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Subby but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Subby but is not nil && this == nil")
	}
	if this.Sub != nil && that1.Sub != nil {
		if *this.Sub != *that1.Sub {
			return fmt.Errorf("Sub this(%v) Not Equal that(%v)", *this.Sub, *that1.Sub)
		}
	} else if this.Sub != nil {
		return fmt.Errorf("this.Sub == nil && that.Sub != nil")
	} else if that1.Sub != nil {
		return fmt.Errorf("Sub this(%v) Not Equal that(%v)", this.Sub, that1.Sub)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Subby) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Subby)
	if !ok {
		that2, ok := that.(Subby)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sub != nil && that1.Sub != nil {
		if *this.Sub != *that1.Sub {
			return false
		}
	} else if this.Sub != nil {
		return false
	} else if that1.Sub != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AllTypesOneOf) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf)
	if !ok {
		that2, ok := that.(AllTypesOneOf)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf but is not nil && this == nil")
	}
	if that1.TestOneof == nil {
		if this.TestOneof != nil {
			return fmt.Errorf("this.TestOneof != nil && that1.TestOneof == nil")
		}
	} else if this.TestOneof == nil {
		return fmt.Errorf("this.TestOneof == nil && that1.TestOneof != nil")
	} else if err := this.TestOneof.VerboseEqual(that1.TestOneof); err != nil {
		return err
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AllTypesOneOf_Field1) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field1)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field1)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field1")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field1 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field1 but is not nil && this == nil")
	}
	if this.Field1 != that1.Field1 {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	return nil
}
func (this *AllTypesOneOf_Field2) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field2)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field2")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field2 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field2 but is not nil && this == nil")
	}
	if this.Field2 != that1.Field2 {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this.Field2, that1.Field2)
	}
	return nil
}
func (this *AllTypesOneOf_Field3) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field3)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field3)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field3")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field3 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field3 but is not nil && this == nil")
	}
	if this.Field3 != that1.Field3 {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this.Field3, that1.Field3)
	}
	return nil
}
func (this *AllTypesOneOf_Field4) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field4)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field4)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field4")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field4 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field4 but is not nil && this == nil")
	}
	if this.Field4 != that1.Field4 {
		return fmt.Errorf("Field4 this(%v) Not Equal that(%v)", this.Field4, that1.Field4)
	}
	return nil
}
func (this *AllTypesOneOf_Field5) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field5)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field5)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field5")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field5 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field5 but is not nil && this == nil")
	}
	if this.Field5 != that1.Field5 {
		return fmt.Errorf("Field5 this(%v) Not Equal that(%v)", this.Field5, that1.Field5)
	}
	return nil
}
func (this *AllTypesOneOf_Field6) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field6)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field6)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field6")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field6 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field6 but is not nil && this == nil")
	}
	if this.Field6 != that1.Field6 {
		return fmt.Errorf("Field6 this(%v) Not Equal that(%v)", this.Field6, that1.Field6)
	}
	return nil
}
func (this *AllTypesOneOf_Field7) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field7)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field7)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field7")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field7 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field7 but is not nil && this == nil")
	}
	if this.Field7 != that1.Field7 {
		return fmt.Errorf("Field7 this(%v) Not Equal that(%v)", this.Field7, that1.Field7)
	}
	return nil
}
func (this *AllTypesOneOf_Field8) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field8)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field8)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field8")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field8 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field8 but is not nil && this == nil")
	}
	if this.Field8 != that1.Field8 {
		return fmt.Errorf("Field8 this(%v) Not Equal that(%v)", this.Field8, that1.Field8)
	}
	return nil
}
func (this *AllTypesOneOf_Field9) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field9)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field9)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field9")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field9 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field9 but is not nil && this == nil")
	}
	if this.Field9 != that1.Field9 {
		return fmt.Errorf("Field9 this(%v) Not Equal that(%v)", this.Field9, that1.Field9)
	}
	return nil
}
func (this *AllTypesOneOf_Field10) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field10)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field10)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field10")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field10 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field10 but is not nil && this == nil")
	}
	if this.Field10 != that1.Field10 {
		return fmt.Errorf("Field10 this(%v) Not Equal that(%v)", this.Field10, that1.Field10)
	}
	return nil
}
func (this *AllTypesOneOf_Field11) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field11)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field11)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field11")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field11 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field11 but is not nil && this == nil")
	}
	if this.Field11 != that1.Field11 {
		return fmt.Errorf("Field11 this(%v) Not Equal that(%v)", this.Field11, that1.Field11)
	}
	return nil
}
func (this *AllTypesOneOf_Field12) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field12)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field12)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field12")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field12 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field12 but is not nil && this == nil")
	}
	if this.Field12 != that1.Field12 {
		return fmt.Errorf("Field12 this(%v) Not Equal that(%v)", this.Field12, that1.Field12)
	}
	return nil
}
func (this *AllTypesOneOf_Field13) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field13)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field13)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field13")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field13 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field13 but is not nil && this == nil")
	}
	if this.Field13 != that1.Field13 {
		return fmt.Errorf("Field13 this(%v) Not Equal that(%v)", this.Field13, that1.Field13)
	}
	return nil
}
func (this *AllTypesOneOf_Field14) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field14)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field14)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field14")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field14 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field14 but is not nil && this == nil")
	}
	if this.Field14 != that1.Field14 {
		return fmt.Errorf("Field14 this(%v) Not Equal that(%v)", this.Field14, that1.Field14)
	}
	return nil
}
func (this *AllTypesOneOf_Field15) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_Field15)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field15)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_Field15")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_Field15 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_Field15 but is not nil && this == nil")
	}
	if !bytes.Equal(this.Field15, that1.Field15) {
		return fmt.Errorf("Field15 this(%v) Not Equal that(%v)", this.Field15, that1.Field15)
	}
	return nil
}
func (this *AllTypesOneOf_SubMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AllTypesOneOf_SubMessage)
	if !ok {
		that2, ok := that.(AllTypesOneOf_SubMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AllTypesOneOf_SubMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AllTypesOneOf_SubMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AllTypesOneOf_SubMessage but is not nil && this == nil")
	}
	if !this.SubMessage.Equal(that1.SubMessage) {
		return fmt.Errorf("SubMessage this(%v) Not Equal that(%v)", this.SubMessage, that1.SubMessage)
	}
	return nil
}
func (this *AllTypesOneOf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf)
	if !ok {
		that2, ok := that.(AllTypesOneOf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TestOneof == nil {
		if this.TestOneof != nil {
			return false
		}
	} else if this.TestOneof == nil {
		return false
	} else if !this.TestOneof.Equal(that1.TestOneof) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field1)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field1 != that1.Field1 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field2)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field2 != that1.Field2 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field3) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field3)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field3 != that1.Field3 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field4)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field4 != that1.Field4 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field5) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field5)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field5)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field5 != that1.Field5 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field6)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field6 != that1.Field6 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field7) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field7)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field7)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field7 != that1.Field7 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field8) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field8)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field8)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field8 != that1.Field8 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field9) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field9)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field9)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field9 != that1.Field9 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field10) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field10)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field10)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field10 != that1.Field10 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field11) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field11)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field11)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field11 != that1.Field11 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field12) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field12)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field12)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field12 != that1.Field12 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field13) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field13)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field13)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field13 != that1.Field13 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field14) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field14)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field14)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field14 != that1.Field14 {
		return false
	}
	return true
}
func (this *AllTypesOneOf_Field15) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_Field15)
	if !ok {
		that2, ok := that.(AllTypesOneOf_Field15)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Field15, that1.Field15) {
		return false
	}
	return true
}
func (this *AllTypesOneOf_SubMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllTypesOneOf_SubMessage)
	if !ok {
		that2, ok := that.(AllTypesOneOf_SubMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SubMessage.Equal(that1.SubMessage) {
		return false
	}
	return true
}
func (this *TwoOneofs) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs)
	if !ok {
		that2, ok := that.(TwoOneofs)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs but is not nil && this == nil")
	}
	if that1.One == nil {
		if this.One != nil {
			return fmt.Errorf("this.One != nil && that1.One == nil")
		}
	} else if this.One == nil {
		return fmt.Errorf("this.One == nil && that1.One != nil")
	} else if err := this.One.VerboseEqual(that1.One); err != nil {
		return err
	}
	if that1.Two == nil {
		if this.Two != nil {
			return fmt.Errorf("this.Two != nil && that1.Two == nil")
		}
	} else if this.Two == nil {
		return fmt.Errorf("this.Two == nil && that1.Two != nil")
	} else if err := this.Two.VerboseEqual(that1.Two); err != nil {
		return err
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *TwoOneofs_Field1) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs_Field1)
	if !ok {
		that2, ok := that.(TwoOneofs_Field1)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs_Field1")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs_Field1 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs_Field1 but is not nil && this == nil")
	}
	if this.Field1 != that1.Field1 {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	return nil
}
func (this *TwoOneofs_Field2) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs_Field2)
	if !ok {
		that2, ok := that.(TwoOneofs_Field2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs_Field2")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs_Field2 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs_Field2 but is not nil && this == nil")
	}
	if this.Field2 != that1.Field2 {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this.Field2, that1.Field2)
	}
	return nil
}
func (this *TwoOneofs_Field3) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs_Field3)
	if !ok {
		that2, ok := that.(TwoOneofs_Field3)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs_Field3")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs_Field3 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs_Field3 but is not nil && this == nil")
	}
	if this.Field3 != that1.Field3 {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this.Field3, that1.Field3)
	}
	return nil
}
func (this *TwoOneofs_Field34) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs_Field34)
	if !ok {
		that2, ok := that.(TwoOneofs_Field34)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs_Field34")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs_Field34 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs_Field34 but is not nil && this == nil")
	}
	if this.Field34 != that1.Field34 {
		return fmt.Errorf("Field34 this(%v) Not Equal that(%v)", this.Field34, that1.Field34)
	}
	return nil
}
func (this *TwoOneofs_Field35) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs_Field35)
	if !ok {
		that2, ok := that.(TwoOneofs_Field35)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs_Field35")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs_Field35 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs_Field35 but is not nil && this == nil")
	}
	if !bytes.Equal(this.Field35, that1.Field35) {
		return fmt.Errorf("Field35 this(%v) Not Equal that(%v)", this.Field35, that1.Field35)
	}
	return nil
}
func (this *TwoOneofs_SubMessage2) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TwoOneofs_SubMessage2)
	if !ok {
		that2, ok := that.(TwoOneofs_SubMessage2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TwoOneofs_SubMessage2")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TwoOneofs_SubMessage2 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TwoOneofs_SubMessage2 but is not nil && this == nil")
	}
	if !this.SubMessage2.Equal(that1.SubMessage2) {
		return fmt.Errorf("SubMessage2 this(%v) Not Equal that(%v)", this.SubMessage2, that1.SubMessage2)
	}
	return nil
}
func (this *TwoOneofs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TwoOneofs)
	if !ok {
		that2, ok := that.(TwoOneofs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.One == nil {
		if this.One != nil {
			return false
		}
	} else if this.One == nil {
		return false
	} else if !this.One.Equal(that1.One) {
		return false
	}
	if that1.Two == nil {
		if this.Two != nil {
			return false
		}
	} else if this.Two == nil {
		return false
	} else if !this.Two.Equal(that1.Two) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TwoOneofs_Field1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TwoOneofs_Field1)
	if !ok {
		that2, ok := that.(TwoOneofs_Field1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field1 != that1.Field1 {
		return false
	}
	return true
}
func (this *TwoOneofs_Field2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TwoOneofs_Field2)
	if !ok {
		that2, ok := that.(TwoOneofs_Field2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field2 != that1.Field2 {
		return false
	}
	return true
}
func (this *TwoOneofs_Field3) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TwoOneofs_Field3)
	if !ok {
		that2, ok := that.(TwoOneofs_Field3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field3 != that1.Field3 {
		return false
	}
	return true
}
func (this *TwoOneofs_Field34) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TwoOneofs_Field34)
	if !ok {
		that2, ok := that.(TwoOneofs_Field34)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field34 != that1.Field34 {
		return false
	}
	return true
}
func (this *TwoOneofs_Field35) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TwoOneofs_Field35)
	if !ok {
		that2, ok := that.(TwoOneofs_Field35)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Field35, that1.Field35) {
		return false
	}
	return true
}
func (this *TwoOneofs_SubMessage2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TwoOneofs_SubMessage2)
	if !ok {
		that2, ok := that.(TwoOneofs_SubMessage2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SubMessage2.Equal(that1.SubMessage2) {
		return false
	}
	return true
}
func (this *CustomOneof) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneof)
	if !ok {
		that2, ok := that.(CustomOneof)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneof")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomOneof but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomOneof but is not nil && this == nil")
	}
	if that1.Custom == nil {
		if this.Custom != nil {
			return fmt.Errorf("this.Custom != nil && that1.Custom == nil")
		}
	} else if this.Custom == nil {
		return fmt.Errorf("this.Custom == nil && that1.Custom != nil")
	} else if err := this.Custom.VerboseEqual(that1.Custom); err != nil {
		return err
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CustomOneof_Stringy) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneof_Stringy)
	if !ok {
		that2, ok := that.(CustomOneof_Stringy)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneof_Stringy")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomOneof_Stringy but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomOneof_Stringy but is not nil && this == nil")
	}
	if this.Stringy != that1.Stringy {
		return fmt.Errorf("Stringy this(%v) Not Equal that(%v)", this.Stringy, that1.Stringy)
	}
	return nil
}
func (this *CustomOneof_CustomType) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneof_CustomType)
	if !ok {
		that2, ok := that.(CustomOneof_CustomType)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneof_CustomType")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomOneof_CustomType but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomOneof_CustomType but is not nil && this == nil")
	}
	if !this.CustomType.Equal(that1.CustomType) {
		return fmt.Errorf("CustomType this(%v) Not Equal that(%v)", this.CustomType, that1.CustomType)
	}
	return nil
}
func (this *CustomOneof_CastType) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneof_CastType)
	if !ok {
		that2, ok := that.(CustomOneof_CastType)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneof_CastType")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomOneof_CastType but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomOneof_CastType but is not nil && this == nil")
	}
	if this.CastType != that1.CastType {
		return fmt.Errorf("CastType this(%v) Not Equal that(%v)", this.CastType, that1.CastType)
	}
	return nil
}
func (this *CustomOneof_MyCustomName) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CustomOneof_MyCustomName)
	if !ok {
		that2, ok := that.(CustomOneof_MyCustomName)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CustomOneof_MyCustomName")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CustomOneof_MyCustomName but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CustomOneof_MyCustomName but is not nil && this == nil")
	}
	if this.MyCustomName != that1.MyCustomName {
		return fmt.Errorf("MyCustomName this(%v) Not Equal that(%v)", this.MyCustomName, that1.MyCustomName)
	}
	return nil
}
func (this *CustomOneof) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomOneof)
	if !ok {
		that2, ok := that.(CustomOneof)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Custom == nil {
		if this.Custom != nil {
			return false
		}
	} else if this.Custom == nil {
		return false
	} else if !this.Custom.Equal(that1.Custom) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomOneof_Stringy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomOneof_Stringy)
	if !ok {
		that2, ok := that.(CustomOneof_Stringy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Stringy != that1.Stringy {
		return false
	}
	return true
}
func (this *CustomOneof_CustomType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomOneof_CustomType)
	if !ok {
		that2, ok := that.(CustomOneof_CustomType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomType.Equal(that1.CustomType) {
		return false
	}
	return true
}
func (this *CustomOneof_CastType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomOneof_CastType)
	if !ok {
		that2, ok := that.(CustomOneof_CastType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CastType != that1.CastType {
		return false
	}
	return true
}
func (this *CustomOneof_MyCustomName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomOneof_MyCustomName)
	if !ok {
		that2, ok := that.(CustomOneof_MyCustomName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MyCustomName != that1.MyCustomName {
		return false
	}
	return true
}
func (this *Subby) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&one.Subby{")
	if this.Sub != nil {
		s = append(s, "Sub: "+valueToGoStringOne(this.Sub, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllTypesOneOf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&one.AllTypesOneOf{")
	if this.TestOneof != nil {
		s = append(s, "TestOneof: "+fmt.Sprintf("%#v", this.TestOneof)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllTypesOneOf_Field1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field1{` +
		`Field1:` + fmt.Sprintf("%#v", this.Field1) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field2{` +
		`Field2:` + fmt.Sprintf("%#v", this.Field2) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field3) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field3{` +
		`Field3:` + fmt.Sprintf("%#v", this.Field3) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field4{` +
		`Field4:` + fmt.Sprintf("%#v", this.Field4) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field5) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field5{` +
		`Field5:` + fmt.Sprintf("%#v", this.Field5) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field6{` +
		`Field6:` + fmt.Sprintf("%#v", this.Field6) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field7) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field7{` +
		`Field7:` + fmt.Sprintf("%#v", this.Field7) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field8) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field8{` +
		`Field8:` + fmt.Sprintf("%#v", this.Field8) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field9) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field9{` +
		`Field9:` + fmt.Sprintf("%#v", this.Field9) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field10) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field10{` +
		`Field10:` + fmt.Sprintf("%#v", this.Field10) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field11) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field11{` +
		`Field11:` + fmt.Sprintf("%#v", this.Field11) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field12) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field12{` +
		`Field12:` + fmt.Sprintf("%#v", this.Field12) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field13) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field13{` +
		`Field13:` + fmt.Sprintf("%#v", this.Field13) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field14) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field14{` +
		`Field14:` + fmt.Sprintf("%#v", this.Field14) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_Field15) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_Field15{` +
		`Field15:` + fmt.Sprintf("%#v", this.Field15) + `}`}, ", ")
	return s
}
func (this *AllTypesOneOf_SubMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.AllTypesOneOf_SubMessage{` +
		`SubMessage:` + fmt.Sprintf("%#v", this.SubMessage) + `}`}, ", ")
	return s
}
func (this *TwoOneofs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&one.TwoOneofs{")
	if this.One != nil {
		s = append(s, "One: "+fmt.Sprintf("%#v", this.One)+",\n")
	}
	if this.Two != nil {
		s = append(s, "Two: "+fmt.Sprintf("%#v", this.Two)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TwoOneofs_Field1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofs_Field1{` +
		`Field1:` + fmt.Sprintf("%#v", this.Field1) + `}`}, ", ")
	return s
}
func (this *TwoOneofs_Field2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofs_Field2{` +
		`Field2:` + fmt.Sprintf("%#v", this.Field2) + `}`}, ", ")
	return s
}
func (this *TwoOneofs_Field3) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofs_Field3{` +
		`Field3:` + fmt.Sprintf("%#v", this.Field3) + `}`}, ", ")
	return s
}
func (this *TwoOneofs_Field34) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofs_Field34{` +
		`Field34:` + fmt.Sprintf("%#v", this.Field34) + `}`}, ", ")
	return s
}
func (this *TwoOneofs_Field35) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofs_Field35{` +
		`Field35:` + fmt.Sprintf("%#v", this.Field35) + `}`}, ", ")
	return s
}
func (this *TwoOneofs_SubMessage2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.TwoOneofs_SubMessage2{` +
		`SubMessage2:` + fmt.Sprintf("%#v", this.SubMessage2) + `}`}, ", ")
	return s
}
func (this *CustomOneof) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&one.CustomOneof{")
	if this.Custom != nil {
		s = append(s, "Custom: "+fmt.Sprintf("%#v", this.Custom)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomOneof_Stringy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.CustomOneof_Stringy{` +
		`Stringy:` + fmt.Sprintf("%#v", this.Stringy) + `}`}, ", ")
	return s
}
func (this *CustomOneof_CustomType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.CustomOneof_CustomType{` +
		`CustomType:` + fmt.Sprintf("%#v", this.CustomType) + `}`}, ", ")
	return s
}
func (this *CustomOneof_CastType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.CustomOneof_CastType{` +
		`CastType:` + fmt.Sprintf("%#v", this.CastType) + `}`}, ", ")
	return s
}
func (this *CustomOneof_MyCustomName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.CustomOneof_MyCustomName{` +
		`MyCustomName:` + fmt.Sprintf("%#v", this.MyCustomName) + `}`}, ", ")
	return s
}
func valueToGoStringOne(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func NewPopulatedSubby(r randyOne, easy bool) *Subby {
	this := &Subby{}
	if r.Intn(5) != 0 {
		v1 := string(randStringOne(r))
		this.Sub = &v1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOne(r, 2)
	}
	return this
}

func NewPopulatedAllTypesOneOf(r randyOne, easy bool) *AllTypesOneOf {
	this := &AllTypesOneOf{}
	oneofNumber_TestOneof := []int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}[r.Intn(16)]
	switch oneofNumber_TestOneof {
	case 1:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field1(r, easy)
	case 2:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field2(r, easy)
	case 3:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field3(r, easy)
	case 4:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field4(r, easy)
	case 5:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field5(r, easy)
	case 6:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field6(r, easy)
	case 7:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field7(r, easy)
	case 8:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field8(r, easy)
	case 9:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field9(r, easy)
	case 10:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field10(r, easy)
	case 11:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field11(r, easy)
	case 12:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field12(r, easy)
	case 13:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field13(r, easy)
	case 14:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field14(r, easy)
	case 15:
		this.TestOneof = NewPopulatedAllTypesOneOf_Field15(r, easy)
	case 16:
		this.TestOneof = NewPopulatedAllTypesOneOf_SubMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOne(r, 17)
	}
	return this
}

func NewPopulatedAllTypesOneOf_Field1(r randyOne, easy bool) *AllTypesOneOf_Field1 {
	this := &AllTypesOneOf_Field1{}
	this.Field1 = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Field1 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field2(r randyOne, easy bool) *AllTypesOneOf_Field2 {
	this := &AllTypesOneOf_Field2{}
	this.Field2 = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Field2 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field3(r randyOne, easy bool) *AllTypesOneOf_Field3 {
	this := &AllTypesOneOf_Field3{}
	this.Field3 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field3 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field4(r randyOne, easy bool) *AllTypesOneOf_Field4 {
	this := &AllTypesOneOf_Field4{}
	this.Field4 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field4 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field5(r randyOne, easy bool) *AllTypesOneOf_Field5 {
	this := &AllTypesOneOf_Field5{}
	this.Field5 = uint32(r.Uint32())
	return this
}
func NewPopulatedAllTypesOneOf_Field6(r randyOne, easy bool) *AllTypesOneOf_Field6 {
	this := &AllTypesOneOf_Field6{}
	this.Field6 = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedAllTypesOneOf_Field7(r randyOne, easy bool) *AllTypesOneOf_Field7 {
	this := &AllTypesOneOf_Field7{}
	this.Field7 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field7 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field8(r randyOne, easy bool) *AllTypesOneOf_Field8 {
	this := &AllTypesOneOf_Field8{}
	this.Field8 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field8 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field9(r randyOne, easy bool) *AllTypesOneOf_Field9 {
	this := &AllTypesOneOf_Field9{}
	this.Field9 = uint32(r.Uint32())
	return this
}
func NewPopulatedAllTypesOneOf_Field10(r randyOne, easy bool) *AllTypesOneOf_Field10 {
	this := &AllTypesOneOf_Field10{}
	this.Field10 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field10 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field11(r randyOne, easy bool) *AllTypesOneOf_Field11 {
	this := &AllTypesOneOf_Field11{}
	this.Field11 = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedAllTypesOneOf_Field12(r randyOne, easy bool) *AllTypesOneOf_Field12 {
	this := &AllTypesOneOf_Field12{}
	this.Field12 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field12 *= -1
	}
	return this
}
func NewPopulatedAllTypesOneOf_Field13(r randyOne, easy bool) *AllTypesOneOf_Field13 {
	this := &AllTypesOneOf_Field13{}
	this.Field13 = bool(bool(r.Intn(2) == 0))
	return this
}
func NewPopulatedAllTypesOneOf_Field14(r randyOne, easy bool) *AllTypesOneOf_Field14 {
	this := &AllTypesOneOf_Field14{}
	this.Field14 = string(randStringOne(r))
	return this
}
func NewPopulatedAllTypesOneOf_Field15(r randyOne, easy bool) *AllTypesOneOf_Field15 {
	this := &AllTypesOneOf_Field15{}
	v2 := r.Intn(100)
	this.Field15 = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Field15[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedAllTypesOneOf_SubMessage(r randyOne, easy bool) *AllTypesOneOf_SubMessage {
	this := &AllTypesOneOf_SubMessage{}
	this.SubMessage = NewPopulatedSubby(r, easy)
	return this
}
func NewPopulatedTwoOneofs(r randyOne, easy bool) *TwoOneofs {
	this := &TwoOneofs{}
	oneofNumber_One := []int32{1, 2, 3}[r.Intn(3)]
	switch oneofNumber_One {
	case 1:
		this.One = NewPopulatedTwoOneofs_Field1(r, easy)
	case 2:
		this.One = NewPopulatedTwoOneofs_Field2(r, easy)
	case 3:
		this.One = NewPopulatedTwoOneofs_Field3(r, easy)
	}
	oneofNumber_Two := []int32{34, 35, 36}[r.Intn(3)]
	switch oneofNumber_Two {
	case 34:
		this.Two = NewPopulatedTwoOneofs_Field34(r, easy)
	case 35:
		this.Two = NewPopulatedTwoOneofs_Field35(r, easy)
	case 36:
		this.Two = NewPopulatedTwoOneofs_SubMessage2(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOne(r, 37)
	}
	return this
}

func NewPopulatedTwoOneofs_Field1(r randyOne, easy bool) *TwoOneofs_Field1 {
	this := &TwoOneofs_Field1{}
	this.Field1 = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Field1 *= -1
	}
	return this
}
func NewPopulatedTwoOneofs_Field2(r randyOne, easy bool) *TwoOneofs_Field2 {
	this := &TwoOneofs_Field2{}
	this.Field2 = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Field2 *= -1
	}
	return this
}
func NewPopulatedTwoOneofs_Field3(r randyOne, easy bool) *TwoOneofs_Field3 {
	this := &TwoOneofs_Field3{}
	this.Field3 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field3 *= -1
	}
	return this
}
func NewPopulatedTwoOneofs_Field34(r randyOne, easy bool) *TwoOneofs_Field34 {
	this := &TwoOneofs_Field34{}
	this.Field34 = string(randStringOne(r))
	return this
}
func NewPopulatedTwoOneofs_Field35(r randyOne, easy bool) *TwoOneofs_Field35 {
	this := &TwoOneofs_Field35{}
	v3 := r.Intn(100)
	this.Field35 = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Field35[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedTwoOneofs_SubMessage2(r randyOne, easy bool) *TwoOneofs_SubMessage2 {
	this := &TwoOneofs_SubMessage2{}
	this.SubMessage2 = NewPopulatedSubby(r, easy)
	return this
}
func NewPopulatedCustomOneof(r randyOne, easy bool) *CustomOneof {
	this := &CustomOneof{}
	oneofNumber_Custom := []int32{34, 35, 36, 37}[r.Intn(4)]
	switch oneofNumber_Custom {
	case 34:
		this.Custom = NewPopulatedCustomOneof_Stringy(r, easy)
	case 35:
		this.Custom = NewPopulatedCustomOneof_CustomType(r, easy)
	case 36:
		this.Custom = NewPopulatedCustomOneof_CastType(r, easy)
	case 37:
		this.Custom = NewPopulatedCustomOneof_MyCustomName(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOne(r, 38)
	}
	return this
}

func NewPopulatedCustomOneof_Stringy(r randyOne, easy bool) *CustomOneof_Stringy {
	this := &CustomOneof_Stringy{}
	this.Stringy = string(randStringOne(r))
	return this
}
func NewPopulatedCustomOneof_CustomType(r randyOne, easy bool) *CustomOneof_CustomType {
	this := &CustomOneof_CustomType{}
	v4 := github_com_gogo_protobuf_test_custom.NewPopulatedUint128(r)
	this.CustomType = *v4
	return this
}
func NewPopulatedCustomOneof_CastType(r randyOne, easy bool) *CustomOneof_CastType {
	this := &CustomOneof_CastType{}
	this.CastType = github_com_gogo_protobuf_test_casttype.MyUint64Type(uint64(r.Uint32()))
	return this
}
func NewPopulatedCustomOneof_MyCustomName(r randyOne, easy bool) *CustomOneof_MyCustomName {
	this := &CustomOneof_MyCustomName{}
	this.MyCustomName = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MyCustomName *= -1
	}
	return this
}

type randyOne interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneOne(r randyOne) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringOne(r randyOne) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneOne(r)
	}
	return string(tmps)
}
func randUnrecognizedOne(r randyOne, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldOne(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldOne(dAtA []byte, r randyOne, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateOne(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateOne(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateOne(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateOne(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateOne(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateOne(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateOne(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Subby) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sub != nil {
		l = len(*m.Sub)
		n += 1 + l + sovOne(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllTypesOneOf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestOneof != nil {
		n += m.TestOneof.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllTypesOneOf_Field1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *AllTypesOneOf_Field2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *AllTypesOneOf_Field3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field3))
	return n
}
func (m *AllTypesOneOf_Field4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field4))
	return n
}
func (m *AllTypesOneOf_Field5) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field5))
	return n
}
func (m *AllTypesOneOf_Field6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field6))
	return n
}
func (m *AllTypesOneOf_Field7) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sozOne(uint64(m.Field7))
	return n
}
func (m *AllTypesOneOf_Field8) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sozOne(uint64(m.Field8))
	return n
}
func (m *AllTypesOneOf_Field9) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *AllTypesOneOf_Field10) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *AllTypesOneOf_Field11) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *AllTypesOneOf_Field12) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *AllTypesOneOf_Field13) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *AllTypesOneOf_Field14) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field14)
	n += 1 + l + sovOne(uint64(l))
	return n
}
func (m *AllTypesOneOf_Field15) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field15 != nil {
		l = len(m.Field15)
		n += 1 + l + sovOne(uint64(l))
	}
	return n
}
func (m *AllTypesOneOf_SubMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubMessage != nil {
		l = m.SubMessage.Size()
		n += 2 + l + sovOne(uint64(l))
	}
	return n
}
func (m *TwoOneofs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.One != nil {
		n += m.One.Size()
	}
	if m.Two != nil {
		n += m.Two.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TwoOneofs_Field1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *TwoOneofs_Field2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *TwoOneofs_Field3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field3))
	return n
}
func (m *TwoOneofs_Field34) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field34)
	n += 2 + l + sovOne(uint64(l))
	return n
}
func (m *TwoOneofs_Field35) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field35 != nil {
		l = len(m.Field35)
		n += 2 + l + sovOne(uint64(l))
	}
	return n
}
func (m *TwoOneofs_SubMessage2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubMessage2 != nil {
		l = m.SubMessage2.Size()
		n += 2 + l + sovOne(uint64(l))
	}
	return n
}
func (m *CustomOneof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Custom != nil {
		n += m.Custom.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomOneof_Stringy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stringy)
	n += 2 + l + sovOne(uint64(l))
	return n
}
func (m *CustomOneof_CustomType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CustomType.Size()
	n += 2 + l + sovOne(uint64(l))
	return n
}
func (m *CustomOneof_CastType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovOne(uint64(m.CastType))
	return n
}
func (m *CustomOneof_MyCustomName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovOne(uint64(m.MyCustomName))
	return n
}

func sovOne(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOne(x uint64) (n int) {
	return sovOne(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Subby) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Subby{`,
		`Sub:` + valueToStringOne(this.Sub) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf{`,
		`TestOneof:` + fmt.Sprintf("%v", this.TestOneof) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field1{`,
		`Field1:` + fmt.Sprintf("%v", this.Field1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field2{`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field3) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field3{`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field4{`,
		`Field4:` + fmt.Sprintf("%v", this.Field4) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field5) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field5{`,
		`Field5:` + fmt.Sprintf("%v", this.Field5) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field6{`,
		`Field6:` + fmt.Sprintf("%v", this.Field6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field7) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field7{`,
		`Field7:` + fmt.Sprintf("%v", this.Field7) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field8) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field8{`,
		`Field8:` + fmt.Sprintf("%v", this.Field8) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field9) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field9{`,
		`Field9:` + fmt.Sprintf("%v", this.Field9) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field10) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field10{`,
		`Field10:` + fmt.Sprintf("%v", this.Field10) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field11) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field11{`,
		`Field11:` + fmt.Sprintf("%v", this.Field11) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field12) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field12{`,
		`Field12:` + fmt.Sprintf("%v", this.Field12) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field13) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field13{`,
		`Field13:` + fmt.Sprintf("%v", this.Field13) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field14) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field14{`,
		`Field14:` + fmt.Sprintf("%v", this.Field14) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_Field15) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_Field15{`,
		`Field15:` + fmt.Sprintf("%v", this.Field15) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllTypesOneOf_SubMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllTypesOneOf_SubMessage{`,
		`SubMessage:` + strings.Replace(fmt.Sprintf("%v", this.SubMessage), "Subby", "Subby", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs{`,
		`One:` + fmt.Sprintf("%v", this.One) + `,`,
		`Two:` + fmt.Sprintf("%v", this.Two) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs_Field1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs_Field1{`,
		`Field1:` + fmt.Sprintf("%v", this.Field1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs_Field2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs_Field2{`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs_Field3) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs_Field3{`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs_Field34) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs_Field34{`,
		`Field34:` + fmt.Sprintf("%v", this.Field34) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs_Field35) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs_Field35{`,
		`Field35:` + fmt.Sprintf("%v", this.Field35) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwoOneofs_SubMessage2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwoOneofs_SubMessage2{`,
		`SubMessage2:` + strings.Replace(fmt.Sprintf("%v", this.SubMessage2), "Subby", "Subby", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneof) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneof{`,
		`Custom:` + fmt.Sprintf("%v", this.Custom) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneof_Stringy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneof_Stringy{`,
		`Stringy:` + fmt.Sprintf("%v", this.Stringy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneof_CustomType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneof_CustomType{`,
		`CustomType:` + fmt.Sprintf("%v", this.CustomType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneof_CastType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneof_CastType{`,
		`CastType:` + fmt.Sprintf("%v", this.CastType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomOneof_MyCustomName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomOneof_MyCustomName{`,
		`MyCustomName:` + fmt.Sprintf("%v", this.MyCustomName) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOne(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Subby) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOne
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subby: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subby: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOne
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOne
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Sub = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOne(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOne
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOne
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllTypesOneOf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOne
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllTypesOneOf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllTypesOneOf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TestOneof = &AllTypesOneOf_Field1{float64(math.Float64frombits(v))}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TestOneof = &AllTypesOneOf_Field2{float32(math.Float32frombits(v))}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestOneof = &AllTypesOneOf_Field3{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field4", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestOneof = &AllTypesOneOf_Field4{v}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field5", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestOneof = &AllTypesOneOf_Field5{v}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field6", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestOneof = &AllTypesOneOf_Field6{v}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field7", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TestOneof = &AllTypesOneOf_Field7{v}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field8", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.TestOneof = &AllTypesOneOf_Field8{int64(v)}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field9", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TestOneof = &AllTypesOneOf_Field9{v}
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field10", wireType)
			}
			var v int32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TestOneof = &AllTypesOneOf_Field10{v}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field11", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TestOneof = &AllTypesOneOf_Field11{v}
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field12", wireType)
			}
			var v int64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TestOneof = &AllTypesOneOf_Field12{v}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field13", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TestOneof = &AllTypesOneOf_Field13{b}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field14", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOne
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOne
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestOneof = &AllTypesOneOf_Field14{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field15", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOne
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOne
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.TestOneof = &AllTypesOneOf_Field15{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOne
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOne
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Subby{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TestOneof = &AllTypesOneOf_SubMessage{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOne(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOne
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOne
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwoOneofs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOne
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwoOneofs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwoOneofs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.One = &TwoOneofs_Field1{float64(math.Float64frombits(v))}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.One = &TwoOneofs_Field2{float32(math.Float32frombits(v))}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.One = &TwoOneofs_Field3{v}
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field34", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOne
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOne
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Two = &TwoOneofs_Field34{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field35", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOne
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOne
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Two = &TwoOneofs_Field35{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubMessage2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOne
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOne
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Subby{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Two = &TwoOneofs_SubMessage2{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOne(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOne
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOne
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomOneof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOne
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomOneof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomOneof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stringy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOne
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOne
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Custom = &CustomOneof_Stringy{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomType", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOne
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOne
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var vv github_com_gogo_protobuf_test_custom.Uint128
			v := &vv
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Custom = &CustomOneof_CustomType{*v}
			iNdEx = postIndex
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastType", wireType)
			}
			var v github_com_gogo_protobuf_test_casttype.MyUint64Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= github_com_gogo_protobuf_test_casttype.MyUint64Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Custom = &CustomOneof_CastType{v}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCustomName", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOne
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Custom = &CustomOneof_MyCustomName{v}
		default:
			iNdEx = preIndex
			skippy, err := skipOne(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOne
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOne
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOne(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOne
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOne
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOne
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOne
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOne
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOne
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOne        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOne          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOne = fmt.Errorf("proto: unexpected end of group")
)
