// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: group.proto

package group

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io_ioutil "io/ioutil"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Groups1 struct {
	G                    []*Groups1_G `protobuf:"group,1,rep,name=G,json=g" json:"g,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Groups1) Reset()      { *m = Groups1{} }
func (*Groups1) ProtoMessage() {}
func (*Groups1) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{0}
}
func (m *Groups1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Groups1.Unmarshal(m, b)
}
func (m *Groups1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Groups1.Marshal(b, m, deterministic)
}
func (m *Groups1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Groups1.Merge(m, src)
}
func (m *Groups1) XXX_Size() int {
	return xxx_messageInfo_Groups1.Size(m)
}
func (m *Groups1) XXX_DiscardUnknown() {
	xxx_messageInfo_Groups1.DiscardUnknown(m)
}

var xxx_messageInfo_Groups1 proto.InternalMessageInfo

type Groups1_G struct {
	Field1               *int64   `protobuf:"varint,1,opt,name=Field1" json:"Field1,omitempty"`
	Field2               *float64 `protobuf:"fixed64,2,opt,name=Field2" json:"Field2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Groups1_G) Reset()      { *m = Groups1_G{} }
func (*Groups1_G) ProtoMessage() {}
func (*Groups1_G) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{0, 0}
}
func (m *Groups1_G) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Groups1_G.Unmarshal(m, b)
}
func (m *Groups1_G) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Groups1_G.Marshal(b, m, deterministic)
}
func (m *Groups1_G) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Groups1_G.Merge(m, src)
}
func (m *Groups1_G) XXX_Size() int {
	return xxx_messageInfo_Groups1_G.Size(m)
}
func (m *Groups1_G) XXX_DiscardUnknown() {
	xxx_messageInfo_Groups1_G.DiscardUnknown(m)
}

var xxx_messageInfo_Groups1_G proto.InternalMessageInfo

type Groups2 struct {
	G                    *Groups2_G `protobuf:"group,1,opt,name=G,json=g" json:"g,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Groups2) Reset()      { *m = Groups2{} }
func (*Groups2) ProtoMessage() {}
func (*Groups2) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{1}
}
func (m *Groups2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Groups2.Unmarshal(m, b)
}
func (m *Groups2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Groups2.Marshal(b, m, deterministic)
}
func (m *Groups2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Groups2.Merge(m, src)
}
func (m *Groups2) XXX_Size() int {
	return xxx_messageInfo_Groups2.Size(m)
}
func (m *Groups2) XXX_DiscardUnknown() {
	xxx_messageInfo_Groups2.DiscardUnknown(m)
}

var xxx_messageInfo_Groups2 proto.InternalMessageInfo

type Groups2_G struct {
	Field1               *int64    `protobuf:"varint,1,opt,name=Field1" json:"Field1,omitempty"`
	Field2               []float64 `protobuf:"fixed64,2,rep,name=Field2" json:"Field2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Groups2_G) Reset()      { *m = Groups2_G{} }
func (*Groups2_G) ProtoMessage() {}
func (*Groups2_G) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{1, 0}
}
func (m *Groups2_G) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Groups2_G.Unmarshal(m, b)
}
func (m *Groups2_G) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Groups2_G.Marshal(b, m, deterministic)
}
func (m *Groups2_G) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Groups2_G.Merge(m, src)
}
func (m *Groups2_G) XXX_Size() int {
	return xxx_messageInfo_Groups2_G.Size(m)
}
func (m *Groups2_G) XXX_DiscardUnknown() {
	xxx_messageInfo_Groups2_G.DiscardUnknown(m)
}

var xxx_messageInfo_Groups2_G proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Groups1)(nil), "group.Groups1")
	proto.RegisterType((*Groups1_G)(nil), "group.Groups1.G")
	proto.RegisterType((*Groups2)(nil), "group.Groups2")
	proto.RegisterType((*Groups2_G)(nil), "group.Groups2.G")
}

func init() { proto.RegisterFile("group.proto", fileDescriptor_e10f4c9b19ad8eee) }

var fileDescriptor_e10f4c9b19ad8eee = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2f, 0xca, 0x2f,
	0x2d, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0xa4, 0x74, 0xd3, 0x33, 0x4b,
	0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3, 0xf5, 0xc1, 0xb2, 0x49,
	0xa5, 0x69, 0x60, 0x1e, 0x98, 0x03, 0x66, 0x41, 0x74, 0x29, 0xc5, 0x71, 0xb1, 0xbb, 0x83, 0xf4,
	0x15, 0x1b, 0x0a, 0xc9, 0x71, 0x31, 0xa6, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x19, 0x09, 0xe8,
	0x41, 0x4c, 0x86, 0x4a, 0xe9, 0xb9, 0x07, 0x31, 0xa6, 0x4b, 0x19, 0x73, 0x31, 0xba, 0x0b, 0x89,
	0x71, 0xb1, 0xb9, 0x65, 0xa6, 0xe6, 0xa4, 0x18, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x41,
	0x79, 0x70, 0x71, 0x23, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x46, 0xa8, 0xb8, 0x11, 0xc2, 0x7c, 0x23,
	0x98, 0xf9, 0x8c, 0x18, 0xe6, 0x1b, 0x91, 0x68, 0x3e, 0x33, 0xc2, 0x7c, 0x27, 0x93, 0x13, 0x0f,
	0xe5, 0x18, 0x2e, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50, 0x8e, 0xe1, 0xc1, 0x43, 0x39, 0xc6, 0x0f,
	0x0f, 0xe5, 0x18, 0x7f, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3,
	0x86, 0x47, 0x72, 0x8c, 0x3b, 0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24, 0xc7, 0x70, 0xe1, 0x91, 0x1c,
	0xc3, 0x83, 0x47, 0x72, 0x0c, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xd8, 0xef, 0x2c, 0x39,
	0x01, 0x00, 0x00,
}

func (this *Groups1) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return GroupDescription()
}
func (this *Groups1_G) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return GroupDescription()
}
func (this *Groups2) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return GroupDescription()
}
func (this *Groups2_G) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return GroupDescription()
}
func GroupDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3951 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x7a, 0x5b, 0x70, 0xe3, 0xe6,
		0x75, 0xbf, 0xc0, 0x8b, 0x44, 0x1e, 0x52, 0x14, 0x04, 0xc9, 0x5a, 0xae, 0x1c, 0x6b, 0x77, 0x65,
		0x3b, 0x96, 0xed, 0x58, 0x9b, 0xc8, 0xbb, 0x6b, 0x1b, 0xfb, 0x4f, 0xfc, 0xa7, 0x28, 0xae, 0x22,
		0x57, 0x12, 0x19, 0x50, 0x8a, 0x2f, 0x99, 0x16, 0x03, 0x81, 0x1f, 0x29, 0xec, 0x82, 0x00, 0x02,
		0x80, 0xbb, 0xd6, 0x4e, 0x1f, 0xb6, 0xe3, 0x5e, 0x26, 0xd3, 0xfb, 0x65, 0xa6, 0x89, 0xeb, 0xb8,
		0x4d, 0x3a, 0xad, 0xd3, 0xf4, 0x96, 0xf4, 0x92, 0xc6, 0xe9, 0x4b, 0x5f, 0xd2, 0xfa, 0xa9, 0x93,
		0xbc, 0xf5, 0xa1, 0x0f, 0xde, 0xad, 0x67, 0x7a, 0x89, 0xdb, 0xa6, 0xed, 0x76, 0x26, 0x33, 0x7e,
		0xe9, 0x7c, 0x37, 0x10, 0x00, 0xa9, 0x05, 0x94, 0x19, 0x3b, 0x4f, 0x22, 0xce, 0x77, 0x7e, 0x3f,
		0x9c, 0xef, 0x7c, 0xe7, 0x3b, 0xe7, 0x7c, 0x1f, 0x04, 0x6f, 0xc9, 0x70, 0xb6, 0x67, 0xdb, 0x3d,
		0x13, 0x9d, 0x77, 0x5c, 0xdb, 0xb7, 0x0f, 0x06, 0xdd, 0xf3, 0x1d, 0xe4, 0xe9, 0xae, 0xe1, 0xf8,
		0xb6, 0xbb, 0x4a, 0x64, 0xd2, 0x0c, 0xd5, 0x58, 0xe5, 0x1a, 0xcb, 0x3b, 0x30, 0x7b, 0xc5, 0x30,
		0xd1, 0x46, 0xa0, 0xd8, 0x46, 0xbe, 0xf4, 0x34, 0xe4, 0xba, 0x86, 0x89, 0xaa, 0xc2, 0xd9, 0xec,
		0x4a, 0x69, 0xed, 0xa1, 0xd5, 0x18, 0x68, 0x35, 0x8a, 0x68, 0x61, 0xb1, 0x42, 0x10, 0xcb, 0xef,
		0xe4, 0x60, 0x6e, 0xcc, 0xa8, 0x24, 0x41, 0xce, 0xd2, 0xfa, 0x98, 0x51, 0x58, 0x29, 0x2a, 0xe4,
		0xb7, 0x54, 0x85, 0x29, 0x47, 0xd3, 0xaf, 0x69, 0x3d, 0x54, 0xcd, 0x10, 0x31, 0x7f, 0x94, 0x96,
		0x00, 0x3a, 0xc8, 0x41, 0x56, 0x07, 0x59, 0xfa, 0x51, 0x35, 0x7b, 0x36, 0xbb, 0x52, 0x54, 0x42,
		0x12, 0xe9, 0x71, 0x98, 0x75, 0x06, 0x07, 0xa6, 0xa1, 0xab, 0x21, 0x35, 0x38, 0x9b, 0x5d, 0xc9,
		0x2b, 0x22, 0x1d, 0xd8, 0x18, 0x2a, 0x3f, 0x02, 0x33, 0x37, 0x90, 0x76, 0x2d, 0xac, 0x5a, 0x22,
		0xaa, 0x15, 0x2c, 0x0e, 0x29, 0xd6, 0xa1, 0xdc, 0x47, 0x9e, 0xa7, 0xf5, 0x90, 0xea, 0x1f, 0x39,
		0xa8, 0x9a, 0x23, 0xb3, 0x3f, 0x3b, 0x32, 0xfb, 0xf8, 0xcc, 0x4b, 0x0c, 0xb5, 0x77, 0xe4, 0x20,
		0xa9, 0x06, 0x45, 0x64, 0x0d, 0xfa, 0x94, 0x21, 0x7f, 0x8c, 0xff, 0x1a, 0xd6, 0xa0, 0x1f, 0x67,
		0x29, 0x60, 0x18, 0xa3, 0x98, 0xf2, 0x90, 0x7b, 0xdd, 0xd0, 0x51, 0x75, 0x92, 0x10, 0x3c, 0x32,
		0x42, 0xd0, 0xa6, 0xe3, 0x71, 0x0e, 0x8e, 0x93, 0xea, 0x50, 0x44, 0x2f, 0xfb, 0xc8, 0xf2, 0x0c,
		0xdb, 0xaa, 0x4e, 0x11, 0x92, 0x87, 0xc7, 0xac, 0x22, 0x32, 0x3b, 0x71, 0x8a, 0x21, 0x4e, 0xba,
		0x04, 0x53, 0xb6, 0xe3, 0x1b, 0xb6, 0xe5, 0x55, 0x0b, 0x67, 0x85, 0x95, 0xd2, 0xda, 0x87, 0xc6,
		0x06, 0x42, 0x93, 0xea, 0x28, 0x5c, 0x59, 0xda, 0x02, 0xd1, 0xb3, 0x07, 0xae, 0x8e, 0x54, 0xdd,
		0xee, 0x20, 0xd5, 0xb0, 0xba, 0x76, 0xb5, 0x48, 0x08, 0xce, 0x8c, 0x4e, 0x84, 0x28, 0xd6, 0xed,
		0x0e, 0xda, 0xb2, 0xba, 0xb6, 0x52, 0xf1, 0x22, 0xcf, 0xd2, 0x02, 0x4c, 0x7a, 0x47, 0x96, 0xaf,
		0xbd, 0x5c, 0x2d, 0x93, 0x08, 0x61, 0x4f, 0xcb, 0x6f, 0x4e, 0xc2, 0x4c, 0x9a, 0x10, 0xbb, 0x0c,
		0xf9, 0x2e, 0x9e, 0x65, 0x35, 0x73, 0x12, 0x1f, 0x50, 0x4c, 0xd4, 0x89, 0x93, 0x3f, 0xa4, 0x13,
		0x6b, 0x50, 0xb2, 0x90, 0xe7, 0xa3, 0x0e, 0x8d, 0x88, 0x6c, 0xca, 0x98, 0x02, 0x0a, 0x1a, 0x0d,
		0xa9, 0xdc, 0x0f, 0x15, 0x52, 0x2f, 0xc0, 0x4c, 0x60, 0x92, 0xea, 0x6a, 0x56, 0x8f, 0xc7, 0xe6,
		0xf9, 0x24, 0x4b, 0x56, 0x1b, 0x1c, 0xa7, 0x60, 0x98, 0x52, 0x41, 0x91, 0x67, 0x69, 0x03, 0xc0,
		0xb6, 0x90, 0xdd, 0x55, 0x3b, 0x48, 0x37, 0xab, 0x85, 0x63, 0xbc, 0xd4, 0xc4, 0x2a, 0x23, 0x5e,
		0xb2, 0xa9, 0x54, 0x37, 0xa5, 0x67, 0x86, 0xa1, 0x36, 0x75, 0x4c, 0xa4, 0xec, 0xd0, 0x4d, 0x36,
		0x12, 0x6d, 0xfb, 0x50, 0x71, 0x11, 0x8e, 0x7b, 0xd4, 0x61, 0x33, 0x2b, 0x12, 0x23, 0x56, 0x13,
		0x67, 0xa6, 0x30, 0x18, 0x9d, 0xd8, 0xb4, 0x1b, 0x7e, 0x94, 0x1e, 0x84, 0x40, 0xa0, 0x92, 0xb0,
		0x02, 0x92, 0x85, 0xca, 0x5c, 0xb8, 0xab, 0xf5, 0xd1, 0xe2, 0x4d, 0xa8, 0x44, 0xdd, 0x23, 0xcd,
		0x43, 0xde, 0xf3, 0x35, 0xd7, 0x27, 0x51, 0x98, 0x57, 0xe8, 0x83, 0x24, 0x42, 0x16, 0x59, 0x1d,
		0x92, 0xe5, 0xf2, 0x0a, 0xfe, 0x29, 0xfd, 0xff, 0xe1, 0x84, 0xb3, 0x64, 0xc2, 0x1f, 0x1e, 0x5d,
		0xd1, 0x08, 0x73, 0x7c, 0xde, 0x8b, 0x4f, 0xc1, 0x74, 0x64, 0x02, 0x69, 0x5f, 0xbd, 0xfc, 0x93,
		0x70, 0xdf, 0x58, 0x6a, 0xe9, 0x05, 0x98, 0x1f, 0x58, 0x86, 0xe5, 0x23, 0xd7, 0x71, 0x11, 0x8e,
		0x58, 0xfa, 0xaa, 0xea, 0x3f, 0x4f, 0x1d, 0x13, 0x73, 0xfb, 0x61, 0x6d, 0xca, 0xa2, 0xcc, 0x0d,
		0x46, 0x85, 0x8f, 0x15, 0x0b, 0xff, 0x32, 0x25, 0xde, 0xba, 0x75, 0xeb, 0x56, 0x66, 0xf9, 0xf3,
		0x93, 0x30, 0x3f, 0x6e, 0xcf, 0x8c, 0xdd, 0xbe, 0x0b, 0x30, 0x69, 0x0d, 0xfa, 0x07, 0xc8, 0x25,
		0x4e, 0xca, 0x2b, 0xec, 0x49, 0xaa, 0x41, 0xde, 0xd4, 0x0e, 0x90, 0x59, 0xcd, 0x9d, 0x15, 0x56,
		0x2a, 0x6b, 0x8f, 0xa7, 0xda, 0x95, 0xab, 0xdb, 0x18, 0xa2, 0x50, 0xa4, 0xf4, 0x09, 0xc8, 0xb1,
		0x14, 0x8d, 0x19, 0x1e, 0x4b, 0xc7, 0x80, 0xf7, 0x92, 0x42, 0x70, 0xd2, 0xfd, 0x50, 0xc4, 0x7f,
		0x69, 0x6c, 0x4c, 0x12, 0x9b, 0x0b, 0x58, 0x80, 0xe3, 0x42, 0x5a, 0x84, 0x02, 0xd9, 0x26, 0x1d,
		0xc4, 0x4b, 0x5b, 0xf0, 0x8c, 0x03, 0xab, 0x83, 0xba, 0xda, 0xc0, 0xf4, 0xd5, 0xeb, 0x9a, 0x39,
		0x40, 0x24, 0xe0, 0x8b, 0x4a, 0x99, 0x09, 0x3f, 0x8d, 0x65, 0xd2, 0x19, 0x28, 0xd1, 0x5d, 0x65,
		0x58, 0x1d, 0xf4, 0x32, 0xc9, 0x9e, 0x79, 0x85, 0x6e, 0xb4, 0x2d, 0x2c, 0xc1, 0xaf, 0xbf, 0xea,
		0xd9, 0x16, 0x0f, 0x4d, 0xf2, 0x0a, 0x2c, 0x20, 0xaf, 0x7f, 0x2a, 0x9e, 0xb8, 0x1f, 0x18, 0x3f,
		0xbd, 0x78, 0x4c, 0x2d, 0x7f, 0x23, 0x03, 0x39, 0x92, 0x2f, 0x66, 0xa0, 0xb4, 0xf7, 0x62, 0xab,
		0xa1, 0x6e, 0x34, 0xf7, 0xd7, 0xb7, 0x1b, 0xa2, 0x20, 0x55, 0x00, 0x88, 0xe0, 0xca, 0x76, 0xb3,
		0xb6, 0x27, 0x66, 0x82, 0xe7, 0xad, 0xdd, 0xbd, 0x4b, 0x17, 0xc4, 0x6c, 0x00, 0xd8, 0xa7, 0x82,
		0x5c, 0x58, 0xe1, 0xc9, 0x35, 0x31, 0x2f, 0x89, 0x50, 0xa6, 0x04, 0x5b, 0x2f, 0x34, 0x36, 0x2e,
		0x5d, 0x10, 0x27, 0xa3, 0x92, 0x27, 0xd7, 0xc4, 0x29, 0x69, 0x1a, 0x8a, 0x44, 0xb2, 0xde, 0x6c,
		0x6e, 0x8b, 0x85, 0x80, 0xb3, 0xbd, 0xa7, 0x6c, 0xed, 0x6e, 0x8a, 0xc5, 0x80, 0x73, 0x53, 0x69,
		0xee, 0xb7, 0x44, 0x08, 0x18, 0x76, 0x1a, 0xed, 0x76, 0x6d, 0xb3, 0x21, 0x96, 0x02, 0x8d, 0xf5,
		0x17, 0xf7, 0x1a, 0x6d, 0xb1, 0x1c, 0x31, 0xeb, 0xc9, 0x35, 0x71, 0x3a, 0x78, 0x45, 0x63, 0x77,
		0x7f, 0x47, 0xac, 0x48, 0xb3, 0x30, 0x4d, 0x5f, 0xc1, 0x8d, 0x98, 0x89, 0x89, 0x2e, 0x5d, 0x10,
		0xc5, 0xa1, 0x21, 0x94, 0x65, 0x36, 0x22, 0xb8, 0x74, 0x41, 0x94, 0x96, 0xeb, 0x90, 0x27, 0xd1,
		0x25, 0x49, 0x50, 0xd9, 0xae, 0xad, 0x37, 0xb6, 0xd5, 0x66, 0x6b, 0x6f, 0xab, 0xb9, 0x5b, 0xdb,
		0x16, 0x85, 0xa1, 0x4c, 0x69, 0x7c, 0x6a, 0x7f, 0x4b, 0x69, 0x6c, 0x88, 0x99, 0xb0, 0xac, 0xd5,
		0xa8, 0xed, 0x35, 0x36, 0xc4, 0xec, 0xb2, 0x0e, 0xf3, 0xe3, 0xf2, 0xe4, 0xd8, 0x9d, 0x11, 0x5a,
		0xe2, 0xcc, 0x31, 0x4b, 0x4c, 0xb8, 0x46, 0x96, 0xf8, 0x9f, 0x32, 0x30, 0x37, 0xa6, 0x56, 0x8c,
		0x7d, 0xc9, 0xb3, 0x90, 0xa7, 0x21, 0x4a, 0xab, 0xe7, 0xa3, 0x63, 0x8b, 0x0e, 0x09, 0xd8, 0x91,
		0x0a, 0x4a, 0x70, 0xe1, 0x0e, 0x22, 0x7b, 0x4c, 0x07, 0x81, 0x29, 0x46, 0x72, 0xfa, 0x8f, 0x8f,
		0xe4, 0x74, 0x5a, 0xf6, 0x2e, 0xa5, 0x29, 0x7b, 0x44, 0x76, 0xb2, 0xdc, 0x9e, 0x1f, 0x93, 0xdb,
		0x2f, 0xc3, 0xec, 0x08, 0x51, 0xea, 0x1c, 0xfb, 0x8a, 0x00, 0xd5, 0xe3, 0x9c, 0x93, 0x90, 0xe9,
		0x32, 0x91, 0x4c, 0x77, 0x39, 0xee, 0xc1, 0x73, 0xc7, 0x2f, 0xc2, 0xc8, 0x5a, 0xbf, 0x21, 0xc0,
		0xc2, 0xf8, 0x4e, 0x71, 0xac, 0x0d, 0x9f, 0x80, 0xc9, 0x3e, 0xf2, 0x0f, 0x6d, 0xde, 0x2d, 0x7d,
		0x78, 0x4c, 0x0d, 0xc6, 0xc3, 0xf1, 0xc5, 0x66, 0xa8, 0x70, 0x11, 0xcf, 0x1e, 0xd7, 0xee, 0x51,
		0x6b, 0x46, 0x2c, 0xfd, 0x5c, 0x06, 0xee, 0x1b, 0x4b, 0x3e, 0xd6, 0xd0, 0x07, 0x00, 0x0c, 0xcb,
		0x19, 0xf8, 0xb4, 0x23, 0xa2, 0x09, 0xb6, 0x48, 0x24, 0x24, 0x79, 0xe1, 0xe4, 0x39, 0xf0, 0x83,
		0xf1, 0x2c, 0x19, 0x07, 0x2a, 0x22, 0x0a, 0x4f, 0x0f, 0x0d, 0xcd, 0x11, 0x43, 0x97, 0x8e, 0x99,
		0xe9, 0x48, 0x60, 0x7e, 0x14, 0x44, 0xdd, 0x34, 0x90, 0xe5, 0xab, 0x9e, 0xef, 0x22, 0xad, 0x6f,
		0x58, 0x3d, 0x52, 0x41, 0x0a, 0x72, 0xbe, 0xab, 0x99, 0x1e, 0x52, 0x66, 0xe8, 0x70, 0x9b, 0x8f,
		0x62, 0x04, 0x09, 0x20, 0x37, 0x84, 0x98, 0x8c, 0x20, 0xe8, 0x70, 0x80, 0x58, 0xfe, 0x85, 0x22,
		0x94, 0x42, 0x7d, 0xb5, 0x74, 0x0e, 0xca, 0x57, 0xb5, 0xeb, 0x9a, 0xca, 0xcf, 0x4a, 0xd4, 0x13,
		0x25, 0x2c, 0x6b, 0xb1, 0xf3, 0xd2, 0x47, 0x61, 0x9e, 0xa8, 0xd8, 0x03, 0x1f, 0xb9, 0xaa, 0x6e,
		0x6a, 0x9e, 0x47, 0x9c, 0x56, 0x20, 0xaa, 0x12, 0x1e, 0x6b, 0xe2, 0xa1, 0x3a, 0x1f, 0x91, 0x2e,
		0xc2, 0x1c, 0x41, 0xf4, 0x07, 0xa6, 0x6f, 0x38, 0x26, 0x52, 0xf1, 0xe9, 0xcd, 0x23, 0x95, 0x24,
		0xb0, 0x6c, 0x16, 0x6b, 0xec, 0x30, 0x05, 0x6c, 0x91, 0x27, 0x6d, 0xc0, 0x03, 0x04, 0xd6, 0x43,
		0x16, 0x72, 0x35, 0x1f, 0xa9, 0xe8, 0xb3, 0x03, 0xcd, 0xf4, 0x54, 0xcd, 0xea, 0xa8, 0x87, 0x9a,
		0x77, 0x58, 0x9d, 0xc7, 0x04, 0xeb, 0x99, 0xaa, 0xa0, 0x9c, 0xc6, 0x8a, 0x9b, 0x4c, 0xaf, 0x41,
		0xd4, 0x6a, 0x56, 0xe7, 0x93, 0x9a, 0x77, 0x28, 0xc9, 0xb0, 0x40, 0x58, 0x3c, 0xdf, 0x35, 0xac,
		0x9e, 0xaa, 0x1f, 0x22, 0xfd, 0x9a, 0x3a, 0xf0, 0xbb, 0x4f, 0x57, 0xef, 0x0f, 0xbf, 0x9f, 0x58,
		0xd8, 0x26, 0x3a, 0x75, 0xac, 0xb2, 0xef, 0x77, 0x9f, 0x96, 0xda, 0x50, 0xc6, 0x8b, 0xd1, 0x37,
		0x6e, 0x22, 0xb5, 0x6b, 0xbb, 0xa4, 0x34, 0x56, 0xc6, 0xa4, 0xa6, 0x90, 0x07, 0x57, 0x9b, 0x0c,
		0xb0, 0x63, 0x77, 0x90, 0x9c, 0x6f, 0xb7, 0x1a, 0x8d, 0x0d, 0xa5, 0xc4, 0x59, 0xae, 0xd8, 0x2e,
		0x0e, 0xa8, 0x9e, 0x1d, 0x38, 0xb8, 0x44, 0x03, 0xaa, 0x67, 0x73, 0xf7, 0x5e, 0x84, 0x39, 0x5d,
		0xa7, 0x73, 0x36, 0x74, 0x95, 0x9d, 0xb1, 0xbc, 0xaa, 0x18, 0x71, 0x96, 0xae, 0x6f, 0x52, 0x05,
		0x16, 0xe3, 0x9e, 0xf4, 0x0c, 0xdc, 0x37, 0x74, 0x56, 0x18, 0x38, 0x3b, 0x32, 0xcb, 0x38, 0xf4,
		0x22, 0xcc, 0x39, 0x47, 0xa3, 0x40, 0x29, 0xf2, 0x46, 0xe7, 0x28, 0x0e, 0x7b, 0x0a, 0xe6, 0x9d,
		0x43, 0x67, 0x14, 0xf7, 0x58, 0x18, 0x27, 0x39, 0x87, 0x4e, 0x1c, 0xf8, 0x30, 0x39, 0x70, 0xbb,
		0x48, 0xd7, 0x7c, 0xd4, 0xa9, 0x9e, 0x0a, 0xab, 0x87, 0x06, 0xa4, 0xf3, 0x20, 0xea, 0xba, 0x8a,
		0x2c, 0xed, 0xc0, 0x44, 0xaa, 0xe6, 0x22, 0x4b, 0xf3, 0xaa, 0x67, 0xc2, 0xca, 0x15, 0x5d, 0x6f,
		0x90, 0xd1, 0x1a, 0x19, 0x94, 0x1e, 0x83, 0x59, 0xfb, 0xe0, 0xaa, 0x4e, 0x43, 0x52, 0x75, 0x5c,
		0xd4, 0x35, 0x5e, 0xae, 0x3e, 0x44, 0xfc, 0x3b, 0x83, 0x07, 0x48, 0x40, 0xb6, 0x88, 0x58, 0x7a,
		0x14, 0x44, 0xdd, 0x3b, 0xd4, 0x5c, 0x87, 0xe4, 0x64, 0xcf, 0xd1, 0x74, 0x54, 0x7d, 0x98, 0xaa,
		0x52, 0xf9, 0x2e, 0x17, 0xe3, 0x2d, 0xe1, 0xdd, 0x30, 0xba, 0x3e, 0x67, 0x7c, 0x84, 0x6e, 0x09,
		0x22, 0x63, 0x6c, 0x2b, 0x20, 0x62, 0x57, 0x44, 0x5e, 0xbc, 0x42, 0xd4, 0x2a, 0xce, 0xa1, 0x13,
		0x7e, 0xef, 0x83, 0x30, 0x8d, 0x35, 0x87, 0x2f, 0x7d, 0x94, 0x36, 0x64, 0xce, 0x61, 0xe8, 0x8d,
		0x17, 0x60, 0x01, 0x2b, 0xf5, 0x91, 0xaf, 0x75, 0x34, 0x5f, 0x0b, 0x69, 0x7f, 0x84, 0x68, 0x63,
		0xbf, 0xef, 0xb0, 0xc1, 0x88, 0x9d, 0xee, 0xe0, 0xe0, 0x28, 0x88, 0xac, 0x27, 0xa8, 0x9d, 0x58,
		0xc6, 0x63, 0xeb, 0x7d, 0x6b, 0xba, 0x97, 0x65, 0x28, 0x87, 0x03, 0x5f, 0x2a, 0x02, 0x0d, 0x7d,
		0x51, 0xc0, 0x5d, 0x50, 0xbd, 0xb9, 0x81, 0xfb, 0x97, 0x97, 0x1a, 0x62, 0x06, 0xf7, 0x51, 0xdb,
		0x5b, 0x7b, 0x0d, 0x55, 0xd9, 0xdf, 0xdd, 0xdb, 0xda, 0x69, 0x88, 0xd9, 0x70, 0xc3, 0xfe, 0xed,
		0x0c, 0x54, 0xa2, 0x67, 0x2f, 0xe9, 0xff, 0xc1, 0x29, 0x7e, 0x51, 0xe2, 0x21, 0x5f, 0xbd, 0x61,
		0xb8, 0x64, 0x2f, 0xf6, 0x35, 0x5a, 0x17, 0x83, 0x68, 0x98, 0x67, 0x5a, 0x6d, 0xe4, 0x3f, 0x6f,
		0xb8, 0x78, 0xa7, 0xf5, 0x35, 0x5f, 0xda, 0x86, 0x33, 0x96, 0xad, 0x7a, 0xbe, 0x66, 0x75, 0x34,
		0xb7, 0xa3, 0x0e, 0xaf, 0xa8, 0x54, 0x4d, 0xd7, 0x91, 0xe7, 0xd9, 0xb4, 0x06, 0x06, 0x2c, 0x1f,
		0xb2, 0xec, 0x36, 0x53, 0x1e, 0x16, 0x87, 0x1a, 0x53, 0x8d, 0x45, 0x6e, 0xf6, 0xb8, 0xc8, 0xbd,
		0x1f, 0x8a, 0x7d, 0xcd, 0x51, 0x91, 0xe5, 0xbb, 0x47, 0xa4, 0xe3, 0x2e, 0x28, 0x85, 0xbe, 0xe6,
		0x34, 0xf0, 0xf3, 0x07, 0x73, 0xf0, 0xf9, 0xc7, 0x2c, 0x94, 0xc3, 0x5d, 0x37, 0x3e, 0xc4, 0xe8,
		0xa4, 0x40, 0x09, 0x24, 0x85, 0x3d, 0x78, 0xcf, 0x1e, 0x7d, 0xb5, 0x8e, 0x2b, 0x97, 0x3c, 0x49,
		0x7b, 0x61, 0x85, 0x22, 0x71, 0xd7, 0x80, 0x43, 0x0b, 0xd1, 0xde, 0xa3, 0xa0, 0xb0, 0x27, 0x69,
		0x13, 0x26, 0xaf, 0x7a, 0x84, 0x7b, 0x92, 0x70, 0x3f, 0x74, 0x6f, 0xee, 0xe7, 0xda, 0x84, 0xbc,
		0xf8, 0x5c, 0x5b, 0xdd, 0x6d, 0x2a, 0x3b, 0xb5, 0x6d, 0x85, 0xc1, 0xa5, 0xd3, 0x90, 0x33, 0xb5,
		0x9b, 0x47, 0xd1, 0x1a, 0x47, 0x44, 0x69, 0x1d, 0x7f, 0x1a, 0x72, 0x37, 0x90, 0x76, 0x2d, 0x5a,
		0x59, 0x88, 0xe8, 0x7d, 0x0c, 0xfd, 0xf3, 0x90, 0x27, 0xfe, 0x92, 0x00, 0x98, 0xc7, 0xc4, 0x09,
		0xa9, 0x00, 0xb9, 0x7a, 0x53, 0xc1, 0xe1, 0x2f, 0x42, 0x99, 0x4a, 0xd5, 0xd6, 0x56, 0xa3, 0xde,
		0x10, 0x33, 0xcb, 0x17, 0x61, 0x92, 0x3a, 0x01, 0x6f, 0x8d, 0xc0, 0x0d, 0xe2, 0x04, 0x7b, 0x64,
		0x1c, 0x02, 0x1f, 0xdd, 0xdf, 0x59, 0x6f, 0x28, 0x62, 0x26, 0xbc, 0xbc, 0x1e, 0x94, 0xc3, 0x0d,
		0xf7, 0x07, 0x13, 0x53, 0xdf, 0x12, 0xa0, 0x14, 0x6a, 0xa0, 0x71, 0xe7, 0xa3, 0x99, 0xa6, 0x7d,
		0x43, 0xd5, 0x4c, 0x43, 0xf3, 0x58, 0x50, 0x00, 0x11, 0xd5, 0xb0, 0x24, 0xed, 0xa2, 0x7d, 0x20,
		0xc6, 0xbf, 0x2e, 0x80, 0x18, 0xef, 0x5d, 0x63, 0x06, 0x0a, 0x3f, 0x52, 0x03, 0x5f, 0x13, 0xa0,
		0x12, 0x6d, 0x58, 0x63, 0xe6, 0x9d, 0xfb, 0x91, 0x9a, 0xf7, 0x76, 0x06, 0xa6, 0x23, 0x6d, 0x6a,
		0x5a, 0xeb, 0x3e, 0x0b, 0xb3, 0x46, 0x07, 0xf5, 0x1d, 0xdb, 0x47, 0x96, 0x7e, 0xa4, 0x9a, 0xe8,
		0x3a, 0x32, 0xab, 0xcb, 0x24, 0x51, 0x9c, 0xbf, 0x77, 0x23, 0xbc, 0xba, 0x35, 0xc4, 0x6d, 0x63,
		0x98, 0x3c, 0xb7, 0xb5, 0xd1, 0xd8, 0x69, 0x35, 0xf7, 0x1a, 0xbb, 0xf5, 0x17, 0xd5, 0xfd, 0xdd,
		0x1f, 0xdb, 0x6d, 0x3e, 0xbf, 0xab, 0x88, 0x46, 0x4c, 0xed, 0x7d, 0xdc, 0xea, 0x2d, 0x10, 0xe3,
		0x46, 0x49, 0xa7, 0x60, 0x9c, 0x59, 0xe2, 0x84, 0x34, 0x07, 0x33, 0xbb, 0x4d, 0xb5, 0xbd, 0xb5,
		0xd1, 0x50, 0x1b, 0x57, 0xae, 0x34, 0xea, 0x7b, 0x6d, 0x7a, 0xb5, 0x11, 0x68, 0xef, 0x45, 0x37,
		0xf5, 0xab, 0x59, 0x98, 0x1b, 0x63, 0x89, 0x54, 0x63, 0x87, 0x12, 0x7a, 0x4e, 0x7a, 0x22, 0x8d,
		0xf5, 0xab, 0xb8, 0x2b, 0x68, 0x69, 0xae, 0xcf, 0xce, 0x30, 0x8f, 0x02, 0xf6, 0x92, 0xe5, 0x1b,
		0x5d, 0x03, 0xb9, 0xec, 0x26, 0x88, 0x9e, 0x54, 0x66, 0x86, 0x72, 0x7a, 0x19, 0xf4, 0x11, 0x90,
		0x1c, 0xdb, 0x33, 0x7c, 0xe3, 0x3a, 0x52, 0x0d, 0x8b, 0x5f, 0x1b, 0xe1, 0x93, 0x4b, 0x4e, 0x11,
		0xf9, 0xc8, 0x96, 0xe5, 0x07, 0xda, 0x16, 0xea, 0x69, 0x31, 0x6d, 0x9c, 0xc0, 0xb3, 0x8a, 0xc8,
		0x47, 0x02, 0xed, 0x73, 0x50, 0xee, 0xd8, 0x03, 0xdc, 0xce, 0x51, 0x3d, 0x5c, 0x2f, 0x04, 0xa5,
		0x44, 0x65, 0x81, 0x0a, 0x6b, 0xd4, 0x87, 0xf7, 0x55, 0x65, 0xa5, 0x44, 0x65, 0x54, 0xe5, 0x11,
		0x98, 0xd1, 0x7a, 0x3d, 0x17, 0x93, 0x73, 0x22, 0x7a, 0xf4, 0xa8, 0x04, 0x62, 0xa2, 0xb8, 0xf8,
		0x1c, 0x14, 0xb8, 0x1f, 0x70, 0x49, 0xc6, 0x9e, 0x50, 0x1d, 0x7a, 0x9e, 0xce, 0xac, 0x14, 0x95,
		0x82, 0xc5, 0x07, 0xcf, 0x41, 0xd9, 0xf0, 0xd4, 0xe1, 0xf5, 0x7b, 0xe6, 0x6c, 0x66, 0xa5, 0xa0,
		0x94, 0x0c, 0x2f, 0xb8, 0xba, 0x5c, 0x7e, 0x23, 0x03, 0x95, 0xe8, 0xe7, 0x03, 0x69, 0x03, 0x0a,
		0xa6, 0xad, 0x6b, 0x24, 0xb4, 0xe8, 0xb7, 0xab, 0x95, 0x84, 0x2f, 0x0e, 0xab, 0xdb, 0x4c, 0x5f,
		0x09, 0x90, 0x8b, 0x7f, 0x2f, 0x40, 0x81, 0x8b, 0xa5, 0x05, 0xc8, 0x39, 0x9a, 0x7f, 0x48, 0xe8,
		0xf2, 0xeb, 0x19, 0x51, 0x50, 0xc8, 0x33, 0x96, 0x7b, 0x8e, 0x66, 0x91, 0x10, 0x60, 0x72, 0xfc,
		0x8c, 0xd7, 0xd5, 0x44, 0x5a, 0x87, 0x9c, 0x6b, 0xec, 0x7e, 0x1f, 0x59, 0xbe, 0xc7, 0xd7, 0x95,
		0xc9, 0xeb, 0x4c, 0x2c, 0x3d, 0x0e, 0xb3, 0xbe, 0xab, 0x19, 0x66, 0x44, 0x37, 0x47, 0x74, 0x45,
		0x3e, 0x10, 0x28, 0xcb, 0x70, 0x9a, 0xf3, 0x76, 0x90, 0xaf, 0xe9, 0x87, 0xa8, 0x33, 0x04, 0x4d,
		0x92, 0xfb, 0x8b, 0x53, 0x4c, 0x61, 0x83, 0x8d, 0x73, 0xec, 0xf2, 0x77, 0x05, 0x98, 0xe5, 0x27,
		0xb1, 0x4e, 0xe0, 0xac, 0x1d, 0x00, 0xcd, 0xb2, 0x6c, 0x3f, 0xec, 0xae, 0xd1, 0x50, 0x1e, 0xc1,
		0xad, 0xd6, 0x02, 0x90, 0x12, 0x22, 0x58, 0xec, 0x03, 0x0c, 0x47, 0x8e, 0x75, 0xdb, 0x19, 0x28,
		0xb1, 0x6f, 0x43, 0xe4, 0x03, 0x23, 0x3d, 0xbb, 0x03, 0x15, 0xe1, 0x23, 0x9b, 0x34, 0x0f, 0xf9,
		0x03, 0xd4, 0x33, 0x2c, 0x76, 0xe3, 0x4b, 0x1f, 0xf8, 0x0d, 0x4b, 0x2e, 0xb8, 0x61, 0x59, 0xff,
		0x0c, 0xcc, 0xe9, 0x76, 0x3f, 0x6e, 0xee, 0xba, 0x18, 0xbb, 0x3f, 0xf0, 0x3e, 0x29, 0xbc, 0x04,
		0xc3, 0x16, 0xf3, 0x07, 0x82, 0xf0, 0xe5, 0x4c, 0x76, 0xb3, 0xb5, 0xfe, 0xd5, 0xcc, 0xe2, 0x26,
		0x85, 0xb6, 0xf8, 0x4c, 0x15, 0xd4, 0x35, 0x91, 0x8e, 0xad, 0x87, 0xef, 0x3d, 0x0e, 0x4f, 0xf4,
		0x0c, 0xff, 0x70, 0x70, 0xb0, 0xaa, 0xdb, 0xfd, 0xf3, 0x3d, 0xbb, 0x67, 0x0f, 0xbf, 0xa9, 0xe2,
		0x27, 0xf2, 0x40, 0x7e, 0xb1, 0xef, 0xaa, 0xc5, 0x40, 0xba, 0x98, 0xf8, 0x11, 0x56, 0xde, 0x85,
		0x39, 0xa6, 0xac, 0x92, 0x0f, 0x3b, 0xf4, 0x78, 0x22, 0xdd, 0xf3, 0x72, 0xac, 0xfa, 0xf5, 0x77,
		0x48, 0xb9, 0x56, 0x66, 0x19, 0x14, 0x8f, 0xd1, 0x13, 0x8c, 0xac, 0xc0, 0x7d, 0x11, 0x3e, 0xba,
		0x35, 0x91, 0x9b, 0xc0, 0xf8, 0x6d, 0xc6, 0x38, 0x17, 0x62, 0x6c, 0x33, 0xa8, 0x5c, 0x87, 0xe9,
		0x93, 0x70, 0xfd, 0x2d, 0xe3, 0x2a, 0xa3, 0x30, 0xc9, 0x26, 0xcc, 0x10, 0x12, 0x7d, 0xe0, 0xf9,
		0x76, 0x9f, 0xe4, 0xbd, 0x7b, 0xd3, 0xfc, 0xdd, 0x3b, 0x74, 0xaf, 0x54, 0x30, 0xac, 0x1e, 0xa0,
		0x64, 0x19, 0xc8, 0xb7, 0xac, 0x0e, 0xd2, 0xcd, 0x04, 0x86, 0xb7, 0x98, 0x21, 0x81, 0xbe, 0xfc,
		0x69, 0x98, 0xc7, 0xbf, 0x49, 0x5a, 0x0a, 0x5b, 0x92, 0x7c, 0x93, 0x56, 0xfd, 0xee, 0x2b, 0x74,
		0x3b, 0xce, 0x05, 0x04, 0x21, 0x9b, 0x42, 0xab, 0xd8, 0x43, 0xbe, 0x8f, 0x5c, 0x4f, 0xd5, 0xcc,
		0x71, 0xe6, 0x85, 0xae, 0x22, 0xaa, 0x5f, 0x78, 0x37, 0xba, 0x8a, 0x9b, 0x14, 0x59, 0x33, 0x4d,
		0x79, 0x1f, 0x4e, 0x8d, 0x89, 0x8a, 0x14, 0x9c, 0xaf, 0x32, 0xce, 0xf9, 0x91, 0xc8, 0xc0, 0xb4,
		0x2d, 0xe0, 0xf2, 0x60, 0x2d, 0x53, 0x70, 0xfe, 0x16, 0xe3, 0x94, 0x18, 0x96, 0x2f, 0x29, 0x66,
		0x7c, 0x0e, 0x66, 0xaf, 0x23, 0xf7, 0xc0, 0xf6, 0xd8, 0xf5, 0x4f, 0x0a, 0xba, 0xd7, 0x18, 0xdd,
		0x0c, 0x03, 0x92, 0xfb, 0x20, 0xcc, 0xf5, 0x0c, 0x14, 0xba, 0x9a, 0x8e, 0x52, 0x50, 0x7c, 0x91,
		0x51, 0x4c, 0x61, 0x7d, 0x0c, 0xad, 0x41, 0xb9, 0x67, 0xb3, 0xca, 0x94, 0x0c, 0x7f, 0x9d, 0xc1,
		0x4b, 0x1c, 0xc3, 0x28, 0x1c, 0xdb, 0x19, 0x98, 0xb8, 0x6c, 0x25, 0x53, 0xfc, 0x36, 0xa7, 0xe0,
		0x18, 0x46, 0x71, 0x02, 0xb7, 0xfe, 0x0e, 0xa7, 0xf0, 0x42, 0xfe, 0x7c, 0x16, 0x4a, 0xb6, 0x65,
		0x1e, 0xd9, 0x56, 0x1a, 0x23, 0xbe, 0xc4, 0x18, 0x80, 0x41, 0x30, 0xc1, 0x65, 0x28, 0xa6, 0x5d,
		0x88, 0xdf, 0x7b, 0x97, 0x6f, 0x0f, 0xbe, 0x02, 0x9b, 0x30, 0xc3, 0x13, 0x94, 0x61, 0x5b, 0x29,
		0x28, 0x7e, 0x9f, 0x51, 0x54, 0x42, 0x30, 0x36, 0x0d, 0x1f, 0x79, 0x7e, 0x0f, 0xa5, 0x21, 0x79,
		0x83, 0x4f, 0x83, 0x41, 0x98, 0x2b, 0x0f, 0x90, 0xa5, 0x1f, 0xa6, 0x63, 0xf8, 0x0a, 0x77, 0x25,
		0xc7, 0x60, 0x8a, 0x3a, 0x4c, 0xf7, 0x35, 0xd7, 0x3b, 0xd4, 0xcc, 0x54, 0xcb, 0xf1, 0x07, 0x8c,
		0xa3, 0x1c, 0x80, 0x98, 0x47, 0x06, 0xd6, 0x49, 0x68, 0xbe, 0xca, 0x3d, 0x12, 0x82, 0xb1, 0xad,
		0xe7, 0xf9, 0xe4, 0xae, 0xec, 0x24, 0x6c, 0x7f, 0xc8, 0xb7, 0x1e, 0xc5, 0xee, 0x84, 0x19, 0x2f,
		0x43, 0xd1, 0x33, 0x6e, 0xa6, 0xa2, 0xf9, 0x23, 0xbe, 0xd2, 0x04, 0x80, 0xc1, 0x2f, 0xc2, 0xe9,
		0xb1, 0x65, 0x22, 0x05, 0xd9, 0x1f, 0x33, 0xb2, 0x85, 0x31, 0xa5, 0x82, 0xa5, 0x84, 0x93, 0x52,
		0xfe, 0x09, 0x4f, 0x09, 0x28, 0xc6, 0xd5, 0xc2, 0x67, 0x05, 0x4f, 0xeb, 0x9e, 0xcc, 0x6b, 0x7f,
		0xca, 0xbd, 0x46, 0xb1, 0x11, 0xaf, 0xed, 0xc1, 0x02, 0x63, 0x3c, 0xd9, 0xba, 0x7e, 0x8d, 0x27,
		0x56, 0x8a, 0xde, 0x8f, 0xae, 0xee, 0x67, 0x60, 0x31, 0x70, 0x27, 0x6f, 0x4a, 0x3d, 0xb5, 0xaf,
		0x39, 0x29, 0x98, 0xbf, 0xce, 0x98, 0x79, 0xc6, 0x0f, 0xba, 0x5a, 0x6f, 0x47, 0x73, 0x30, 0xf9,
		0x0b, 0x50, 0xe5, 0xe4, 0x03, 0xcb, 0x45, 0xba, 0xdd, 0xb3, 0x8c, 0x9b, 0xa8, 0x93, 0x82, 0xfa,
		0xcf, 0x62, 0x4b, 0xb5, 0x1f, 0x82, 0x63, 0xe6, 0x2d, 0x10, 0x83, 0x5e, 0x45, 0x35, 0xfa, 0x8e,
		0xed, 0xfa, 0x09, 0x8c, 0x7f, 0xce, 0x57, 0x2a, 0xc0, 0x6d, 0x11, 0x98, 0xdc, 0x80, 0x0a, 0x79,
		0x4c, 0x1b, 0x92, 0x7f, 0xc1, 0x88, 0xa6, 0x87, 0x28, 0x96, 0x38, 0x74, 0xbb, 0xef, 0x68, 0x6e,
		0x9a, 0xfc, 0xf7, 0x97, 0x3c, 0x71, 0x30, 0x08, 0x4b, 0x1c, 0xfe, 0x91, 0x83, 0x70, 0xb5, 0x4f,
		0xc1, 0xf0, 0x0d, 0x9e, 0x38, 0x38, 0x86, 0x51, 0xf0, 0x86, 0x21, 0x05, 0xc5, 0x5f, 0x71, 0x0a,
		0x8e, 0xc1, 0x14, 0x9f, 0x1a, 0x16, 0x5a, 0x17, 0xf5, 0x0c, 0xcf, 0x77, 0x69, 0x2b, 0x7c, 0x6f,
		0xaa, 0x6f, 0xbe, 0x1b, 0x6d, 0xc2, 0x94, 0x10, 0x14, 0x67, 0x22, 0x76, 0x85, 0x4a, 0x4e, 0x4a,
		0xc9, 0x86, 0xbd, 0xc9, 0x33, 0x51, 0x08, 0x86, 0x6d, 0x0b, 0x75, 0x88, 0xd8, 0xed, 0x3a, 0x3e,
		0x1f, 0xa4, 0xa0, 0xfb, 0x56, 0xcc, 0xb8, 0x36, 0xc7, 0x62, 0xce, 0x50, 0xff, 0x33, 0xb0, 0xae,
		0xa1, 0xa3, 0x54, 0xd1, 0xf9, 0xd7, 0xb1, 0xfe, 0x67, 0x9f, 0x22, 0x69, 0x0e, 0x99, 0x89, 0xf5,
		0x53, 0x52, 0xd2, 0x7f, 0x01, 0x55, 0x7f, 0xea, 0x2e, 0x9b, 0x6f, 0xb4, 0x9d, 0x92, 0xb7, 0x71,
		0x90, 0x47, 0x9b, 0x9e, 0x64, 0xb2, 0x57, 0xee, 0x06, 0x71, 0x1e, 0xe9, 0x79, 0xe4, 0x2b, 0x30,
		0x1d, 0x69, 0x78, 0x92, 0xa9, 0x7e, 0x9a, 0x51, 0x95, 0xc3, 0xfd, 0x8e, 0x7c, 0x11, 0x72, 0xb8,
		0x79, 0x49, 0x86, 0xff, 0x0c, 0x83, 0x13, 0x75, 0xf9, 0xe3, 0x50, 0xe0, 0x4d, 0x4b, 0x32, 0xf4,
		0x67, 0x19, 0x34, 0x80, 0x60, 0x38, 0x6f, 0x58, 0x92, 0xe1, 0x3f, 0xc7, 0xe1, 0x1c, 0x82, 0xe1,
		0xe9, 0x5d, 0xf8, 0x37, 0x3f, 0x9f, 0x63, 0x45, 0x87, 0xfb, 0xee, 0x32, 0x4c, 0xb1, 0x4e, 0x25,
		0x19, 0xfd, 0x39, 0xf6, 0x72, 0x8e, 0x90, 0x9f, 0x82, 0x7c, 0x4a, 0x87, 0xff, 0x22, 0x83, 0x52,
		0x7d, 0xb9, 0x0e, 0xa5, 0x50, 0x77, 0x92, 0x0c, 0xff, 0x25, 0x06, 0x0f, 0xa3, 0xb0, 0xe9, 0xac,
		0x3b, 0x49, 0x26, 0xf8, 0x65, 0x6e, 0x3a, 0x43, 0x60, 0xb7, 0xf1, 0xc6, 0x24, 0x19, 0xfd, 0x2b,
		0xdc, 0xeb, 0x1c, 0x22, 0x3f, 0x0b, 0xc5, 0xa0, 0xd8, 0x24, 0xe3, 0x7f, 0x95, 0xe1, 0x87, 0x18,
		0xec, 0x81, 0x50, 0xb1, 0x4b, 0xa6, 0xf8, 0x35, 0xee, 0x81, 0x10, 0x0a, 0x6f, 0xa3, 0x78, 0x03,
		0x93, 0xcc, 0xf4, 0xeb, 0x7c, 0x1b, 0xc5, 0xfa, 0x17, 0xbc, 0x9a, 0x24, 0xe7, 0x27, 0x53, 0xfc,
		0x06, 0x5f, 0x4d, 0xa2, 0x8f, 0xcd, 0x88, 0x77, 0x04, 0xc9, 0x1c, 0xbf, 0xc9, 0xcd, 0x88, 0x35,
		0x04, 0x72, 0x0b, 0xa4, 0xd1, 0x6e, 0x20, 0x99, 0xef, 0xf3, 0x8c, 0x6f, 0x76, 0xa4, 0x19, 0x90,
		0x9f, 0x87, 0x85, 0xf1, 0x9d, 0x40, 0x32, 0xeb, 0x17, 0xee, 0xc6, 0xce, 0x6e, 0xe1, 0x46, 0x40,
		0xde, 0x1b, 0x96, 0x94, 0x70, 0x17, 0x90, 0x4c, 0xfb, 0xea, 0xdd, 0x68, 0xe2, 0x0e, 0x37, 0x01,
		0x72, 0x0d, 0x60, 0x58, 0x80, 0x93, 0xb9, 0x5e, 0x63, 0x5c, 0x21, 0x10, 0xde, 0x1a, 0xac, 0xfe,
		0x26, 0xe3, 0xbf, 0xc8, 0xb7, 0x06, 0x43, 0xe0, 0xad, 0xc1, 0x4b, 0x6f, 0x32, 0xfa, 0x75, 0xbe,
		0x35, 0x38, 0x04, 0x47, 0x76, 0xa8, 0xba, 0x25, 0x33, 0x7c, 0x89, 0x47, 0x76, 0x08, 0x25, 0xef,
		0xc2, 0xec, 0x48, 0x41, 0x4c, 0xa6, 0xfa, 0x32, 0xa3, 0x12, 0xe3, 0xf5, 0x30, 0x5c, 0xbc, 0x58,
		0x31, 0x4c, 0x66, 0xfb, 0xdd, 0x58, 0xf1, 0x62, 0xb5, 0x50, 0xbe, 0x0c, 0x05, 0x6b, 0x60, 0x9a,
		0x78, 0xf3, 0x48, 0xf7, 0xfe, 0xcf, 0xbd, 0xea, 0xbf, 0xbe, 0xc7, 0xbc, 0xc3, 0x01, 0xf2, 0x45,
		0xc8, 0xa3, 0xfe, 0x01, 0xea, 0x24, 0x21, 0xff, 0xed, 0x3d, 0x9e, 0x30, 0xb1, 0xb6, 0xfc, 0x2c,
		0x00, 0xbd, 0x1a, 0x21, 0x9f, 0xfd, 0x12, 0xb0, 0xdf, 0x7b, 0x8f, 0xfd, 0x4f, 0xcd, 0x10, 0x32,
		0x24, 0xa0, 0xff, 0xa1, 0x73, 0x6f, 0x82, 0x77, 0xa3, 0x04, 0x64, 0x45, 0x9e, 0x81, 0xa9, 0xab,
		0x9e, 0x6d, 0xf9, 0x5a, 0x2f, 0x09, 0xfd, 0xef, 0x0c, 0xcd, 0xf5, 0xb1, 0xc3, 0xfa, 0xb6, 0x8b,
		0x7c, 0xad, 0xe7, 0x25, 0x61, 0xff, 0x83, 0x61, 0x03, 0x00, 0x06, 0xeb, 0x9a, 0xe7, 0xa7, 0x99,
		0xf7, 0x7f, 0x72, 0x30, 0x07, 0x60, 0xa3, 0xf1, 0xef, 0x6b, 0xe8, 0x28, 0x09, 0xfb, 0x7d, 0x6e,
		0x34, 0xd3, 0x97, 0x3f, 0x0e, 0x45, 0xfc, 0x93, 0xfe, 0xa3, 0x5c, 0x02, 0xf8, 0xbf, 0x18, 0x78,
		0x88, 0xc0, 0x6f, 0xf6, 0xfc, 0x8e, 0x6f, 0x24, 0x3b, 0xfb, 0xbf, 0xd9, 0x4a, 0x73, 0x7d, 0xb9,
		0x06, 0x25, 0xcf, 0xef, 0x74, 0x06, 0xac, 0x3f, 0x4d, 0x80, 0xff, 0xcf, 0x7b, 0xc1, 0x95, 0x45,
		0x80, 0xc1, 0xab, 0x7d, 0xe3, 0x9a, 0xef, 0xd8, 0xe4, 0x33, 0x47, 0x12, 0xc3, 0x5d, 0xc6, 0x10,
		0x82, 0xc8, 0x75, 0x28, 0xe3, 0xb9, 0xb8, 0xc8, 0x41, 0xe4, 0x9b, 0x54, 0x02, 0xc5, 0xff, 0x32,
		0x07, 0x44, 0x40, 0xeb, 0x8d, 0xf1, 0x77, 0xc0, 0xb0, 0x69, 0x6f, 0xda, 0xf4, 0xf6, 0xf7, 0xa5,
		0xe5, 0xe4, 0x6b, 0x5c, 0x78, 0x33, 0x03, 0xa5, 0x9e, 0x6b, 0x0f, 0x1c, 0x76, 0x97, 0x9b, 0x27,
		0x0f, 0x8b, 0x27, 0xbb, 0x01, 0x5e, 0xfe, 0x09, 0x98, 0xda, 0xc4, 0x38, 0xef, 0x63, 0xd2, 0x12,
		0x08, 0x3d, 0x72, 0xf3, 0x0d, 0x6b, 0xe2, 0x2a, 0x65, 0x66, 0x43, 0xab, 0x9b, 0x8a, 0xd0, 0x5b,
		0x7c, 0x12, 0x84, 0x4d, 0x69, 0x01, 0x26, 0xc9, 0x14, 0x3f, 0x46, 0xbe, 0x72, 0x66, 0x15, 0xf6,
		0x14, 0xc8, 0xd7, 0xc8, 0xe5, 0xb8, 0xc0, 0xe4, 0x6b, 0x43, 0xfe, 0x35, 0xce, 0x2f, 0x8c, 0xf0,
		0xaf, 0x9d, 0x90, 0x3f, 0x3b, 0xe4, 0x5f, 0xbf, 0xf0, 0xd6, 0xed, 0xa5, 0x89, 0xef, 0xdc, 0x5e,
		0x9a, 0xf8, 0x87, 0xdb, 0x4b, 0x13, 0x6f, 0xdf, 0x5e, 0x12, 0xbe, 0x7f, 0x7b, 0x49, 0xf8, 0xc1,
		0xed, 0x25, 0xe1, 0xd6, 0x9d, 0x25, 0xe1, 0x2b, 0x77, 0x96, 0x84, 0xaf, 0xdd, 0x59, 0x12, 0xbe,
		0x79, 0x67, 0x49, 0x78, 0xeb, 0xce, 0xd2, 0xc4, 0x77, 0xee, 0x2c, 0x4d, 0xbc, 0x7d, 0x67, 0x69,
		0xe2, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xfe, 0x43, 0xd9, 0x75, 0x34, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Groups1) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Groups1)
	if !ok {
		that2, ok := that.(Groups1)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Groups1")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Groups1 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Groups1 but is not nil && this == nil")
	}
	if len(this.G) != len(that1.G) {
		return fmt.Errorf("G this(%v) Not Equal that(%v)", len(this.G), len(that1.G))
	}
	for i := range this.G {
		if !this.G[i].Equal(that1.G[i]) {
			return fmt.Errorf("G this[%v](%v) Not Equal that[%v](%v)", i, this.G[i], i, that1.G[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Groups1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Groups1)
	if !ok {
		that2, ok := that.(Groups1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.G) != len(that1.G) {
		return false
	}
	for i := range this.G {
		if !this.G[i].Equal(that1.G[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Groups1_G) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Groups1_G)
	if !ok {
		that2, ok := that.(Groups1_G)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Groups1_G")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Groups1_G but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Groups1_G but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if this.Field2 != nil && that1.Field2 != nil {
		if *this.Field2 != *that1.Field2 {
			return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", *this.Field2, *that1.Field2)
		}
	} else if this.Field2 != nil {
		return fmt.Errorf("this.Field2 == nil && that.Field2 != nil")
	} else if that1.Field2 != nil {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this.Field2, that1.Field2)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Groups1_G) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Groups1_G)
	if !ok {
		that2, ok := that.(Groups1_G)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if this.Field2 != nil && that1.Field2 != nil {
		if *this.Field2 != *that1.Field2 {
			return false
		}
	} else if this.Field2 != nil {
		return false
	} else if that1.Field2 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Groups2) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Groups2)
	if !ok {
		that2, ok := that.(Groups2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Groups2")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Groups2 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Groups2 but is not nil && this == nil")
	}
	if !this.G.Equal(that1.G) {
		return fmt.Errorf("G this(%v) Not Equal that(%v)", this.G, that1.G)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Groups2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Groups2)
	if !ok {
		that2, ok := that.(Groups2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.G.Equal(that1.G) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Groups2_G) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Groups2_G)
	if !ok {
		that2, ok := that.(Groups2_G)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Groups2_G")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Groups2_G but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Groups2_G but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if len(this.Field2) != len(that1.Field2) {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", len(this.Field2), len(that1.Field2))
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return fmt.Errorf("Field2 this[%v](%v) Not Equal that[%v](%v)", i, this.Field2[i], i, that1.Field2[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Groups2_G) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Groups2_G)
	if !ok {
		that2, ok := that.(Groups2_G)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if len(this.Field2) != len(that1.Field2) {
		return false
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Groups1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&group.Groups1{")
	if this.G != nil {
		s = append(s, "G: "+fmt.Sprintf("%#v", this.G)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Groups1_G) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&group.Groups1_G{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringGroup(this.Field1, "int64")+",\n")
	}
	if this.Field2 != nil {
		s = append(s, "Field2: "+valueToGoStringGroup(this.Field2, "float64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Groups2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&group.Groups2{")
	if this.G != nil {
		s = append(s, "G: "+fmt.Sprintf("%#v", this.G)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Groups2_G) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&group.Groups2_G{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringGroup(this.Field1, "int64")+",\n")
	}
	if this.Field2 != nil {
		s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGroup(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func NewPopulatedGroups1(r randyGroup, easy bool) *Groups1 {
	this := &Groups1{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.G = make([]*Groups1_G, v1)
		for i := 0; i < v1; i++ {
			this.G[i] = NewPopulatedGroups1_G(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGroup(r, 2)
	}
	return this
}

func NewPopulatedGroups1_G(r randyGroup, easy bool) *Groups1_G {
	this := &Groups1_G{}
	if r.Intn(5) != 0 {
		v2 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		this.Field1 = &v2
	}
	if r.Intn(5) != 0 {
		v3 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.Field2 = &v3
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGroup(r, 3)
	}
	return this
}

func NewPopulatedGroups2(r randyGroup, easy bool) *Groups2 {
	this := &Groups2{}
	if r.Intn(5) != 0 {
		this.G = NewPopulatedGroups2_G(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGroup(r, 2)
	}
	return this
}

func NewPopulatedGroups2_G(r randyGroup, easy bool) *Groups2_G {
	this := &Groups2_G{}
	if r.Intn(5) != 0 {
		v4 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		this.Field1 = &v4
	}
	if r.Intn(5) != 0 {
		v5 := r.Intn(10)
		this.Field2 = make([]float64, v5)
		for i := 0; i < v5; i++ {
			this.Field2[i] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.Field2[i] *= -1
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGroup(r, 3)
	}
	return this
}

type randyGroup interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGroup(r randyGroup) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGroup(r randyGroup) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneGroup(r)
	}
	return string(tmps)
}
func randUnrecognizedGroup(r randyGroup, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGroup(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGroup(dAtA []byte, r randyGroup, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGroup(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (this *Groups1) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForG := "[]*Groups1_G{"
	for _, f := range this.G {
		repeatedStringForG += strings.Replace(fmt.Sprintf("%v", f), "Groups1_G", "Groups1_G", 1) + ","
	}
	repeatedStringForG += "}"
	s := strings.Join([]string{`&Groups1{`,
		`G:` + repeatedStringForG + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Groups1_G) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Groups1_G{`,
		`Field1:` + valueToStringGroup(this.Field1) + `,`,
		`Field2:` + valueToStringGroup(this.Field2) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Groups2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Groups2{`,
		`G:` + strings.Replace(fmt.Sprintf("%v", this.G), "Groups2_G", "Groups2_G", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Groups2_G) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Groups2_G{`,
		`Field1:` + valueToStringGroup(this.Field1) + `,`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGroup(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
