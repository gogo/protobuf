// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: group.proto

/*
Package group is a generated protocol buffer package.

It is generated from these files:
	group.proto

It has these top-level messages:
	Groups1
	Groups2
*/
package group

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Groups1 struct {
	G                []*Groups1_G `protobuf:"group,1,rep,name=G,json=g" json:"g,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Groups1) Reset()                    { *m = Groups1{} }
func (*Groups1) ProtoMessage()               {}
func (*Groups1) Descriptor() ([]byte, []int) { return fileDescriptorGroup, []int{0} }

type Groups1_G struct {
	Field1           *int64   `protobuf:"varint,1,opt,name=Field1" json:"Field1,omitempty"`
	Field2           *float64 `protobuf:"fixed64,2,opt,name=Field2" json:"Field2,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Groups1_G) Reset()                    { *m = Groups1_G{} }
func (*Groups1_G) ProtoMessage()               {}
func (*Groups1_G) Descriptor() ([]byte, []int) { return fileDescriptorGroup, []int{0, 0} }

type Groups2 struct {
	G                *Groups2_G `protobuf:"group,1,opt,name=G,json=g" json:"g,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Groups2) Reset()                    { *m = Groups2{} }
func (*Groups2) ProtoMessage()               {}
func (*Groups2) Descriptor() ([]byte, []int) { return fileDescriptorGroup, []int{1} }

type Groups2_G struct {
	Field1           *int64    `protobuf:"varint,1,opt,name=Field1" json:"Field1,omitempty"`
	Field2           []float64 `protobuf:"fixed64,2,rep,name=Field2" json:"Field2,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Groups2_G) Reset()                    { *m = Groups2_G{} }
func (*Groups2_G) ProtoMessage()               {}
func (*Groups2_G) Descriptor() ([]byte, []int) { return fileDescriptorGroup, []int{1, 0} }

func init() {
	proto.RegisterType((*Groups1)(nil), "group.Groups1")
	proto.RegisterType((*Groups1_G)(nil), "group.Groups1.G")
	proto.RegisterType((*Groups2)(nil), "group.Groups2")
	proto.RegisterType((*Groups2_G)(nil), "group.Groups2.G")
}
func (this *Groups1) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return GroupDescription()
}
func (this *Groups1_G) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return GroupDescription()
}
func (this *Groups2) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return GroupDescription()
}
func (this *Groups2_G) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return GroupDescription()
}
func GroupDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3727 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x5d, 0x6c, 0x23, 0xd7,
		0x75, 0xd6, 0xf0, 0x47, 0x22, 0x0f, 0x29, 0x6a, 0x34, 0x92, 0xb5, 0x5c, 0x39, 0xd6, 0xee, 0x2a,
		0x76, 0x57, 0xb6, 0x1b, 0x6d, 0x22, 0xef, 0xae, 0xd7, 0xb3, 0x4d, 0x0c, 0x8a, 0xe2, 0x32, 0xdc,
		0x4a, 0x22, 0x33, 0x94, 0xe2, 0xdd, 0x14, 0xe8, 0x60, 0x34, 0x73, 0x49, 0xcd, 0xee, 0x70, 0x66,
		0x32, 0x33, 0xdc, 0xb5, 0xfc, 0xb4, 0x85, 0xfb, 0x83, 0xa0, 0x48, 0xff, 0x81, 0x26, 0xae, 0xe3,
		0xb6, 0x01, 0x5a, 0xa7, 0xe9, 0x5f, 0xd2, 0x9f, 0x34, 0xe9, 0x53, 0x5f, 0xd2, 0xfa, 0x29, 0x48,
		0x1e, 0x0a, 0xf4, 0xa1, 0x0f, 0xde, 0x85, 0x81, 0xfe, 0xb9, 0x6d, 0xda, 0x1a, 0x68, 0x01, 0xbf,
		0x14, 0xf7, 0x6f, 0x38, 0x43, 0x52, 0x1a, 0x2a, 0x80, 0x93, 0x27, 0xf1, 0x9e, 0x7b, 0xbe, 0x6f,
		0xce, 0x9c, 0x7b, 0xee, 0x39, 0xe7, 0xde, 0x11, 0x7c, 0xfe, 0x2a, 0x9c, 0xef, 0x3a, 0x4e, 0xd7,
		0x42, 0x97, 0x5c, 0xcf, 0x09, 0x9c, 0x83, 0x7e, 0xe7, 0x92, 0x81, 0x7c, 0xdd, 0x33, 0xdd, 0xc0,
		0xf1, 0xd6, 0x89, 0x4c, 0x9a, 0xa3, 0x1a, 0xeb, 0x5c, 0x63, 0x75, 0x07, 0xe6, 0x6f, 0x98, 0x16,
		0xda, 0x0a, 0x15, 0xdb, 0x28, 0x90, 0xae, 0x41, 0xa6, 0x63, 0x5a, 0xa8, 0x2c, 0x9c, 0x4f, 0xaf,
		0x15, 0x36, 0x9e, 0x5c, 0x1f, 0x02, 0xad, 0xc7, 0x11, 0x2d, 0x2c, 0x56, 0x08, 0x62, 0xf5, 0x9d,
		0x0c, 0x2c, 0x8c, 0x99, 0x95, 0x24, 0xc8, 0xd8, 0x5a, 0x0f, 0x33, 0x0a, 0x6b, 0x79, 0x85, 0xfc,
		0x96, 0xca, 0x30, 0xe3, 0x6a, 0xfa, 0x5d, 0xad, 0x8b, 0xca, 0x29, 0x22, 0xe6, 0x43, 0x69, 0x05,
		0xc0, 0x40, 0x2e, 0xb2, 0x0d, 0x64, 0xeb, 0x47, 0xe5, 0xf4, 0xf9, 0xf4, 0x5a, 0x5e, 0x89, 0x48,
		0xa4, 0x67, 0x61, 0xde, 0xed, 0x1f, 0x58, 0xa6, 0xae, 0x46, 0xd4, 0xe0, 0x7c, 0x7a, 0x2d, 0xab,
		0x88, 0x74, 0x62, 0x6b, 0xa0, 0x7c, 0x11, 0xe6, 0xee, 0x23, 0xed, 0x6e, 0x54, 0xb5, 0x40, 0x54,
		0x4b, 0x58, 0x1c, 0x51, 0xac, 0x42, 0xb1, 0x87, 0x7c, 0x5f, 0xeb, 0x22, 0x35, 0x38, 0x72, 0x51,
		0x39, 0x43, 0xde, 0xfe, 0xfc, 0xc8, 0xdb, 0x0f, 0xbf, 0x79, 0x81, 0xa1, 0xf6, 0x8e, 0x5c, 0x24,
		0x55, 0x20, 0x8f, 0xec, 0x7e, 0x8f, 0x32, 0x64, 0x8f, 0xf1, 0x5f, 0xcd, 0xee, 0xf7, 0x86, 0x59,
		0x72, 0x18, 0xc6, 0x28, 0x66, 0x7c, 0xe4, 0xdd, 0x33, 0x75, 0x54, 0x9e, 0x26, 0x04, 0x17, 0x47,
		0x08, 0xda, 0x74, 0x7e, 0x98, 0x83, 0xe3, 0xa4, 0x2a, 0xe4, 0xd1, 0xcb, 0x01, 0xb2, 0x7d, 0xd3,
		0xb1, 0xcb, 0x33, 0x84, 0xe4, 0xa9, 0x31, 0xab, 0x88, 0x2c, 0x63, 0x98, 0x62, 0x80, 0x93, 0xae,
		0xc2, 0x8c, 0xe3, 0x06, 0xa6, 0x63, 0xfb, 0xe5, 0xdc, 0x79, 0x61, 0xad, 0xb0, 0xf1, 0xa1, 0xb1,
		0x81, 0xd0, 0xa4, 0x3a, 0x0a, 0x57, 0x96, 0x1a, 0x20, 0xfa, 0x4e, 0xdf, 0xd3, 0x91, 0xaa, 0x3b,
		0x06, 0x52, 0x4d, 0xbb, 0xe3, 0x94, 0xf3, 0x84, 0xe0, 0xdc, 0xe8, 0x8b, 0x10, 0xc5, 0xaa, 0x63,
		0xa0, 0x86, 0xdd, 0x71, 0x94, 0x92, 0x1f, 0x1b, 0x4b, 0x4b, 0x30, 0xed, 0x1f, 0xd9, 0x81, 0xf6,
		0x72, 0xb9, 0x48, 0x22, 0x84, 0x8d, 0x56, 0xff, 0x37, 0x0b, 0x73, 0x93, 0x84, 0xd8, 0x75, 0xc8,
		0x76, 0xf0, 0x5b, 0x96, 0x53, 0xa7, 0xf1, 0x01, 0xc5, 0xc4, 0x9d, 0x38, 0xfd, 0x03, 0x3a, 0xb1,
		0x02, 0x05, 0x1b, 0xf9, 0x01, 0x32, 0x68, 0x44, 0xa4, 0x27, 0x8c, 0x29, 0xa0, 0xa0, 0xd1, 0x90,
		0xca, 0xfc, 0x40, 0x21, 0x75, 0x0b, 0xe6, 0x42, 0x93, 0x54, 0x4f, 0xb3, 0xbb, 0x3c, 0x36, 0x2f,
		0x25, 0x59, 0xb2, 0x5e, 0xe3, 0x38, 0x05, 0xc3, 0x94, 0x12, 0x8a, 0x8d, 0xa5, 0x2d, 0x00, 0xc7,
		0x46, 0x4e, 0x47, 0x35, 0x90, 0x6e, 0x95, 0x73, 0xc7, 0x78, 0xa9, 0x89, 0x55, 0x46, 0xbc, 0xe4,
		0x50, 0xa9, 0x6e, 0x49, 0x2f, 0x0c, 0x42, 0x6d, 0xe6, 0x98, 0x48, 0xd9, 0xa1, 0x9b, 0x6c, 0x24,
		0xda, 0xf6, 0xa1, 0xe4, 0x21, 0x1c, 0xf7, 0xc8, 0x60, 0x6f, 0x96, 0x27, 0x46, 0xac, 0x27, 0xbe,
		0x99, 0xc2, 0x60, 0xf4, 0xc5, 0x66, 0xbd, 0xe8, 0x50, 0xfa, 0x30, 0x84, 0x02, 0x95, 0x84, 0x15,
		0x90, 0x2c, 0x54, 0xe4, 0xc2, 0x5d, 0xad, 0x87, 0x96, 0xaf, 0x41, 0x29, 0xee, 0x1e, 0x69, 0x11,
		0xb2, 0x7e, 0xa0, 0x79, 0x01, 0x89, 0xc2, 0xac, 0x42, 0x07, 0x92, 0x08, 0x69, 0x64, 0x1b, 0x24,
		0xcb, 0x65, 0x15, 0xfc, 0x73, 0xf9, 0x79, 0x98, 0x8d, 0x3d, 0x7e, 0x52, 0xe0, 0xea, 0x17, 0xa6,
		0x61, 0x71, 0x5c, 0xcc, 0x8d, 0x0d, 0xff, 0x25, 0x98, 0xb6, 0xfb, 0xbd, 0x03, 0xe4, 0x95, 0xd3,
		0x84, 0x81, 0x8d, 0xa4, 0x0a, 0x64, 0x2d, 0xed, 0x00, 0x59, 0xe5, 0xcc, 0x79, 0x61, 0xad, 0xb4,
		0xf1, 0xec, 0x44, 0x51, 0xbd, 0xbe, 0x8d, 0x21, 0x0a, 0x45, 0x4a, 0x9f, 0x80, 0x0c, 0x4b, 0x71,
		0x98, 0xe1, 0x99, 0xc9, 0x18, 0x70, 0x2c, 0x2a, 0x04, 0x27, 0x3d, 0x0e, 0x79, 0xfc, 0x97, 0xfa,
		0x76, 0x9a, 0xd8, 0x9c, 0xc3, 0x02, 0xec, 0x57, 0x69, 0x19, 0x72, 0x24, 0xcc, 0x0c, 0xc4, 0x4b,
		0x43, 0x38, 0xc6, 0x0b, 0x63, 0xa0, 0x8e, 0xd6, 0xb7, 0x02, 0xf5, 0x9e, 0x66, 0xf5, 0x11, 0x09,
		0x98, 0xbc, 0x52, 0x64, 0xc2, 0x4f, 0x63, 0x99, 0x74, 0x0e, 0x0a, 0x34, 0x2a, 0x4d, 0xdb, 0x40,
		0x2f, 0x93, 0xec, 0x93, 0x55, 0x68, 0xa0, 0x36, 0xb0, 0x04, 0x3f, 0xfe, 0x8e, 0xef, 0xd8, 0x7c,
		0x69, 0xc9, 0x23, 0xb0, 0x80, 0x3c, 0xfe, 0xf9, 0xe1, 0xc4, 0xf7, 0xc4, 0xf8, 0xd7, 0x1b, 0x8e,
		0xc5, 0xd5, 0x6f, 0xa4, 0x20, 0x43, 0xf6, 0xdb, 0x1c, 0x14, 0xf6, 0x6e, 0xb7, 0x6a, 0xea, 0x56,
		0x73, 0x7f, 0x73, 0xbb, 0x26, 0x0a, 0x52, 0x09, 0x80, 0x08, 0x6e, 0x6c, 0x37, 0x2b, 0x7b, 0x62,
		0x2a, 0x1c, 0x37, 0x76, 0xf7, 0xae, 0x5e, 0x16, 0xd3, 0x21, 0x60, 0x9f, 0x0a, 0x32, 0x51, 0x85,
		0xe7, 0x36, 0xc4, 0xac, 0x24, 0x42, 0x91, 0x12, 0x34, 0x6e, 0xd5, 0xb6, 0xae, 0x5e, 0x16, 0xa7,
		0xe3, 0x92, 0xe7, 0x36, 0xc4, 0x19, 0x69, 0x16, 0xf2, 0x44, 0xb2, 0xd9, 0x6c, 0x6e, 0x8b, 0xb9,
		0x90, 0xb3, 0xbd, 0xa7, 0x34, 0x76, 0xeb, 0x62, 0x3e, 0xe4, 0xac, 0x2b, 0xcd, 0xfd, 0x96, 0x08,
		0x21, 0xc3, 0x4e, 0xad, 0xdd, 0xae, 0xd4, 0x6b, 0x62, 0x21, 0xd4, 0xd8, 0xbc, 0xbd, 0x57, 0x6b,
		0x8b, 0xc5, 0x98, 0x59, 0xcf, 0x6d, 0x88, 0xb3, 0xe1, 0x23, 0x6a, 0xbb, 0xfb, 0x3b, 0x62, 0x49,
		0x9a, 0x87, 0x59, 0xfa, 0x08, 0x6e, 0xc4, 0xdc, 0x90, 0xe8, 0xea, 0x65, 0x51, 0x1c, 0x18, 0x42,
		0x59, 0xe6, 0x63, 0x82, 0xab, 0x97, 0x45, 0x69, 0xb5, 0x0a, 0x59, 0x12, 0x5d, 0x92, 0x04, 0xa5,
		0xed, 0xca, 0x66, 0x6d, 0x5b, 0x6d, 0xb6, 0xf6, 0x1a, 0xcd, 0xdd, 0xca, 0xb6, 0x28, 0x0c, 0x64,
		0x4a, 0xed, 0x53, 0xfb, 0x0d, 0xa5, 0xb6, 0x25, 0xa6, 0xa2, 0xb2, 0x56, 0xad, 0xb2, 0x57, 0xdb,
		0x12, 0xd3, 0xab, 0x3a, 0x2c, 0x8e, 0xcb, 0x33, 0x63, 0x77, 0x46, 0x64, 0x89, 0x53, 0xc7, 0x2c,
		0x31, 0xe1, 0x1a, 0x59, 0xe2, 0x2f, 0x0b, 0xb0, 0x30, 0x26, 0xd7, 0x8e, 0x7d, 0xc8, 0x8b, 0x90,
		0xa5, 0x21, 0x4a, 0xab, 0xcf, 0xd3, 0x63, 0x93, 0x36, 0x09, 0xd8, 0x91, 0x0a, 0x44, 0x70, 0xd1,
		0x0a, 0x9c, 0x3e, 0xa6, 0x02, 0x63, 0x8a, 0x11, 0x23, 0x5f, 0x15, 0xa0, 0x7c, 0x1c, 0x77, 0x42,
		0xa2, 0x48, 0xc5, 0x12, 0xc5, 0xf5, 0x61, 0x03, 0x2e, 0x1c, 0xff, 0x0e, 0x23, 0x56, 0xbc, 0x29,
		0xc0, 0xd2, 0xf8, 0x46, 0x65, 0xac, 0x0d, 0x9f, 0x80, 0xe9, 0x1e, 0x0a, 0x0e, 0x1d, 0x5e, 0xac,
		0x7f, 0x6c, 0x4c, 0x09, 0xc0, 0xd3, 0xc3, 0xbe, 0x62, 0xa8, 0x68, 0x0d, 0x49, 0x1f, 0xd7, 0x6d,
		0x50, 0x6b, 0x46, 0x2c, 0xfd, 0x5c, 0x0a, 0x1e, 0x1b, 0x4b, 0x3e, 0xd6, 0xd0, 0x27, 0x00, 0x4c,
		0xdb, 0xed, 0x07, 0xb4, 0x20, 0xd3, 0xfc, 0x94, 0x27, 0x12, 0xb2, 0xf7, 0x71, 0xee, 0xe9, 0x07,
		0xe1, 0x7c, 0x9a, 0xcc, 0x03, 0x15, 0x11, 0x85, 0x6b, 0x03, 0x43, 0x33, 0xc4, 0xd0, 0x95, 0x63,
		0xde, 0x74, 0xa4, 0xd6, 0x7d, 0x14, 0x44, 0xdd, 0x32, 0x91, 0x1d, 0xa8, 0x7e, 0xe0, 0x21, 0xad,
		0x67, 0xda, 0x5d, 0x92, 0x80, 0x73, 0x72, 0xb6, 0xa3, 0x59, 0x3e, 0x52, 0xe6, 0xe8, 0x74, 0x9b,
		0xcf, 0x62, 0x04, 0xa9, 0x32, 0x5e, 0x04, 0x31, 0x1d, 0x43, 0xd0, 0xe9, 0x10, 0xb1, 0xfa, 0xf7,
		0x33, 0x50, 0x88, 0xb4, 0x75, 0xd2, 0x05, 0x28, 0xde, 0xd1, 0xee, 0x69, 0x2a, 0x6f, 0xd5, 0xa9,
		0x27, 0x0a, 0x58, 0xd6, 0x62, 0xed, 0xfa, 0x47, 0x61, 0x91, 0xa8, 0x38, 0xfd, 0x00, 0x79, 0xaa,
		0x6e, 0x69, 0xbe, 0x4f, 0x9c, 0x96, 0x23, 0xaa, 0x12, 0x9e, 0x6b, 0xe2, 0xa9, 0x2a, 0x9f, 0x91,
		0xae, 0xc0, 0x02, 0x41, 0xf4, 0xfa, 0x56, 0x60, 0xba, 0x16, 0x52, 0xf1, 0xe1, 0xc1, 0x27, 0x89,
		0x38, 0xb4, 0x6c, 0x1e, 0x6b, 0xec, 0x30, 0x05, 0x6c, 0x91, 0x2f, 0x6d, 0xc1, 0x13, 0x04, 0xd6,
		0x45, 0x36, 0xf2, 0xb4, 0x00, 0xa9, 0xe8, 0xb3, 0x7d, 0xcd, 0xf2, 0x55, 0xcd, 0x36, 0xd4, 0x43,
		0xcd, 0x3f, 0x2c, 0x2f, 0x62, 0x82, 0xcd, 0x54, 0x59, 0x50, 0xce, 0x62, 0xc5, 0x3a, 0xd3, 0xab,
		0x11, 0xb5, 0x8a, 0x6d, 0x7c, 0x52, 0xf3, 0x0f, 0x25, 0x19, 0x96, 0x08, 0x8b, 0x1f, 0x78, 0xa6,
		0xdd, 0x55, 0xf5, 0x43, 0xa4, 0xdf, 0x55, 0xfb, 0x41, 0xe7, 0x5a, 0xf9, 0xf1, 0xe8, 0xf3, 0x89,
		0x85, 0x6d, 0xa2, 0x53, 0xc5, 0x2a, 0xfb, 0x41, 0xe7, 0x9a, 0xd4, 0x86, 0x22, 0x5e, 0x8c, 0x9e,
		0xf9, 0x0a, 0x52, 0x3b, 0x8e, 0x47, 0x2a, 0x4b, 0x69, 0xcc, 0xce, 0x8e, 0x78, 0x70, 0xbd, 0xc9,
		0x00, 0x3b, 0x8e, 0x81, 0xe4, 0x6c, 0xbb, 0x55, 0xab, 0x6d, 0x29, 0x05, 0xce, 0x72, 0xc3, 0xf1,
		0x70, 0x40, 0x75, 0x9d, 0xd0, 0xc1, 0x05, 0x1a, 0x50, 0x5d, 0x87, 0xbb, 0xf7, 0x0a, 0x2c, 0xe8,
		0x3a, 0x7d, 0x67, 0x53, 0x57, 0x59, 0x8b, 0xef, 0x97, 0xc5, 0x98, 0xb3, 0x74, 0xbd, 0x4e, 0x15,
		0x58, 0x8c, 0xfb, 0xd2, 0x0b, 0xf0, 0xd8, 0xc0, 0x59, 0x51, 0xe0, 0xfc, 0xc8, 0x5b, 0x0e, 0x43,
		0xaf, 0xc0, 0x82, 0x7b, 0x34, 0x0a, 0x94, 0x62, 0x4f, 0x74, 0x8f, 0x86, 0x61, 0x4f, 0x91, 0x63,
		0x9b, 0x87, 0x74, 0x2d, 0x40, 0x46, 0xf9, 0x4c, 0x54, 0x3b, 0x32, 0x21, 0x5d, 0x02, 0x51, 0xd7,
		0x55, 0x64, 0x6b, 0x07, 0x16, 0x52, 0x35, 0x0f, 0xd9, 0x9a, 0x5f, 0x3e, 0x17, 0x55, 0x2e, 0xe9,
		0x7a, 0x8d, 0xcc, 0x56, 0xc8, 0xa4, 0xf4, 0x0c, 0xcc, 0x3b, 0x07, 0x77, 0x74, 0x1a, 0x59, 0xaa,
		0xeb, 0xa1, 0x8e, 0xf9, 0x72, 0xf9, 0x49, 0xe2, 0xa6, 0x39, 0x3c, 0x41, 0xe2, 0xaa, 0x45, 0xc4,
		0xd2, 0xd3, 0x20, 0xea, 0xfe, 0xa1, 0xe6, 0xb9, 0xa4, 0xb4, 0xfb, 0xae, 0xa6, 0xa3, 0xf2, 0x53,
		0x54, 0x95, 0xca, 0x77, 0xb9, 0x18, 0x47, 0xb6, 0x7f, 0xdf, 0xec, 0x04, 0x9c, 0xf1, 0x22, 0x8d,
		0x6c, 0x22, 0x63, 0x6c, 0x6b, 0x20, 0xba, 0x87, 0x6e, 0xfc, 0xc1, 0x6b, 0x44, 0xad, 0xe4, 0x1e,
		0xba, 0xd1, 0xe7, 0xde, 0x82, 0xc5, 0xbe, 0x6d, 0xda, 0x01, 0xf2, 0x5c, 0x0f, 0xe1, 0x76, 0x9f,
		0xee, 0xd9, 0xf2, 0x3f, 0xcd, 0x1c, 0xd3, 0xb0, 0xef, 0x47, 0xb5, 0x69, 0xa8, 0x28, 0x0b, 0xfd,
		0x51, 0xe1, 0xaa, 0x0c, 0xc5, 0x68, 0x04, 0x49, 0x79, 0xa0, 0x31, 0x24, 0x0a, 0xb8, 0x1a, 0x57,
		0x9b, 0x5b, 0xb8, 0x8e, 0x7e, 0xa6, 0x26, 0xa6, 0x70, 0x3d, 0xdf, 0x6e, 0xec, 0xd5, 0x54, 0x65,
		0x7f, 0x77, 0xaf, 0xb1, 0x53, 0x13, 0xd3, 0xcf, 0xe4, 0x73, 0xff, 0x3c, 0x23, 0x3e, 0x78, 0xf0,
		0xe0, 0x41, 0x6a, 0xf5, 0xdb, 0x29, 0x28, 0xc5, 0x7b, 0x68, 0xe9, 0x27, 0xe0, 0x0c, 0x3f, 0xf0,
		0xfa, 0x28, 0x50, 0xef, 0x9b, 0x1e, 0x09, 0xea, 0x9e, 0x46, 0xbb, 0xd0, 0x70, 0x3d, 0x16, 0x99,
		0x56, 0x1b, 0x05, 0x2f, 0x99, 0x1e, 0x0e, 0xd9, 0x9e, 0x16, 0x48, 0xdb, 0x70, 0xce, 0x76, 0x54,
		0x3f, 0xd0, 0x6c, 0x43, 0xf3, 0x0c, 0x75, 0x70, 0xd5, 0xa0, 0x6a, 0xba, 0x8e, 0x7c, 0xdf, 0xa1,
		0xc5, 0x24, 0x64, 0xf9, 0x90, 0xed, 0xb4, 0x99, 0xf2, 0x20, 0xcb, 0x56, 0x98, 0xea, 0x50, 0xec,
		0xa4, 0x8f, 0x8b, 0x9d, 0xc7, 0x21, 0xdf, 0xd3, 0x5c, 0x15, 0xd9, 0x81, 0x77, 0x44, 0x3a, 0xbf,
		0x9c, 0x92, 0xeb, 0x69, 0x6e, 0x0d, 0x8f, 0x3f, 0xb8, 0x35, 0x88, 0xfa, 0xf1, 0x1f, 0xd3, 0x50,
		0x8c, 0x76, 0x7f, 0xb8, 0x99, 0xd6, 0x49, 0xa6, 0x17, 0x48, 0x2e, 0xf8, 0xf0, 0x89, 0xbd, 0xe2,
		0x7a, 0x15, 0x97, 0x00, 0x79, 0x9a, 0xf6, 0x64, 0x0a, 0x45, 0xe2, 0xf2, 0x8b, 0x77, 0x3f, 0xa2,
		0x9d, 0x7e, 0x4e, 0x61, 0x23, 0xa9, 0x0e, 0xd3, 0x77, 0x7c, 0xc2, 0x3d, 0x4d, 0xb8, 0x9f, 0x3c,
		0x99, 0xfb, 0x66, 0x9b, 0x90, 0xe7, 0x6f, 0xb6, 0xd5, 0xdd, 0xa6, 0xb2, 0x53, 0xd9, 0x56, 0x18,
		0x5c, 0x3a, 0x0b, 0x19, 0x4b, 0x7b, 0xe5, 0x28, 0x5e, 0x2c, 0x88, 0x68, 0x52, 0xc7, 0x9f, 0x85,
		0xcc, 0x7d, 0xa4, 0xdd, 0x8d, 0xa7, 0x68, 0x22, 0xfa, 0x00, 0x43, 0xff, 0x12, 0x64, 0x89, 0xbf,
		0x24, 0x00, 0xe6, 0x31, 0x71, 0x4a, 0xca, 0x41, 0xa6, 0xda, 0x54, 0x70, 0xf8, 0x8b, 0x50, 0xa4,
		0x52, 0xb5, 0xd5, 0xa8, 0x55, 0x6b, 0x62, 0x6a, 0xf5, 0x0a, 0x4c, 0x53, 0x27, 0xe0, 0xad, 0x11,
		0xba, 0x41, 0x9c, 0x62, 0x43, 0xc6, 0x21, 0xf0, 0xd9, 0xfd, 0x9d, 0xcd, 0x9a, 0x22, 0xa6, 0xa2,
		0xcb, 0xeb, 0x43, 0x31, 0xda, 0xf8, 0xfd, 0x70, 0x62, 0xea, 0xaf, 0x05, 0x28, 0x44, 0x1a, 0x39,
		0xdc, 0x42, 0x68, 0x96, 0xe5, 0xdc, 0x57, 0x35, 0xcb, 0xd4, 0x7c, 0x16, 0x14, 0x40, 0x44, 0x15,
		0x2c, 0x99, 0x74, 0xd1, 0x7e, 0x28, 0xc6, 0xbf, 0x21, 0x80, 0x38, 0xdc, 0x04, 0x0e, 0x19, 0x28,
		0xfc, 0x48, 0x0d, 0x7c, 0x5d, 0x80, 0x52, 0xbc, 0xf3, 0x1b, 0x32, 0xef, 0xc2, 0x8f, 0xd4, 0xbc,
		0xb7, 0x53, 0x30, 0x1b, 0xeb, 0xf7, 0x26, 0xb5, 0xee, 0xb3, 0x30, 0x6f, 0x1a, 0xa8, 0xe7, 0x3a,
		0x01, 0xb2, 0xf5, 0x23, 0xd5, 0x42, 0xf7, 0x90, 0x55, 0x5e, 0x25, 0x89, 0xe2, 0xd2, 0xc9, 0x1d,
		0xe5, 0x7a, 0x63, 0x80, 0xdb, 0xc6, 0x30, 0x79, 0xa1, 0xb1, 0x55, 0xdb, 0x69, 0x35, 0xf7, 0x6a,
		0xbb, 0xd5, 0xdb, 0xea, 0xfe, 0xee, 0x4f, 0xee, 0x36, 0x5f, 0xda, 0x55, 0x44, 0x73, 0x48, 0xed,
		0x03, 0xdc, 0xea, 0x2d, 0x10, 0x87, 0x8d, 0x92, 0xce, 0xc0, 0x38, 0xb3, 0xc4, 0x29, 0x69, 0x01,
		0xe6, 0x76, 0x9b, 0x6a, 0xbb, 0xb1, 0x55, 0x53, 0x6b, 0x37, 0x6e, 0xd4, 0xaa, 0x7b, 0x6d, 0x7a,
		0xc4, 0x0e, 0xb5, 0xf7, 0xe2, 0x9b, 0xfa, 0xb5, 0x34, 0x2c, 0x8c, 0xb1, 0x44, 0xaa, 0xb0, 0xee,
		0x9e, 0x1e, 0x38, 0x3e, 0x32, 0x89, 0xf5, 0xeb, 0xb8, 0x7f, 0x68, 0x69, 0x5e, 0xc0, 0x0e, 0x03,
		0x4f, 0x03, 0xf6, 0x92, 0x1d, 0x98, 0x1d, 0x13, 0x79, 0xec, 0x46, 0x82, 0xb6, 0xfc, 0x73, 0x03,
		0x39, 0xbd, 0x94, 0xf8, 0x71, 0x90, 0x5c, 0xc7, 0x37, 0x03, 0xf3, 0x1e, 0x52, 0x4d, 0x9b, 0x5f,
		0x5f, 0xe0, 0x23, 0x40, 0x46, 0x11, 0xf9, 0x4c, 0xc3, 0x0e, 0x42, 0x6d, 0x1b, 0x75, 0xb5, 0x21,
		0x6d, 0x9c, 0xc0, 0xd3, 0x8a, 0xc8, 0x67, 0x42, 0xed, 0x0b, 0x50, 0x34, 0x9c, 0x3e, 0x6e, 0xa8,
		0xa8, 0x1e, 0xae, 0x17, 0x82, 0x52, 0xa0, 0xb2, 0x50, 0x85, 0x75, 0xbc, 0x83, 0x7b, 0x93, 0xa2,
		0x52, 0xa0, 0x32, 0xaa, 0x72, 0x11, 0xe6, 0xb4, 0x6e, 0xd7, 0xc3, 0xe4, 0x9c, 0x88, 0xf6, 0xf0,
		0xa5, 0x50, 0x4c, 0x14, 0x97, 0x6f, 0x42, 0x8e, 0xfb, 0x01, 0x97, 0x64, 0xec, 0x09, 0xd5, 0xa5,
		0xb7, 0x57, 0xa9, 0xb5, 0xbc, 0x92, 0xb3, 0xf9, 0xe4, 0x05, 0x28, 0x9a, 0xbe, 0x3a, 0xb8, 0x46,
		0x4d, 0x9d, 0x4f, 0xad, 0xe5, 0x94, 0x82, 0xe9, 0x87, 0xf7, 0x66, 0xab, 0x6f, 0xa6, 0xa0, 0x14,
		0xbf, 0x06, 0x96, 0xb6, 0x20, 0x67, 0x39, 0xba, 0x46, 0x42, 0x8b, 0x7e, 0x83, 0x58, 0x4b, 0xb8,
		0x39, 0x5e, 0xdf, 0x66, 0xfa, 0x4a, 0x88, 0x5c, 0xfe, 0x8e, 0x00, 0x39, 0x2e, 0x96, 0x96, 0x20,
		0xe3, 0x6a, 0xc1, 0x21, 0xa1, 0xcb, 0x6e, 0xa6, 0x44, 0x41, 0x21, 0x63, 0x2c, 0xf7, 0x5d, 0xcd,
		0x26, 0x21, 0xc0, 0xe4, 0x78, 0x8c, 0xd7, 0xd5, 0x42, 0x9a, 0x41, 0x0e, 0x08, 0x4e, 0xaf, 0x87,
		0xec, 0xc0, 0xe7, 0xeb, 0xca, 0xe4, 0x55, 0x26, 0x96, 0x9e, 0x85, 0xf9, 0xc0, 0xd3, 0x4c, 0x2b,
		0xa6, 0x9b, 0x21, 0xba, 0x22, 0x9f, 0x08, 0x95, 0x65, 0x38, 0xcb, 0x79, 0x0d, 0x14, 0x68, 0xfa,
		0x21, 0x32, 0x06, 0xa0, 0x69, 0x72, 0xc7, 0x78, 0x86, 0x29, 0x6c, 0xb1, 0x79, 0x8e, 0x5d, 0xfd,
		0x9e, 0x00, 0xf3, 0xfc, 0x48, 0x63, 0x84, 0xce, 0xda, 0x01, 0xd0, 0x6c, 0xdb, 0x09, 0xa2, 0xee,
		0x1a, 0x0d, 0xe5, 0x11, 0xdc, 0x7a, 0x25, 0x04, 0x29, 0x11, 0x82, 0xe5, 0x1e, 0xc0, 0x60, 0xe6,
		0x58, 0xb7, 0x9d, 0x83, 0x02, 0xbb, 0xe3, 0x27, 0x1f, 0x8a, 0xe8, 0x21, 0x18, 0xa8, 0x08, 0x9f,
		0x7d, 0xa4, 0x45, 0xc8, 0x1e, 0xa0, 0xae, 0x69, 0xb3, 0x9b, 0x47, 0x3a, 0xe0, 0xf7, 0x99, 0x99,
		0xf0, 0x3e, 0x73, 0xf3, 0x16, 0x2c, 0xe8, 0x4e, 0x6f, 0xd8, 0xdc, 0x4d, 0x71, 0xe8, 0x20, 0xee,
		0x7f, 0x52, 0xf8, 0x0c, 0x0c, 0x5a, 0xcc, 0x2f, 0xa7, 0xd2, 0xf5, 0xd6, 0xe6, 0x57, 0x53, 0xcb,
		0x75, 0x8a, 0x6b, 0xf1, 0xd7, 0x54, 0x50, 0xc7, 0x42, 0x3a, 0x36, 0x1d, 0xbe, 0x73, 0x11, 0x3e,
		0xd2, 0x35, 0x83, 0xc3, 0xfe, 0xc1, 0xba, 0xee, 0xf4, 0x2e, 0x75, 0x9d, 0xae, 0x33, 0xf8, 0x30,
		0x86, 0x47, 0x64, 0x40, 0x7e, 0xb1, 0x8f, 0x63, 0xf9, 0x50, 0xba, 0x9c, 0xf8, 0x25, 0x4d, 0xde,
		0x85, 0x05, 0xa6, 0xac, 0x92, 0xdb, 0x79, 0x7a, 0x3a, 0x90, 0x4e, 0xbc, 0xa1, 0x29, 0x7f, 0xfd,
		0x1d, 0x52, 0xab, 0x95, 0x79, 0x06, 0xc5, 0x73, 0xf4, 0x00, 0x21, 0x2b, 0xf0, 0x58, 0x8c, 0x8f,
		0xee, 0x4b, 0xe4, 0x25, 0x30, 0x7e, 0x9b, 0x31, 0x2e, 0x44, 0x18, 0xdb, 0x0c, 0x2a, 0x57, 0x61,
		0xf6, 0x34, 0x5c, 0x7f, 0xcb, 0xb8, 0x8a, 0x28, 0x4a, 0x52, 0x87, 0x39, 0x42, 0xa2, 0xf7, 0xfd,
		0xc0, 0xe9, 0x91, 0xa4, 0x77, 0x32, 0xcd, 0xdf, 0xbd, 0x43, 0x37, 0x4a, 0x09, 0xc3, 0xaa, 0x21,
		0x4a, 0x96, 0x81, 0x7c, 0x90, 0x30, 0x90, 0x6e, 0x25, 0x30, 0xbc, 0xc5, 0x0c, 0x09, 0xf5, 0xe5,
		0x4f, 0xc3, 0x22, 0xfe, 0x4d, 0x72, 0x52, 0xd4, 0x92, 0xe4, 0xfb, 0xa8, 0xf2, 0xf7, 0x5e, 0xa5,
		0x7b, 0x71, 0x21, 0x24, 0x88, 0xd8, 0x14, 0x59, 0xc5, 0x2e, 0x0a, 0x02, 0xe4, 0xf9, 0xaa, 0x66,
		0x8d, 0x33, 0x2f, 0x72, 0xa0, 0x2f, 0x7f, 0xf1, 0xdd, 0xf8, 0x2a, 0xd6, 0x29, 0xb2, 0x62, 0x59,
		0xf2, 0x3e, 0x9c, 0x19, 0x13, 0x15, 0x13, 0x70, 0xbe, 0xc6, 0x38, 0x17, 0x47, 0x22, 0x03, 0xd3,
		0xb6, 0x80, 0xcb, 0xc3, 0xb5, 0x9c, 0x80, 0xf3, 0xb7, 0x18, 0xa7, 0xc4, 0xb0, 0x7c, 0x49, 0x31,
		0xe3, 0x4d, 0x98, 0xbf, 0x87, 0xbc, 0x03, 0xc7, 0x67, 0x97, 0x28, 0x13, 0xd0, 0xbd, 0xce, 0xe8,
		0xe6, 0x18, 0x90, 0xdc, 0xaa, 0x60, 0xae, 0x17, 0x20, 0xd7, 0xd1, 0x74, 0x34, 0x01, 0xc5, 0x97,
		0x18, 0xc5, 0x0c, 0xd6, 0xc7, 0xd0, 0x0a, 0x14, 0xbb, 0x0e, 0x2b, 0x4b, 0xc9, 0xf0, 0x37, 0x18,
		0xbc, 0xc0, 0x31, 0x8c, 0xc2, 0x75, 0xdc, 0xbe, 0x85, 0x6b, 0x56, 0x32, 0xc5, 0x6f, 0x73, 0x0a,
		0x8e, 0x61, 0x14, 0xa7, 0x70, 0xeb, 0xef, 0x70, 0x0a, 0x3f, 0xe2, 0xcf, 0x17, 0xa1, 0xe0, 0xd8,
		0xd6, 0x91, 0x63, 0x4f, 0x62, 0xc4, 0xef, 0x32, 0x06, 0x60, 0x10, 0x4c, 0x70, 0x1d, 0xf2, 0x93,
		0x2e, 0xc4, 0xef, 0xbd, 0xcb, 0xb7, 0x07, 0x5f, 0x81, 0x3a, 0xcc, 0xf1, 0x04, 0x65, 0x3a, 0xf6,
		0x04, 0x14, 0xbf, 0xcf, 0x28, 0x4a, 0x11, 0x18, 0x7b, 0x8d, 0x00, 0xf9, 0x41, 0x17, 0x4d, 0x42,
		0xf2, 0x26, 0x7f, 0x0d, 0x06, 0x61, 0xae, 0x3c, 0x40, 0xb6, 0x7e, 0x38, 0x19, 0xc3, 0x57, 0xb8,
		0x2b, 0x39, 0x06, 0x53, 0x54, 0x61, 0xb6, 0xa7, 0x79, 0xfe, 0xa1, 0x66, 0x4d, 0xb4, 0x1c, 0x7f,
		0xc0, 0x38, 0x8a, 0x21, 0x88, 0x79, 0xa4, 0x6f, 0x9f, 0x86, 0xe6, 0xab, 0xdc, 0x23, 0x11, 0x18,
		0xdb, 0x7a, 0x7e, 0x40, 0xae, 0xaa, 0x4e, 0xc3, 0xf6, 0x87, 0x7c, 0xeb, 0x51, 0xec, 0x4e, 0x94,
		0xf1, 0x3a, 0xe4, 0x7d, 0xf3, 0x95, 0x89, 0x68, 0xfe, 0x88, 0xaf, 0x34, 0x01, 0x60, 0xf0, 0x6d,
		0x38, 0x3b, 0xb6, 0x4c, 0x4c, 0x40, 0xf6, 0xc7, 0x8c, 0x6c, 0x69, 0x4c, 0xa9, 0x60, 0x29, 0xe1,
		0xb4, 0x94, 0x7f, 0xc2, 0x53, 0x02, 0x1a, 0xe2, 0x6a, 0xe1, 0x83, 0x82, 0xaf, 0x75, 0x4e, 0xe7,
		0xb5, 0x3f, 0xe5, 0x5e, 0xa3, 0xd8, 0x98, 0xd7, 0xf6, 0x60, 0x89, 0x31, 0x9e, 0x6e, 0x5d, 0xbf,
		0xc6, 0x13, 0x2b, 0x45, 0xef, 0xc7, 0x57, 0xf7, 0xa7, 0x60, 0x39, 0x74, 0x27, 0xef, 0x48, 0x7d,
		0xb5, 0xa7, 0xb9, 0x13, 0x30, 0x7f, 0x9d, 0x31, 0xf3, 0x8c, 0x1f, 0xb6, 0xb4, 0xfe, 0x8e, 0xe6,
		0x62, 0xf2, 0x5b, 0x50, 0xe6, 0xe4, 0x7d, 0xdb, 0x43, 0xba, 0xd3, 0xb5, 0xcd, 0x57, 0x90, 0x31,
		0x01, 0xf5, 0x9f, 0x0d, 0x2d, 0xd5, 0x7e, 0x04, 0x8e, 0x99, 0x1b, 0x20, 0x86, 0xbd, 0x8a, 0x6a,
		0xf6, 0x5c, 0xc7, 0x0b, 0x12, 0x18, 0xff, 0x9c, 0xaf, 0x54, 0x88, 0x6b, 0x10, 0x98, 0x5c, 0x83,
		0x12, 0x19, 0x4e, 0x1a, 0x92, 0x7f, 0xc1, 0x88, 0x66, 0x07, 0x28, 0x96, 0x38, 0x74, 0xa7, 0xe7,
		0x6a, 0xde, 0x24, 0xf9, 0xef, 0x2f, 0x79, 0xe2, 0x60, 0x10, 0x96, 0x38, 0x82, 0x23, 0x17, 0xe1,
		0x6a, 0x3f, 0x01, 0xc3, 0x37, 0x78, 0xe2, 0xe0, 0x18, 0x46, 0xc1, 0x1b, 0x86, 0x09, 0x28, 0xfe,
		0x8a, 0x53, 0x70, 0x0c, 0xa6, 0xf8, 0xd4, 0xa0, 0xd0, 0x7a, 0xa8, 0x6b, 0xfa, 0x81, 0x47, 0xfb,
		0xe0, 0x93, 0xa9, 0xbe, 0xf9, 0x6e, 0xbc, 0x09, 0x53, 0x22, 0x50, 0xf9, 0x26, 0xcc, 0x0d, 0xb5,
		0x18, 0x52, 0xd2, 0x7f, 0x37, 0x94, 0x7f, 0xe6, 0x3d, 0x96, 0x8c, 0xe2, 0x1d, 0x86, 0xbc, 0x8d,
		0xd7, 0x3d, 0xde, 0x07, 0x24, 0x93, 0xbd, 0xfa, 0x5e, 0xb8, 0xf4, 0xb1, 0x36, 0x40, 0xbe, 0x01,
		0xb3, 0xb1, 0x1e, 0x20, 0x99, 0xea, 0x67, 0x19, 0x55, 0x31, 0xda, 0x02, 0xc8, 0x57, 0x20, 0x83,
		0xeb, 0x79, 0x32, 0xfc, 0xe7, 0x18, 0x9c, 0xa8, 0xcb, 0x1f, 0x87, 0x1c, 0xaf, 0xe3, 0xc9, 0xd0,
		0x9f, 0x67, 0xd0, 0x10, 0x82, 0xe1, 0xbc, 0x86, 0x27, 0xc3, 0x7f, 0x81, 0xc3, 0x39, 0x04, 0xc3,
		0x27, 0x77, 0xe1, 0xdf, 0xfc, 0x62, 0x86, 0xe5, 0x61, 0xee, 0xbb, 0xeb, 0x30, 0xc3, 0x8a, 0x77,
		0x32, 0xfa, 0x73, 0xec, 0xe1, 0x1c, 0x21, 0x3f, 0x0f, 0xd9, 0x09, 0x1d, 0xfe, 0x79, 0x06, 0xa5,
		0xfa, 0x72, 0x15, 0x0a, 0x91, 0x82, 0x9d, 0x0c, 0xff, 0x25, 0x06, 0x8f, 0xa2, 0xb0, 0xe9, 0xac,
		0x60, 0x27, 0x13, 0xfc, 0x32, 0x37, 0x9d, 0x21, 0xb0, 0xdb, 0x78, 0xad, 0x4e, 0x46, 0xff, 0x0a,
		0xf7, 0x3a, 0x87, 0xc8, 0x2f, 0x42, 0x3e, 0xcc, 0xbf, 0xc9, 0xf8, 0x5f, 0x65, 0xf8, 0x01, 0x06,
		0x7b, 0x20, 0x92, 0xff, 0x93, 0x29, 0x7e, 0x8d, 0x7b, 0x20, 0x82, 0xc2, 0xdb, 0x68, 0xb8, 0xa6,
		0x27, 0x33, 0xfd, 0x3a, 0xdf, 0x46, 0x43, 0x25, 0x1d, 0xaf, 0x26, 0x49, 0x83, 0xc9, 0x14, 0xbf,
		0xc1, 0x57, 0x93, 0xe8, 0x63, 0x33, 0x86, 0x8b, 0x64, 0x32, 0xc7, 0x6f, 0x72, 0x33, 0x86, 0x6a,
		0xa4, 0xdc, 0x02, 0x69, 0xb4, 0x40, 0x26, 0xf3, 0x7d, 0x81, 0xf1, 0xcd, 0x8f, 0xd4, 0x47, 0xf9,
		0x25, 0x58, 0x1a, 0x5f, 0x1c, 0x93, 0x59, 0xbf, 0xf8, 0xde, 0xd0, 0x71, 0x26, 0x5a, 0x1b, 0xe5,
		0xbd, 0x41, 0x96, 0x8d, 0x16, 0xc6, 0x64, 0xda, 0xd7, 0xde, 0x8b, 0x27, 0xda, 0x68, 0x5d, 0x94,
		0x2b, 0x00, 0x83, 0x9a, 0x94, 0xcc, 0xf5, 0x3a, 0xe3, 0x8a, 0x80, 0xf0, 0xd6, 0x60, 0x25, 0x29,
		0x19, 0xff, 0x25, 0xbe, 0x35, 0x18, 0x02, 0x6f, 0x0d, 0x5e, 0x8d, 0x92, 0xd1, 0x6f, 0xf0, 0xad,
		0xc1, 0x21, 0xf2, 0x75, 0xc8, 0xd9, 0x7d, 0xcb, 0xc2, 0xb1, 0x25, 0x9d, 0xfc, 0x0f, 0x47, 0xe5,
		0x7f, 0x79, 0x9f, 0x81, 0x39, 0x40, 0xbe, 0x02, 0x59, 0xd4, 0x3b, 0x40, 0x46, 0x12, 0xf2, 0x5f,
		0xdf, 0xe7, 0xf9, 0x04, 0x6b, 0xcb, 0x2f, 0x02, 0xd0, 0xc3, 0x34, 0xf9, 0x4a, 0x94, 0x80, 0xfd,
		0xb7, 0xf7, 0xd9, 0xff, 0x32, 0x0c, 0x20, 0x03, 0x02, 0xfa, 0x9f, 0x11, 0x27, 0x13, 0xbc, 0x1b,
		0x27, 0x20, 0x07, 0xf0, 0x17, 0x60, 0xe6, 0x8e, 0xef, 0xd8, 0x81, 0xd6, 0x4d, 0x42, 0xff, 0x3b,
		0x43, 0x73, 0x7d, 0xec, 0xb0, 0x9e, 0xe3, 0xa1, 0x40, 0xeb, 0xfa, 0x49, 0xd8, 0xff, 0x60, 0xd8,
		0x10, 0x80, 0xc1, 0xba, 0xe6, 0x07, 0x93, 0xbc, 0xf7, 0x7f, 0x72, 0x30, 0x07, 0x60, 0xa3, 0xf1,
		0xef, 0xbb, 0xe8, 0x28, 0x09, 0xfb, 0x7d, 0x6e, 0x34, 0xd3, 0x97, 0x3f, 0x0e, 0x79, 0xfc, 0x93,
		0xfe, 0x7f, 0x4f, 0x02, 0xf8, 0xbf, 0x18, 0x78, 0x80, 0xc0, 0x4f, 0xf6, 0x03, 0x23, 0x30, 0x93,
		0x9d, 0xfd, 0xdf, 0x6c, 0xa5, 0xb9, 0xbe, 0x5c, 0x81, 0x82, 0x1f, 0x18, 0x46, 0x9f, 0x75, 0x34,
		0x09, 0xf0, 0xff, 0x79, 0x3f, 0x3c, 0xe4, 0x86, 0x18, 0xf9, 0xf6, 0xe0, 0x76, 0x03, 0x2f, 0x9e,
		0xa1, 0x9a, 0xb6, 0x1f, 0x68, 0xb6, 0x8e, 0xc6, 0xb5, 0x34, 0xf1, 0x4f, 0x2e, 0xe5, 0x6f, 0xb1,
		0x12, 0xca, 0x6f, 0xb9, 0x76, 0x31, 0x41, 0x83, 0xe3, 0x37, 0x2f, 0x8c, 0xbf, 0x07, 0x84, 0xba,
		0x53, 0x77, 0xe8, 0x0d, 0x20, 0x7c, 0x2b, 0x05, 0x85, 0xae, 0xe7, 0xf4, 0x5d, 0x76, 0x5d, 0x97,
		0x25, 0x83, 0xe5, 0xd3, 0x5d, 0xf2, 0xad, 0xfe, 0x34, 0xcc, 0xd4, 0x31, 0xce, 0xff, 0x98, 0xb4,
		0x02, 0x42, 0x97, 0xdc, 0x6c, 0xc2, 0x86, 0xb8, 0x4e, 0x99, 0xd9, 0xd4, 0x7a, 0x5d, 0x11, 0xba,
		0xcb, 0xcf, 0x81, 0x50, 0x97, 0x96, 0x60, 0x9a, 0x38, 0xe6, 0x63, 0xe4, 0x2b, 0x56, 0x5a, 0x61,
		0xa3, 0x50, 0xbe, 0x41, 0x2e, 0x3f, 0x05, 0x26, 0xdf, 0x18, 0xf0, 0x6f, 0x70, 0x7e, 0x61, 0x84,
		0x7f, 0xe3, 0x94, 0xfc, 0xe9, 0x01, 0xff, 0xe6, 0xe5, 0xb7, 0x1e, 0xae, 0x4c, 0x7d, 0xf7, 0xe1,
		0xca, 0xd4, 0x3f, 0x3c, 0x5c, 0x99, 0x7a, 0xfb, 0xe1, 0x8a, 0xf0, 0xfd, 0x87, 0x2b, 0xc2, 0xff,
		0x3d, 0x5c, 0x11, 0x1e, 0x3c, 0x5a, 0x11, 0xbe, 0xf2, 0x68, 0x45, 0xf8, 0xda, 0xa3, 0x15, 0xe1,
		0x9b, 0x8f, 0x56, 0x84, 0xb7, 0x1e, 0xad, 0x4c, 0x7d, 0xf7, 0xd1, 0xca, 0xd4, 0xdb, 0x8f, 0x56,
		0xa6, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x64, 0x5d, 0xc9, 0x6e, 0x1d, 0x30, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Groups1) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Groups1)
	if !ok {
		that2, ok := that.(Groups1)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Groups1")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Groups1 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Groups1 but is not nil && this == nil")
	}
	if len(this.G) != len(that1.G) {
		return fmt.Errorf("G this(%v) Not Equal that(%v)", len(this.G), len(that1.G))
	}
	for i := range this.G {
		if !this.G[i].Equal(that1.G[i]) {
			return fmt.Errorf("G this[%v](%v) Not Equal that[%v](%v)", i, this.G[i], i, that1.G[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Groups1) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Groups1)
	if !ok {
		that2, ok := that.(Groups1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.G) != len(that1.G) {
		return false
	}
	for i := range this.G {
		if !this.G[i].Equal(that1.G[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Groups1_G) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Groups1_G)
	if !ok {
		that2, ok := that.(Groups1_G)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Groups1_G")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Groups1_G but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Groups1_G but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if this.Field2 != nil && that1.Field2 != nil {
		if *this.Field2 != *that1.Field2 {
			return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", *this.Field2, *that1.Field2)
		}
	} else if this.Field2 != nil {
		return fmt.Errorf("this.Field2 == nil && that.Field2 != nil")
	} else if that1.Field2 != nil {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this.Field2, that1.Field2)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Groups1_G) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Groups1_G)
	if !ok {
		that2, ok := that.(Groups1_G)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if this.Field2 != nil && that1.Field2 != nil {
		if *this.Field2 != *that1.Field2 {
			return false
		}
	} else if this.Field2 != nil {
		return false
	} else if that1.Field2 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Groups2) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Groups2)
	if !ok {
		that2, ok := that.(Groups2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Groups2")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Groups2 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Groups2 but is not nil && this == nil")
	}
	if !this.G.Equal(that1.G) {
		return fmt.Errorf("G this(%v) Not Equal that(%v)", this.G, that1.G)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Groups2) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Groups2)
	if !ok {
		that2, ok := that.(Groups2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.G.Equal(that1.G) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Groups2_G) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Groups2_G)
	if !ok {
		that2, ok := that.(Groups2_G)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Groups2_G")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Groups2_G but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Groups2_G but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if len(this.Field2) != len(that1.Field2) {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", len(this.Field2), len(that1.Field2))
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return fmt.Errorf("Field2 this[%v](%v) Not Equal that[%v](%v)", i, this.Field2[i], i, that1.Field2[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Groups2_G) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Groups2_G)
	if !ok {
		that2, ok := that.(Groups2_G)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if len(this.Field2) != len(that1.Field2) {
		return false
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Groups1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&group.Groups1{")
	if this.G != nil {
		s = append(s, "G: "+fmt.Sprintf("%#v", this.G)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Groups1_G) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&group.Groups1_G{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringGroup(this.Field1, "int64")+",\n")
	}
	if this.Field2 != nil {
		s = append(s, "Field2: "+valueToGoStringGroup(this.Field2, "float64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Groups2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&group.Groups2{")
	if this.G != nil {
		s = append(s, "G: "+fmt.Sprintf("%#v", this.G)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Groups2_G) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&group.Groups2_G{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringGroup(this.Field1, "int64")+",\n")
	}
	if this.Field2 != nil {
		s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGroup(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func NewPopulatedGroups1(r randyGroup, easy bool) *Groups1 {
	this := &Groups1{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.G = make([]*Groups1_G, v1)
		for i := 0; i < v1; i++ {
			this.G[i] = NewPopulatedGroups1_G(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGroup(r, 2)
	}
	return this
}

func NewPopulatedGroups1_G(r randyGroup, easy bool) *Groups1_G {
	this := &Groups1_G{}
	if r.Intn(10) != 0 {
		v2 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		this.Field1 = &v2
	}
	if r.Intn(10) != 0 {
		v3 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.Field2 = &v3
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGroup(r, 3)
	}
	return this
}

func NewPopulatedGroups2(r randyGroup, easy bool) *Groups2 {
	this := &Groups2{}
	if r.Intn(10) != 0 {
		this.G = NewPopulatedGroups2_G(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGroup(r, 2)
	}
	return this
}

func NewPopulatedGroups2_G(r randyGroup, easy bool) *Groups2_G {
	this := &Groups2_G{}
	if r.Intn(10) != 0 {
		v4 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		this.Field1 = &v4
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.Field2 = make([]float64, v5)
		for i := 0; i < v5; i++ {
			this.Field2[i] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.Field2[i] *= -1
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGroup(r, 3)
	}
	return this
}

type randyGroup interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGroup(r randyGroup) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGroup(r randyGroup) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneGroup(r)
	}
	return string(tmps)
}
func randUnrecognizedGroup(r randyGroup, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGroup(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGroup(dAtA []byte, r randyGroup, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGroup(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGroup(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (this *Groups1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Groups1{`,
		`G:` + strings.Replace(fmt.Sprintf("%v", this.G), "Groups1_G", "Groups1_G", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Groups1_G) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Groups1_G{`,
		`Field1:` + valueToStringGroup(this.Field1) + `,`,
		`Field2:` + valueToStringGroup(this.Field2) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Groups2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Groups2{`,
		`G:` + strings.Replace(fmt.Sprintf("%v", this.G), "Groups2_G", "Groups2_G", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Groups2_G) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Groups2_G{`,
		`Field1:` + valueToStringGroup(this.Field1) + `,`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGroup(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}

func init() { proto.RegisterFile("group.proto", fileDescriptorGroup) }

var fileDescriptorGroup = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2f, 0xca, 0x2f,
	0x2d, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0xa4, 0x74, 0xd3, 0x33, 0x4b,
	0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3, 0xf5, 0xc1, 0xb2, 0x49,
	0xa5, 0x69, 0x60, 0x1e, 0x98, 0x03, 0x66, 0x41, 0x74, 0x29, 0xc5, 0x71, 0xb1, 0xbb, 0x83, 0xf4,
	0x15, 0x1b, 0x0a, 0xc9, 0x71, 0x31, 0xa6, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x19, 0x09, 0xe8,
	0x41, 0x4c, 0x86, 0x4a, 0xe9, 0xb9, 0x07, 0x31, 0xa6, 0x4b, 0x19, 0x73, 0x31, 0xba, 0x0b, 0x89,
	0x71, 0xb1, 0xb9, 0x65, 0xa6, 0xe6, 0xa4, 0x18, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x41,
	0x79, 0x70, 0x71, 0x23, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x46, 0xa8, 0xb8, 0x11, 0xc2, 0x7c, 0x23,
	0x98, 0xf9, 0x8c, 0x18, 0xe6, 0x1b, 0x91, 0x68, 0x3e, 0x33, 0xc2, 0x7c, 0x27, 0x93, 0x13, 0x0f,
	0xe5, 0x18, 0x2e, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50, 0x8e, 0xe1, 0xc1, 0x43, 0x39, 0xc6, 0x0f,
	0x0f, 0xe5, 0x18, 0x7f, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3,
	0x86, 0x47, 0x72, 0x8c, 0x3b, 0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24, 0xc7, 0x70, 0xe1, 0x91, 0x1c,
	0xc3, 0x83, 0x47, 0x72, 0x0c, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xd8, 0xef, 0x2c, 0x39,
	0x01, 0x00, 0x00,
}
