// Code generated by protoc-gen-gogo.
// source: extrastructcontent.proto
// DO NOT EDIT!

/*
Package extrastructcontent is a generated protocol buffer package.

Package extrastructcontent tests the behavior of extra_struct_content extensions.

It is generated from these files:
	extrastructcontent.proto

It has these top-level messages:
	ExtraStructContent
*/
package extrastructcontent

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type ExtraStructContent struct {
	Foo               *int64 `protobuf:"varint,1,opt,name=Foo,json=foo" json:"Foo,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
	MyMagicValue      int64
	MyOtherMagicValue string
}

func (m *ExtraStructContent) Reset()         { *m = ExtraStructContent{} }
func (m *ExtraStructContent) String() string { return proto.CompactTextString(m) }
func (*ExtraStructContent) ProtoMessage()    {}
func (*ExtraStructContent) Descriptor() ([]byte, []int) {
	return fileDescriptorExtrastructcontent, []int{0}
}

func (m *ExtraStructContent) GetFoo() int64 {
	if m != nil && m.Foo != nil {
		return *m.Foo
	}
	return 0
}

func init() {
	proto.RegisterType((*ExtraStructContent)(nil), "extrastructcontent.ExtraStructContent")
}
func (m *ExtraStructContent) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ExtraStructContent) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Foo != nil {
		data[i] = 0x8
		i++
		i = encodeVarintExtrastructcontent(data, i, uint64(*m.Foo))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Extrastructcontent(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Extrastructcontent(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintExtrastructcontent(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ExtraStructContent) Size() (n int) {
	var l int
	_ = l
	if m.Foo != nil {
		n += 1 + sovExtrastructcontent(uint64(*m.Foo))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExtrastructcontent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExtrastructcontent(x uint64) (n int) {
	return sovExtrastructcontent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExtraStructContent) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtrastructcontent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtraStructContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtraStructContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Foo", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtrastructcontent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Foo = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExtrastructcontent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExtrastructcontent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExtrastructcontent(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExtrastructcontent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtrastructcontent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtrastructcontent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExtrastructcontent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExtrastructcontent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExtrastructcontent(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExtrastructcontent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExtrastructcontent   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorExtrastructcontent = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x48, 0xad, 0x28, 0x29,
	0x4a, 0x2c, 0x2e, 0x29, 0x2a, 0x4d, 0x2e, 0x49, 0xce, 0xcf, 0x2b, 0x49, 0xcd, 0x2b, 0xd1, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xc2, 0x94, 0x91, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d,
	0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0x2b, 0x4d, 0x2a, 0x4d, 0x03,
	0xf3, 0xc0, 0x1c, 0x30, 0x0b, 0x62, 0x84, 0x52, 0x38, 0x97, 0x90, 0x2b, 0xc8, 0x90, 0x60, 0xb0,
	0x21, 0xce, 0x10, 0x43, 0x84, 0x04, 0xb8, 0x98, 0xdd, 0xf2, 0xf3, 0x25, 0x18, 0x15, 0x18, 0x35,
	0x98, 0x83, 0x98, 0xd3, 0xf2, 0xf3, 0xad, 0xf4, 0x3f, 0x2d, 0x94, 0xd7, 0xf6, 0xad, 0xf4, 0x4d,
	0x4c, 0xcf, 0x4c, 0x0e, 0x4b, 0xcc, 0x29, 0x4d, 0x55, 0xc8, 0xcc, 0x2b, 0x31, 0x33, 0xe1, 0xf2,
	0xad, 0xf4, 0x2f, 0xc9, 0x48, 0x2d, 0x42, 0x12, 0x07, 0x3a, 0x27, 0x33, 0x2f, 0xdd, 0x89, 0xe7,
	0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x40, 0xfc, 0x00, 0x88, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc2,
	0x25, 0x46, 0x23, 0xc4, 0x00, 0x00, 0x00,
}
