// Protocol Buffers for Go with Gadgets
//
// Copyright (c) 2013, The GoGo Authors. All rights reserved.
// http://github.com/buptbill220/protobuf
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/*
The size plugin generates a Size or ProtoSize method for each message.
This is useful with the MarshalTo method generated by the marshalto plugin and the
gogoproto.marshaler and gogoproto.marshaler_all extensions.

It is enabled by the following extensions:

  - sizer
  - sizer_all
  - protosizer
  - protosizer_all

The size plugin also generates a test given it is enabled using one of the following extensions:

  - testgen
  - testgen_all

And a benchmark given it is enabled using one of the following extensions:

  - benchgen
  - benchgen_all

Let us look at:

  github.com/buptbill220/protobuf/test/example/example.proto
*/
package validate

import (
	"fmt"

	"github.com/buptbill220/protobuf/protoc-gen-gogo/generator"
	"github.com/buptbill220/protobuf/protoc-gen-gogo/descriptor"
)

type JsonMarshal struct {
	*generator.Generator
	generator.PluginImports
	atleastOne bool
	localName  string
	typesPkg   generator.Single
}

func NewJsonMarshal() *JsonMarshal {
	return &JsonMarshal{}
}

func (p *JsonMarshal) Name() string {
	return "validate"
}

func (p *JsonMarshal) Init(g *generator.Generator) {
	p.Generator = g
}

func (p *JsonMarshal) Generate(file *generator.FileDescriptor) {
	p.PluginImports = generator.NewPluginImports(p.Generator)
	fmtPkg := p.PluginImports.NewImport("fmt").Use()
	p.atleastOne = false
	p.localName = generator.FileName(file)
	
	
	for _, message := range file.Messages() {
		p.atleastOne = true
		ccTypeName := generator.CamelCaseSlice(message.TypeName())
		p.P(`func (m *`, ccTypeName, `) Validate() (error) {`)
		p.In()
		p.P(`if m == nil {`)
		p.In()
		p.P(fmt.Sprintf(`return ` + fmtPkg + `.Errorf("msg %s is nil")`, ccTypeName))
		p.Out()
		p.P(`}`)
		for _, f := range message.GetField() {
			goName := CamelCase(f.GetName())
			if f.GetLabel() == descriptor.FieldDescriptorProto_LABEL_REPEATED {
				if f.GetType() == descriptor.FieldDescriptorProto_TYPE_MESSAGE {
					p.P(`for _, p := range m.` + goName + ` {`)
					p.In()
					
					p.P(`if err := p.Validate(); err != nil {`)
					p.In()
					p.P(`return err`)
					p.Out()
					p.P(`}`)
					
					p.Out()
					p.P(`}`)
				}
				continue
			}
			
			if f.GetType() == descriptor.FieldDescriptorProto_TYPE_MESSAGE {
				if f.GetLabel() == descriptor.FieldDescriptorProto_LABEL_REQUIRED {
					p.P(`if m.` + goName + ` == nil {`)
					p.In()
					p.P(fmt.Sprintf(`return ` + fmtPkg + `.Errorf("required field %s.%s is nil")`, ccTypeName, goName))
					p.Out()
					p.P(`}`)
					p.P(`if err := m.` + goName + `.Validate(); err != nil {`)
					p.In()
					p.P(`return err`)
					p.Out()
					p.P(`}`)
				} else {
					p.P(`if m.` + goName + ` != nil {`)
					p.In()
					
					p.P(`if err := m.` + goName + `.Validate(); err != nil {`)
					p.In()
					p.P(`return err`)
					p.Out()
					p.P(`}`)
					
					p.Out()
					p.P(`}`)
				}
				
			} else if f.GetLabel() == descriptor.FieldDescriptorProto_LABEL_REQUIRED {
				p.P(`if m.` + goName + ` == nil {`)
				p.In()
				p.P(fmt.Sprintf(`return ` + fmtPkg + `.Errorf("required field %s.%s is nil")`, ccTypeName, goName))
				p.Out()
				p.P(`}`)
			}
		}
		p.P(`return nil`)
		p.Out()
		p.P(`}`)
		p.P()
	}
}

func CamelCase(s string) string {
	if s == "" {
		return ""
	}
	t := make([]byte, 0, 32)
	i := 0
	if s[0] == '_' {
		// Need a capital letter; drop the '_'.
		t = append(t, 'X')
		i++
	}
	// Invariant: if the next letter is lower case, it must be converted
	// to upper case.
	// That is, we process a word at a time, where words are marked by _ or
	// upper case letter. Digits are treated as words.
	for ; i < len(s); i++ {
		c := s[i]
		if c == '_' && i+1 < len(s) && isASCIILower(s[i+1]) {
			continue // Skip the underscore in s.
		}
		if isASCIIDigit(c) {
			t = append(t, c)
			continue
		}
		// Assume we have a letter now - if not, it's a bogus identifier.
		// The next word is a sequence of characters that must start upper case.
		if isASCIILower(c) {
			c ^= ' ' // Make it a capital letter.
		}
		t = append(t, c) // Guaranteed not lower case.
		// Accept lower case sequence that follows.
		for i+1 < len(s) && isASCIILower(s[i+1]) {
			i++
			t = append(t, s[i])
		}
	}
	return string(t)
}

func isASCIILower(c byte) bool {
	return 'a' <= c && c <= 'z'
}

// Is c an ASCII digit?
func isASCIIDigit(c byte) bool {
	return '0' <= c && c <= '9'
}

func init() {
	generator.RegisterPlugin(NewJsonMarshal())
}
